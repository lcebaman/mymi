%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lus/scratch/p02128/work/MiniGhost/source/MG_PROFILING.F
Compiled : 10/31/18  05:23:32
Compiler : Version 8.7.6
Ftnlx    : Version 8503 (libcif 85008)
Target   : x86-64
Command  : ftn_driver.exe -hcpu=broadwell -hstatic -D__CRAYXC
           -D__CRAY_BROADWELL -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries
           -D_MG_MPI -D_MG_INT4 -D_MG_REAL8 -ffree -hlist=a -c MG_PROFILING.F
           -I/opt/cray/pe/cce/8.7.6/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/mpt/7.7.3/gni/mpich-cray/8.6/include
           -I/opt/cray/pe/libsci/18.07.1/CRAY/8.6/x86_64/include
           -I/opt/cray/rca/2.2.18-6.0.7.0_33.3__g2aa4f39.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/xpmem/2.2.15-6.0.7.0_35.11__g7549d06.ari/include
           -I/opt/cray/dmapp/7.1.1-6.0.7.0_34.3__g5a674e0.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-6.0.7.0_24.1__g3b1768f.ari/include
           -I/opt/cray/ugni/6.0.14.0-6.0.7.0_23.1__gea11d3d.ari/include
           -I/opt/cray/udreg/2.3.2-6.0.7.0_33.18__g5196236.ari/include
           -I/opt/cray/alps/6.6.43-6.0.7.0_26.4__ga796da3.ari/include
           -I/opt/cray/wlm_detect/1.3.3-6.0.7.0_47.2__g7109084.ari/include
           -I/opt/cray/krca/2.2.4-6.0.7.0_32.3__g8505b97.ari/include
           -I/opt/cray-hss-devel/8.0.0/include
Program
  Units  : MG_PROFILING_MOD

ftnlx report
------------
Source   : /lus/scratch/p02128/work/MiniGhost/source/MG_PROFILING.F
Date     : 10/31/2018  05:23:37


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,scalar2,thread2,vector2,mpi0,modinline,ipa3,noaggress
           -O autoprefetch,noautothread,fusion2,nomsgs,nonegmsgs,nooverindex
           -O pattern,shortcircuit2,unroll2,nozeroinc
           -h noadd_paren,align_arrays,nobounds,caf,noconcurrent,nocontiguous
           -h nocontiguous_assumed_shape,fma,nofp_trap,nofunc_trace,noomp_analyz
           e
           -h noomp_trace,nopat_trace
           -h safe_addr,thread_do_concurrent,fp2=approx,flex_mp=default         
           -h alias=default:standard_restrict         
           -h static (or -static)
           -h omp,noacc
           -h cpu=x86-64,broadwell
           -h network=aries
           -K trap=none
           -s default32
           -eh
           -d abcdefgijmopqsvwzACEFIPQRST0
           -e nBDZ 
           -f free
           -m3
           -S /lus/scratch/tmp/pe_5098/MG_PROFILING_1.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.           ! ************************************************************************
    2.           !
    3.           !               miniGhost: stencil computations with boundary exchange.
    4.           !                 Copyright (2012) Sandia Corporation
    5.           !
    6.           ! Under terms of Contract DE-AC04-141AL85000, there is a non-exclusive
    7.           ! license for use of this work by or on behalf of the U.S. Government.
    8.           !
    9.           ! This library is free software; you can redistribute it and/or modify
   10.           ! it under the terms of the GNU Lesser General Public License as
   11.           ! published by the Free Software Foundation; either version 2.1 of the
   12.           ! License, or (at your option) any later version.
   13.           !
   14.           ! This library is distributed in the hope that it will be useful, but
   15.           ! WITHOUT ANY WARRANTY; without even the implied warranty of
   16.           ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   17.           ! Lesser General Public License for more details.
   18.           !
   19.           ! You should have received a copy of the GNU Lesser General Public
   20.           ! License along with this library; if not, write to the Free Software
   21.           ! Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
   22.           ! USA
   23.           ! Questions? Contact Richard F. Barrett (rfbarre@sandia.gov) or
   24.           !                    Michael A. Heroux (maherou@sandia.gov)
   25.           !
   26.           ! ************************************************************************
   27.           !
   28.           MODULE MG_PROFILING_MOD
   29.           
   30.              ! Purpose
   31.              ! =======
   32.              ! Verbose performance profiling reporting.
   33.           
   34.                 USE MG_CONSTANTS_MOD
   35.                 USE MG_UTILS_MOD
   36.                 USE MG_ENV_MOD
   37.           
   38.                 IMPLICIT NONE
   39.           
   40.              ! Keep track of computation and communication. 
   41.           
   42.                 INTEGER(KIND=MG_INT8) :: MG_PERF_INIT_MIN = 999999999
   43.           
   44.                 TYPE :: PERF_CHECK
   45.           
   46.                    ! Counts are accumulated for each iteration, times and number of function calls are global.
   47.                    ! (This is designed to avoid overflow.)
   48.           
   49.                    ! Local values:
   50.           
   51.                    INTEGER(KIND=MG_INT8) :: NUM_COPY
   52.                    INTEGER(KIND=MG_INT8) :: NUM_ADDS
   53.                    INTEGER(KIND=MG_INT8) :: NUM_DIVIDES
   54.           
   55.                    INTEGER(KIND=MG_INT8) :: NUM_SENDS
   56.                    INTEGER(KIND=MG_INT8) :: SEND_COUNT
   57.                    INTEGER(KIND=MG_INT8) :: SEND_COUNT_MAX
   58.                    INTEGER(KIND=MG_INT8) :: SEND_COUNT_MIN
   59.           
   60.                    INTEGER(KIND=MG_INT8) :: NUM_RECVS
   61.                    INTEGER(KIND=MG_INT8) :: RECV_COUNT
   62.                    INTEGER(KIND=MG_INT8) :: RECV_COUNT_MAX
   63.                    INTEGER(KIND=MG_INT8) :: RECV_COUNT_MIN
   64.           
   65.                    INTEGER(KIND=MG_INT8) :: NUM_BCASTS
   66.                    INTEGER(KIND=MG_INT8) :: BCAST_COUNT
   67.                    INTEGER(KIND=MG_INT8) :: BCAST_COUNT_MAX
   68.                    INTEGER(KIND=MG_INT8) :: BCAST_COUNT_MIN
   69.           
   70.                    INTEGER(KIND=MG_INT8) :: NUM_ALLREDUCES
   71.                    INTEGER(KIND=MG_INT8) :: ALLREDUCE_COUNT
   72.                    INTEGER(KIND=MG_INT8) :: ALLREDUCE_COUNT_MAX
   73.                    INTEGER(KIND=MG_INT8) :: ALLREDUCE_COUNT_MIN
   74.           
   75.                    INTEGER(KIND=MG_INT8) :: NUM_SUMGRID
   76.           
   77.                    ! Timing variables:
   78.           
   79.                    REAL(KIND=MG_REAL8) :: TIME_BSPMA_PE
   80.                    REAL(KIND=MG_REAL8) :: TIME_COPY_PE
   81.                    REAL(KIND=MG_REAL8) :: TIME_PACK_PE
   82.                    REAL(KIND=MG_REAL8) :: TIME_RECV_PE
   83.                    REAL(KIND=MG_REAL8) :: TIME_SEND_PE
   84.                    REAL(KIND=MG_REAL8) :: TIME_STENCIL_PE
   85.                    REAL(KIND=MG_REAL8) :: TIME_BC_PE
   86.                    REAL(KIND=MG_REAL8) :: TIME_SVAF_PE
   87.                    REAL(KIND=MG_REAL8) :: TIME_UNPACK_PE
   88.                    REAL(KIND=MG_REAL8) :: TIME_WAIT_PE
   89.                    REAL(KIND=MG_REAL8) :: TIME_WALL_PE
   90.           
   91.                    REAL(KIND=MG_REAL8) :: TIME_PACK_X_PE
   92.                    REAL(KIND=MG_REAL8) :: TIME_SEND_X_PE
   93.                    REAL(KIND=MG_REAL8) :: TIME_WAIT_X_PE
   94.                    REAL(KIND=MG_REAL8) :: TIME_RECV_X_PE
   95.                    REAL(KIND=MG_REAL8) :: TIME_UNPACK_X_PE
   96.           
   97.                    REAL(KIND=MG_REAL8) :: TIME_PACK_Y_PE
   98.                    REAL(KIND=MG_REAL8) :: TIME_SEND_Y_PE
   99.                    REAL(KIND=MG_REAL8) :: TIME_WAIT_Y_PE
  100.                    REAL(KIND=MG_REAL8) :: TIME_RECV_Y_PE
  101.                    REAL(KIND=MG_REAL8) :: TIME_UNPACK_Y_PE
  102.           
  103.                    REAL(KIND=MG_REAL8) :: TIME_PACK_Z_PE
  104.                    REAL(KIND=MG_REAL8) :: TIME_SEND_Z_PE
  105.                    REAL(KIND=MG_REAL8) :: TIME_WAIT_Z_PE
  106.                    REAL(KIND=MG_REAL8) :: TIME_RECV_Z_PE
  107.                    REAL(KIND=MG_REAL8) :: TIME_UNPACK_Z_PE
  108.           
  109.                    REAL(KIND=MG_REAL8) :: TIME_SUMGRID_PE     ! Local summation + global summation.
  110.                    REAL(KIND=MG_REAL8) :: TIME_SUMGRID_COMP_PE
  111.                    REAL(KIND=MG_REAL8) :: TIME_SUMGRID_COMM_PE
  112.           
  113.                 END TYPE PERF_CHECK
  114.           
  115.                 TYPE ( PERF_CHECK ), PUBLIC :: MG_PERF
  116.           
  117.              CONTAINS
  118.           
  119.           !     ==================================================================
  120.           
  121.                 SUBROUTINE MG_PERF_INIT ( IERR )
  122.           
  123.                    IMPLICIT NONE
  124.           
  125.                    ! ----------------
  126.                    ! Scalar Arguments
  127.                    ! ----------------
  128.           
  129.                    INTEGER, INTENT(OUT) :: IERR
  130.           
  131.                    ! ---------------------
  132.                    ! Executable Statements
  133.                    ! ---------------------
  134.           
  135.                    MG_PERF%NUM_ADDS        = 0
  136.                    MG_PERF%NUM_DIVIDES       = 0
  137.                    MG_PERF%NUM_COPY        = 0
  138.           
  139.                    MG_PERF%NUM_SENDS       = 0
  140.                    MG_PERF%SEND_COUNT      = 0
  141.                    MG_PERF%NUM_RECVS       = 0
  142.                    MG_PERF%RECV_COUNT      = 0
  143.                    MG_PERF%NUM_BCASTS      = 0
  144.                    MG_PERF%BCAST_COUNT     = 0
  145.                    MG_PERF%NUM_ALLREDUCES  = 0
  146.                    MG_PERF%ALLREDUCE_COUNT = 0
  147.           
  148.                    MG_PERF%NUM_SUMGRID     = 0
  149.           
  150.                    MG_PERF%SEND_COUNT_MAX      = 0
  151.                    MG_PERF%RECV_COUNT_MAX      = 0
  152.                    MG_PERF%BCAST_COUNT_MAX     = 0
  153.                    MG_PERF%ALLREDUCE_COUNT_MAX = 0
  154.              
  155.                    MG_PERF%SEND_COUNT_MIN      = 1000000000
  156.                    MG_PERF%RECV_COUNT_MIN      = 1000000000
  157.                    MG_PERF%BCAST_COUNT_MIN     = 1000000000
  158.                    MG_PERF%ALLREDUCE_COUNT_MIN = 1000000000
  159.           
  160.                    ! Initialize timer variables.
  161.           
  162.                    MG_PERF%TIME_WALL_PE    = 0.0D+0
  163.                    MG_PERF%TIME_PACK_PE    = 0.0D+0
  164.                    MG_PERF%TIME_BSPMA_PE   = 0.0D+0
  165.                    MG_PERF%TIME_SVAF_PE    = 0.0D+0
  166.                    MG_PERF%TIME_PACK_PE    = 0.0D+0
  167.                    MG_PERF%TIME_SEND_PE    = 0.0D+0
  168.                    MG_PERF%TIME_WAIT_PE    = 0.0D+0
  169.                    MG_PERF%TIME_RECV_PE    = 0.0D+0
  170.                    MG_PERF%TIME_UNPACK_PE  = 0.0D+0
  171.                    MG_PERF%TIME_STENCIL_PE = 0.0D+0
  172.           
  173.                    MG_PERF%TIME_PACK_X_PE   = 0.0D+0
  174.                    MG_PERF%TIME_SEND_X_PE   = 0.0D+0
  175.                    MG_PERF%TIME_WAIT_X_PE   = 0.0D+0
  176.                    MG_PERF%TIME_RECV_X_PE   = 0.0D+0
  177.                    MG_PERF%TIME_UNPACK_X_PE = 0.0D+0
  178.           
  179.                    MG_PERF%TIME_PACK_Y_PE   = 0.0D+0
  180.                    MG_PERF%TIME_SEND_Y_PE   = 0.0D+0
  181.                    MG_PERF%TIME_WAIT_Y_PE   = 0.0D+0
  182.                    MG_PERF%TIME_RECV_Y_PE   = 0.0D+0
  183.                    MG_PERF%TIME_UNPACK_Y_PE = 0.0D+0
  184.           
  185.                    MG_PERF%TIME_PACK_Z_PE   = 0.0D+0
  186.                    MG_PERF%TIME_SEND_Z_PE   = 0.0D+0
  187.                    MG_PERF%TIME_WAIT_Z_PE   = 0.0D+0
  188.                    MG_PERF%TIME_RECV_Z_PE   = 0.0D+0
  189.                    MG_PERF%TIME_UNPACK_Z_PE = 0.0D+0
  190.           
  191.                    MG_PERF%TIME_SUMGRID_PE      = 0.0D+0
  192.                    MG_PERF%TIME_SUMGRID_COMP_PE = 0.0D+0
  193.                    MG_PERF%TIME_SUMGRID_COMM_PE = 0.0D+0
  194.           
  195.                 END SUBROUTINE MG_PERF_INIT
ftn-5005 ftn: NOTE MG_PERF_INIT, File = MG_PROFILING.F, Line = 195 
  Dummy Argument "IERR" which has INTENT(OUT) is not assigned a value or

  196.           
  197.           !     ==================================================================
  198.           
  199.                 SUBROUTINE MG_PERF_REPORT ( COMM_METHOD, STENCIL, IERR )
  200.           
  201.                 IMPLICIT NONE
  202.           
  203.                 ! Argument Declarations
  204.                 INTEGER(KIND=MG_INT), INTENT(IN)  ::       &
  205.                    COMM_METHOD, STENCIL
  206.           
  207.                 INTEGER, INTENT(OUT) :: IERR
  208.           
  209.                 !  Purpose
  210.                 !  =======
  211.                 !  Collate, process, and report performance results.
  212.           
  213.                 ! Local Scalars
  214.                 CHARACTER(LEN=30) ::        &
  215.                    TEST_DATE,               &
  216.                    TEST_MACHINE,            &
  217.                    TEST_TIME
  218.           
  219.                 INTEGER, PARAMETER :: &
  220.                    INUM_ADDS        = 1,           &
  221.                    INUM_DIVIDES       = 2,           &
  222.                    INUM_COPYS       = 3,           &
  223.           
  224.                    INUM_SENDS       = 4,           &
  225.                    ISEND_COUNT      = 5,           &
  226.                    INUM_RECVS       = 6,           &
  227.                    IRECV_COUNT      = 7,           &
  228.            
  229.                    INUM_BCASTS      = 8,           &
  230.                    IBCAST_COUNT     = 9,           &
  231.                    INUM_ALLREDUCES  = 10,          &
  232.                    IALLREDUCE_COUNT = 11,          &
  233.           
  234.                    INUM_SUMGRID     = 12,          &
  235.           
  236.                    NUM_PARAMS       = 12
  237.           
  238.                 INTEGER ::            &
  239.                    I,                              & ! Counter
  240.                    J,                              & ! Counter
  241.                    ICLOCK_RATE,                    &
  242.                    IDUM,                           &
  243.                    LEN,                            &
  244.                    NUM_TO_MAX,                     &
  245.                    NUM_TO_MIN,                     &
  246.                    NUM_TO_SUM,                     &
  247.                    OUTPUT_LOC
  248.           
  249.                ! Global values:
  250.           
  251.                 INTEGER(KIND=MG_INT8) :: &
  252.                    GNUM_ADDS,                                        &
  253.                    GNUM_DIVIDES,                                       &
  254.                    GNUM_COPY,                                        &
  255.           
  256.                    GNUM_SENDS,                                       &
  257.                    GSEND_COUNT,                                      &
  258.                    GSEND_COUNT_MAX,                                  &
  259.                    GSEND_COUNT_MIN,                                  &
  260.                    GSEND_NODE_NUM_MAX,                               &
  261.                    GSEND_NODE_NUM_MIN,                               &
  262.                    GSEND_NODE_COUNT_MAX,                             &
  263.                    GSEND_NODE_COUNT_MIN,                             &
  264.           
  265.                    GNUM_RECVS,                                       &
  266.                    GRECV_COUNT,                                      &
  267.                    GRECV_COUNT_MAX,                                  &
  268.                    GRECV_COUNT_MIN,                                  &
  269.                    GRECV_NODE_NUM_MAX,                               &
  270.                    GRECV_NODE_NUM_MIN,                               &
  271.                    GRECV_NODE_COUNT_MAX,                             &
  272.                    GRECV_NODE_COUNT_MIN,                             &
  273.           
  274.                    GBCAST_COUNT_MAX,                                 &
  275.                    GBCAST_COUNT_MIN,                                 &
  276.           
  277.                    GALLREDUCE_COUNT_MAX,                             &
  278.                    GALLREDUCE_COUNT_MIN
  279.           
  280.                 INTEGER(KIND=MG_INT8), DIMENSION(:), ALLOCATABLE ::   &
  281.                    MAX_THESE,                                         &
  282.                    MIN_THESE,                                         &
  283.                    SUM_THESE,                                         &
  284.                    THESE_MAXED,                                       &
  285.                    THESE_MINNED,                                      &
  286.                    THESE_SUMMED
  287.           
  288.                 REAL(KIND=MG_REAL4) ::       &
  289.                    CLOCK_RES = 0.0
  290.           
  291.                 REAL(KIND=MG_REAL8) ::       &
  292.                    GFLOPS,                   &
  293.           
  294.                    TIME_COMM_METHOD_AVG,     &  ! Coarsest grain of communication requirements.
  295.                    TIME_COMM_METHOD_STDDEV,  &
  296.                    TIME_COMM_METHOD_MAX,     &
  297.                    TIME_COMM_METHOD_MIN,     &
  298.                    TIME_COMM_METHOD_SUM,     &
  299.           
  300.                    TIME_COMM_AVG,         & ! Sum of individual comm routines, eg pack, send, recv, unpack. 
  301.                    TIME_COMM_STDDEV,      &
  302.                    TIME_COMM_MAX,         &
  303.                    TIME_COMM_MIN,         &
  304.                    TIME_COMM_SUM,         &
  305.           
  306.                    TIME_COMM_X_AVG,       & ! For three directions
  307.                    TIME_COMM_X_STDDEV,    &
  308.                    TIME_COMM_X_MAX,       &
  309.                    TIME_COMM_X_MIN,       &
  310.                    TIME_COMM_X_SUM,       &
  311.           
  312.                    TIME_COMM_Y_AVG,       &
  313.                    TIME_COMM_Y_STDDEV,    &
  314.                    TIME_COMM_Y_MAX,       &
  315.                    TIME_COMM_Y_MIN,       &
  316.                    TIME_COMM_Y_SUM,       &
  317.           
  318.                    TIME_COMM_Z_AVG,       &
  319.                    TIME_COMM_Z_STDDEV,    &
  320.                    TIME_COMM_Z_MAX,       &
  321.                    TIME_COMM_Z_MIN,       &
  322.                    TIME_COMM_Z_SUM,       &
  323.           
  324.                    TIME_WALL_AVG,            & ! Total time around time stepping.
  325.                    TIME_WALL_STDDEV,         &
  326.                    TIME_WALL_MAX,            &
  327.                    TIME_WALL_MIN,            &
  328.                    TIME_WALL_SUM,            &
  329.           
  330.                    TIME_PACK_AVG,            & ! Comm explicit data packing requirements.
  331.                    TIME_PACK_STDDEV,         &
  332.                    TIME_PACK_MAX,            &
  333.                    TIME_PACK_MIN,            &
  334.                    TIME_PACK_SUM,            &
  335.           
  336.                    TIME_PACK_X_AVG,          &
  337.                    TIME_PACK_X_STDDEV,       &
  338.                    TIME_PACK_X_MAX,          &
  339.                    TIME_PACK_X_MIN,          &
  340.                    TIME_PACK_X_SUM,          &
  341.           
  342.                    TIME_PACK_Y_AVG,          &
  343.                    TIME_PACK_Y_STDDEV,       &
  344.                    TIME_PACK_Y_MAX,          &
  345.                    TIME_PACK_Y_MIN,          &
  346.                    TIME_PACK_Y_SUM,          &
  347.           
  348.                    TIME_PACK_Z_AVG,          &
  349.                    TIME_PACK_Z_STDDEV,       &
  350.                    TIME_PACK_Z_MAX,          &
  351.                    TIME_PACK_Z_MIN,          &
  352.                    TIME_PACK_Z_SUM,          &
  353.           
  354.                    TIME_WAIT_AVG,            & ! Comm explicit data waiting requirements.
  355.                    TIME_WAIT_STDDEV,         &
  356.                    TIME_WAIT_MAX,            &
  357.                    TIME_WAIT_MIN,            &
  358.                    TIME_WAIT_SUM,            &
  359.           
  360.                    TIME_WAIT_X_AVG,          &
  361.                    TIME_WAIT_X_STDDEV,       &
  362.                    TIME_WAIT_X_MAX,          &
  363.                    TIME_WAIT_X_MIN,          &
  364.                    TIME_WAIT_X_SUM,          &
  365.           
  366.                    TIME_WAIT_Y_AVG,          &
  367.                    TIME_WAIT_Y_STDDEV,       &
  368.                    TIME_WAIT_Y_MAX,          &
  369.                    TIME_WAIT_Y_MIN,          &
  370.                    TIME_WAIT_Y_SUM,          &
  371.           
  372.                    TIME_WAIT_Z_AVG,          &
  373.                    TIME_WAIT_Z_STDDEV,       &
  374.                    TIME_WAIT_Z_MAX,          &
  375.                    TIME_WAIT_Z_MIN,          &
  376.                    TIME_WAIT_Z_SUM,          &
  377.           
  378.                    TIME_SEND_AVG,            & ! Comm explicit send requirements.
  379.                    TIME_SEND_STDDEV,         &
  380.                    TIME_SEND_MAX,            &
  381.                    TIME_SEND_MIN,            &
  382.                    TIME_SEND_SUM,            &
  383.           
  384.                    TIME_SEND_X_AVG,          &
  385.                    TIME_SEND_X_STDDEV,       &
  386.                    TIME_SEND_X_MAX,          &
  387.                    TIME_SEND_X_MIN,          &
  388.                    TIME_SEND_X_SUM,          &
  389.           
  390.                    TIME_SEND_Y_AVG,          &
  391.                    TIME_SEND_Y_STDDEV,       &
  392.                    TIME_SEND_Y_MAX,          &
  393.                    TIME_SEND_Y_MIN,          &
  394.                    TIME_SEND_Y_SUM,          &
  395.           
  396.                    TIME_SEND_Z_AVG,          &
  397.                    TIME_SEND_Z_STDDEV,       &
  398.                    TIME_SEND_Z_MAX,          &
  399.                    TIME_SEND_Z_MIN,          &
  400.                    TIME_SEND_Z_SUM,          &
  401.           
  402.                    TIME_RECV_AVG,            & ! Comm explicit recv requirements.
  403.                    TIME_RECV_STDDEV,         &
  404.                    TIME_RECV_MAX,            &
  405.                    TIME_RECV_MIN,            &
  406.                    TIME_RECV_SUM,            &
  407.           
  408.                    TIME_RECV_X_AVG,          &
  409.                    TIME_RECV_X_STDDEV,       &
  410.                    TIME_RECV_X_MAX,          &
  411.                    TIME_RECV_X_MIN,          &
  412.                    TIME_RECV_X_SUM,          &
  413.           
  414.                    TIME_RECV_Y_AVG,          &
  415.                    TIME_RECV_Y_STDDEV,       &
  416.                    TIME_RECV_Y_MAX,          &
  417.                    TIME_RECV_Y_MIN,          &
  418.                    TIME_RECV_Y_SUM,          &
  419.           
  420.                    TIME_RECV_Z_AVG,          &
  421.                    TIME_RECV_Z_STDDEV,       &
  422.                    TIME_RECV_Z_MAX,          &
  423.                    TIME_RECV_Z_MIN,          &
  424.                    TIME_RECV_Z_SUM,          &
  425.           
  426.                    TIME_UNPACK_AVG,          & ! Comm explicit data unpacking requirements.
  427.                    TIME_UNPACK_STDDEV,       &
  428.                    TIME_UNPACK_MAX,          &
  429.                    TIME_UNPACK_MIN,          &
  430.                    TIME_UNPACK_SUM,          &
  431.           
  432.                    TIME_UNPACK_X_AVG,        &
  433.                    TIME_UNPACK_X_STDDEV,     &
  434.                    TIME_UNPACK_X_MAX,        &
  435.                    TIME_UNPACK_X_MIN,        &
  436.                    TIME_UNPACK_X_SUM,        &
  437.           
  438.                    TIME_UNPACK_Y_AVG,        &
  439.                    TIME_UNPACK_Y_STDDEV,     &
  440.                    TIME_UNPACK_Y_MAX,        &
  441.                    TIME_UNPACK_Y_MIN,        &
  442.                    TIME_UNPACK_Y_SUM,        &
  443.           
  444.                    TIME_UNPACK_Z_AVG,        &
  445.                    TIME_UNPACK_Z_STDDEV,     &
  446.                    TIME_UNPACK_Z_MAX,        &
  447.                    TIME_UNPACK_Z_MIN,        &
  448.                    TIME_UNPACK_Z_SUM,        &
  449.           
  450.                    TIME_STENCIL_AVG,         & ! Computation, external of communication, requirements.
  451.                    TIME_STENCIL_STDDEV,      &
  452.                    TIME_STENCIL_MAX,         &
  453.                    TIME_STENCIL_MIN,         &
  454.                    TIME_STENCIL_SUM,         &
  455.           
  456.                    TIME_SUMGRID_AVG,         & ! Grid summation time.
  457.                    TIME_SUMGRID_STDDEV,      &
  458.                    TIME_SUMGRID_MAX,         &
  459.                    TIME_SUMGRID_MIN,         &
  460.                    TIME_SUMGRID_SUM,         &
  461.           
  462.                    TIME_SUMGRID_COMP_AVG,    & ! Grid summation computation requirements.
  463.                    TIME_SUMGRID_COMP_STDDEV, &
  464.                    TIME_SUMGRID_COMP_MAX,    &
  465.                    TIME_SUMGRID_COMP_MIN,    &
  466.                    TIME_SUMGRID_COMP_SUM,    &
  467.           
  468.                    TIME_SUMGRID_COMM_AVG,    & ! Grid summation communication requirements.
  469.                    TIME_SUMGRID_COMM_STDDEV, &
  470.                    TIME_SUMGRID_COMM_MAX,    &
  471.                    TIME_SUMGRID_COMM_MIN,    &
  472.                    TIME_SUMGRID_COMM_SUM,    &
  473.           
  474.                    TIME_WALL_ALL(NUMPES),         &
  475.                    TIME_COMM_METHOD_ALL(NUMPES),  &
  476.                    TIME_COMM_ALL(NUMPES),         &
  477.                    TIME_PACK_ALL(NUMPES),         &
  478.                    TIME_WAIT_ALL(NUMPES),         &
  479.                    TIME_SEND_ALL(NUMPES),         &
  480.                    TIME_RECV_ALL(NUMPES),         &
  481.                    TIME_UNPACK_ALL(NUMPES),       &
  482.                    TIME_COMM_X_ALL(NUMPES),       &
  483.                    TIME_PACK_X_ALL(NUMPES),       &
  484.                    TIME_SEND_X_ALL(NUMPES),       &
  485.                    TIME_WAIT_X_ALL(NUMPES),       &
  486.                    TIME_RECV_X_ALL(NUMPES),       &
  487.                    TIME_UNPACK_X_ALL(NUMPES),     &
  488.                    TIME_COMM_Y_ALL(NUMPES),       &
  489.                    TIME_PACK_Y_ALL(NUMPES),       &
  490.                    TIME_SEND_Y_ALL(NUMPES),       &
  491.                    TIME_WAIT_Y_ALL(NUMPES),       &
  492.                    TIME_RECV_Y_ALL(NUMPES),       &
  493.                    TIME_UNPACK_Y_ALL(NUMPES),     &
  494.                    TIME_COMM_Z_ALL(NUMPES),       &
  495.                    TIME_PACK_Z_ALL(NUMPES),       &
  496.                    TIME_SEND_Z_ALL(NUMPES),       &
  497.                    TIME_WAIT_Z_ALL(NUMPES),       &
  498.                    TIME_RECV_Z_ALL(NUMPES),       &
  499.                    TIME_UNPACK_Z_ALL(NUMPES),     &
  500.                    TIME_STENCIL_ALL(NUMPES),      &
  501.                    TIME_SUMGRID_ALL(NUMPES),      &
  502.                    TIME_SUMGRID_COMP_ALL(NUMPES), &
  503.                    TIME_SUMGRID_COMM_ALL(NUMPES)
  504.           
  505.                 INTEGER, PARAMETER ::  &
  506.                    SIZE_OF_DATA = 8
  507.           
  508.                 REAL(KIND=MG_REAL8), PARAMETER ::    &
  509.                    GIGA = 1000000000.0D+0
  510.           
  511.                 ! ---------------------
  512.                 ! Executable Statements
  513.                 ! ---------------------
  514.           
  515.                 IERR = 0
  516.           
  517.                 TEST_MACHINE = 'Insert machine name here'
  518.           
  519.           #if defined _MG_MPI
  520.           
  521.                 ! Gather timings to root process.
  522.           
  523.  +              CALL MPI_GATHER ( MG_PERF%TIME_WALL_PE, 1, MPI_REAL8,           &
  524.                                   TIME_WALL_ALL,        1, MPI_REAL8,           &
  525.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  526.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_WALL_PE)', 1 )
  527.           
  528.  +              CALL MPI_GATHER ( MG_PERF%TIME_PACK_PE, 1, MPI_REAL8,           &
  529.                                   TIME_PACK_ALL,        1, MPI_REAL8,           &
  530.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  531.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_PACK)', 1 )
  532.           
  533.  +              CALL MPI_GATHER ( MG_PERF%TIME_SEND_PE, 1, MPI_REAL8,           &
  534.                                   TIME_SEND_ALL,        1, MPI_REAL8,           &
  535.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  536.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_SEND)', 1 )
  537.           
  538.  +              CALL MPI_GATHER ( MG_PERF%TIME_WAIT_PE, 1, MPI_REAL8,           &
  539.                                   TIME_WAIT_ALL,        1, MPI_REAL8,           &
  540.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  541.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_WAIT)', 1 )
  542.           
  543.  +              CALL MPI_GATHER ( MG_PERF%TIME_RECV_PE, 1, MPI_REAL8,           &
  544.                                   TIME_RECV_ALL,        1, MPI_REAL8,           &
  545.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  546.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_RECV)', 1 )
  547.           
  548.  +              CALL MPI_GATHER ( MG_PERF%TIME_UNPACK_PE, 1, MPI_REAL8,         &
  549.                                   TIME_UNPACK_ALL,        1, MPI_REAL8,         &
  550.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  551.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_UNPACK)', 1 )
  552.           
  553.  +              CALL MPI_GATHER ( MG_PERF%TIME_PACK_X_PE, 1, MPI_REAL8,           &
  554.                                   TIME_PACK_X_ALL,        1, MPI_REAL8,           &
  555.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  556.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_PACK_X)', 1 )
  557.           
  558.  +              CALL MPI_GATHER ( MG_PERF%TIME_SEND_X_PE, 1, MPI_REAL8,           &
  559.                                   TIME_SEND_X_ALL,        1, MPI_REAL8,           &
  560.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  561.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_SEND_X)', 1 )
  562.           
  563.  +              CALL MPI_GATHER ( MG_PERF%TIME_WAIT_X_PE, 1, MPI_REAL8,           &
  564.                                   TIME_WAIT_X_ALL,        1, MPI_REAL8,           &
  565.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  566.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_WAIT_X)', 1 )
  567.           
  568.  +              CALL MPI_GATHER ( MG_PERF%TIME_RECV_X_PE, 1, MPI_REAL8,           &
  569.                                   TIME_RECV_X_ALL,        1, MPI_REAL8,           &
  570.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  571.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_RECV_X)', 1 )
  572.           
  573.  +              CALL MPI_GATHER ( MG_PERF%TIME_UNPACK_X_PE, 1, MPI_REAL8,         &
  574.                                   TIME_UNPACK_X_ALL,        1, MPI_REAL8,         &
  575.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  576.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_UNPACK_X)', 1 )
  577.           
  578.  +              CALL MPI_GATHER ( MG_PERF%TIME_PACK_Y_PE, 1, MPI_REAL8,           &
  579.                                   TIME_PACK_Y_ALL,        1, MPI_REAL8,           &
  580.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  581.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_PACK_Y)', 1 )
  582.           
  583.  +              CALL MPI_GATHER ( MG_PERF%TIME_SEND_Y_PE, 1, MPI_REAL8,           &
  584.                                   TIME_SEND_Y_ALL,        1, MPI_REAL8,           &
  585.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  586.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_SEND_Y)', 1 )
  587.           
  588.  +              CALL MPI_GATHER ( MG_PERF%TIME_WAIT_Y_PE, 1, MPI_REAL8,           &
  589.                                   TIME_WAIT_Y_ALL,        1, MPI_REAL8,           &
  590.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  591.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_WAIT_Y)', 1 )
  592.           
  593.  +              CALL MPI_GATHER ( MG_PERF%TIME_RECV_Y_PE, 1, MPI_REAL8,           &
  594.                                   TIME_RECV_Y_ALL,        1, MPI_REAL8,           &
  595.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  596.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_RECV_Y)', 1 )
  597.           
  598.  +              CALL MPI_GATHER ( MG_PERF%TIME_UNPACK_Y_PE, 1, MPI_REAL8,         &
  599.                                   TIME_UNPACK_Y_ALL,        1, MPI_REAL8,         &
  600.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  601.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_UNPACK_Y)', 1 )
  602.           
  603.  +              CALL MPI_GATHER ( MG_PERF%TIME_PACK_Z_PE, 1, MPI_REAL8,           &
  604.                                   TIME_PACK_Z_ALL,        1, MPI_REAL8,           &
  605.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  606.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_PACK_Z)', 1 )
  607.           
  608.  +              CALL MPI_GATHER ( MG_PERF%TIME_SEND_Z_PE, 1, MPI_REAL8,           &
  609.                                   TIME_SEND_Z_ALL,        1, MPI_REAL8,           &
  610.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  611.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_SEND_Z)', 1 )
  612.           
  613.  +              CALL MPI_GATHER ( MG_PERF%TIME_WAIT_Z_PE, 1, MPI_REAL8,           &
  614.                                   TIME_WAIT_Z_ALL,        1, MPI_REAL8,           &
  615.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  616.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_WAIT_Z)', 1 )
  617.           
  618.  +              CALL MPI_GATHER ( MG_PERF%TIME_RECV_Z_PE, 1, MPI_REAL8,           &
  619.                                   TIME_RECV_Z_ALL,        1, MPI_REAL8,           &
  620.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  621.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_RECV_Z)', 1 )
  622.           
  623.  +              CALL MPI_GATHER ( MG_PERF%TIME_UNPACK_Z_PE, 1, MPI_REAL8,         &
  624.                                   TIME_UNPACK_Z_ALL,        1, MPI_REAL8,         &
  625.                                   ROOT_PE, MPI_COMM_WORLD, IERR )
  626.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_UNPACK_Z)', 1 )
  627.           
  628.                 SELECT CASE ( COMM_METHOD )
  629.           
  630.                    CASE ( COMM_METHOD_BSPMA )
  631.           
  632.  +                    CALL MPI_GATHER ( MG_PERF%TIME_BSPMA_PE, 1, MPI_REAL8,           &
  633.                                         TIME_COMM_METHOD_ALL,  1, MPI_REAL8,           &
  634.                                         ROOT_PE, MPI_COMM_WORLD, IERR )
  635.  +                    CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_BSPMA)', 1 )
  636.           
  637.                    CASE ( COMM_METHOD_SVAF )
  638.           
  639.  +                    CALL MPI_GATHER ( MG_PERF%TIME_SVAF_PE,  1, MPI_REAL8,           &
  640.                                         TIME_COMM_METHOD_ALL,  1, MPI_REAL8,           &
  641.                                         ROOT_PE, MPI_COMM_WORLD, IERR )
  642.  +                    CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_SVAF)', 1 )
  643.           
  644.                 END SELECT
  645.           
  646.                 IF ( &
  647.                      ( STENCIL == STENCIL_2D5PT ) .OR.   &
  648.                      ( STENCIL == STENCIL_2D9PT ) .OR.   &
  649.                      ( STENCIL == STENCIL_3D7PT ) .OR.   &
  650.                      ( STENCIL == STENCIL_3D27PT ) )     &
  651.                    THEN
  652.           
  653.  +                    CALL MPI_GATHER ( MG_PERF%TIME_STENCIL_PE,  1, MPI_REAL8,           &
  654.                                         TIME_STENCIL_ALL,         1, MPI_REAL8,           &
  655.                                         ROOT_PE, MPI_COMM_WORLD, IERR )
  656.  +                    CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_STENCIL)', 1 )
  657.           
  658.                 END IF
  659.           
  660.                 IF ( MG_PERF%NUM_SUMGRID /= 0) THEN
  661.  +                 CALL MPI_GATHER ( MG_PERF%TIME_SUMGRID_PE,  1, MPI_REAL8,           &
  662.                                      TIME_SUMGRID_ALL,         1, MPI_REAL8,           &
  663.                                      ROOT_PE, MPI_COMM_WORLD, IERR )
  664.  +                 CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_ALLRED)', 1 )
  665.           
  666.  +                 CALL MPI_GATHER ( MG_PERF%TIME_SUMGRID_COMP_PE,  1, MPI_REAL8,       &
  667.                                      TIME_SUMGRID_COMP_ALL,         1, MPI_REAL8,       &
  668.                                      ROOT_PE, MPI_COMM_WORLD, IERR )
  669.  +                 CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_SUMGRID_COM)', 1 )
  670.           
  671.  +                 CALL MPI_GATHER ( MG_PERF%TIME_SUMGRID_COMM_PE,  1, MPI_REAL8,       &
  672.                                      TIME_SUMGRID_COMM_ALL,         1, MPI_REAL8,       &
  673.                                      ROOT_PE, MPI_COMM_WORLD, IERR )
  674.  +                 CALL MG_ASSERT ( IERR, 'REPORT_PERF: MPI_GATHER(TIME_SUMGRID_RED)', 1 )
  675.                 END IF
  676.           
  677.                 ! Process COUNTS.
  678.           
  679.                 ALLOCATE ( MAX_THESE(NUM_PARAMS),    STAT=IERR )
  680.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: ALLOCATE ( MAX_THESE', NUM_PARAMS )
  681.           
  682.                 ALLOCATE ( MIN_THESE(NUM_PARAMS),    STAT=IERR )
  683.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: ALLOCATE ( MIN_THESE', NUM_PARAMS )
  684.           
  685.                 ! Note that don't sum collectives, but do max/min their counts.
  686.           
  687.                 ALLOCATE ( SUM_THESE(NUM_PARAMS),    STAT=IERR )
  688.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: ALLOCATE ( SUM_THESE', NUM_PARAMS )
  689.           
  690.                 ALLOCATE ( THESE_MAXED(NUM_PARAMS),  STAT=IERR )
  691.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: ALLOCATE ( THESE_MAXED', NUM_PARAMS )
  692.           
  693.                 ALLOCATE ( THESE_MINNED(NUM_PARAMS), STAT=IERR )
  694.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: ALLOCATE ( THESE_MINNED', NUM_PARAMS )
  695.           
  696.                 ALLOCATE ( THESE_SUMMED(NUM_PARAMS), STAT=IERR )
  697.  +              CALL MG_ASSERT ( IERR, 'REPORT_PERF: ALLOCATE ( THESE_SUMMED', NUM_PARAMS )
  698.           
  699.                 NUM_TO_SUM = 1
  700.                 SUM_THESE(NUM_TO_SUM) = MG_PERF%NUM_ADDS
  701.                 NUM_TO_SUM = NUM_TO_SUM + 1
  702.                 SUM_THESE(NUM_TO_SUM) = MG_PERF%NUM_DIVIDES
  703.                 NUM_TO_SUM = NUM_TO_SUM + 1
  704.                 SUM_THESE(NUM_TO_SUM) = MG_PERF%NUM_COPY
  705.                 NUM_TO_SUM = NUM_TO_SUM + 1
  706.           
  707.                 SUM_THESE(NUM_TO_SUM) = MG_PERF%NUM_SENDS
  708.                 NUM_TO_SUM = NUM_TO_SUM + 1
  709.                 SUM_THESE(NUM_TO_SUM) = MG_PERF%SEND_COUNT
  710.                 NUM_TO_SUM = NUM_TO_SUM + 1
  711.                 SUM_THESE(NUM_TO_SUM) = MG_PERF%NUM_RECVS
  712.                 NUM_TO_SUM = NUM_TO_SUM + 1
  713.                 SUM_THESE(NUM_TO_SUM) = MG_PERF%RECV_COUNT
  714.              
  715.                 NUM_TO_MAX = 1
  716.                 MAX_THESE(NUM_TO_MAX) = MG_PERF%SEND_COUNT_MAX
  717.                 NUM_TO_MAX = NUM_TO_MAX + 1
  718.                 MAX_THESE(NUM_TO_MAX) = MG_PERF%RECV_COUNT_MAX
  719.                 NUM_TO_MAX = NUM_TO_MAX + 1
  720.                 MAX_THESE(NUM_TO_MAX) = MG_PERF%BCAST_COUNT_MAX
  721.                 NUM_TO_MAX = NUM_TO_MAX + 1
  722.                 MAX_THESE(NUM_TO_MAX) = MG_PERF%ALLREDUCE_COUNT_MAX
  723.           
  724.                 NUM_TO_MAX = NUM_TO_MAX + 1
  725.                 MAX_THESE(NUM_TO_MAX) = MG_PERF%NUM_SENDS
  726.                 NUM_TO_MAX = NUM_TO_MAX + 1
  727.                 MAX_THESE(NUM_TO_MAX) = MG_PERF%SEND_COUNT
  728.                 NUM_TO_MAX = NUM_TO_MAX + 1
  729.                 MAX_THESE(NUM_TO_MAX) = MG_PERF%NUM_RECVS
  730.                 NUM_TO_MAX = NUM_TO_MAX + 1
  731.                 MAX_THESE(NUM_TO_MAX) = MG_PERF%RECV_COUNT
  732.           
  733.                 NUM_TO_MIN = 1
  734.                 IF ( MG_PERF%NUM_SENDS /= 0 ) THEN
  735.                    MIN_THESE(NUM_TO_MIN) = MG_PERF%SEND_COUNT_MIN
  736.                 ELSE
  737.                    MIN_THESE(NUM_TO_MIN) = 0
  738.                 END IF
  739.                 NUM_TO_MIN = NUM_TO_MIN + 1
  740.                 IF ( MG_PERF%NUM_RECVS /= 0 ) THEN
  741.                    MIN_THESE(NUM_TO_MIN) = MG_PERF%RECV_COUNT_MIN
  742.                 ELSE
  743.                    MIN_THESE(NUM_TO_MIN) = 0
  744.                 END IF
  745.                 NUM_TO_MIN = NUM_TO_MIN + 1
  746.                 IF ( MG_PERF%NUM_BCASTS /= 0 ) THEN
  747.                    MIN_THESE(NUM_TO_MIN) = MG_PERF%BCAST_COUNT_MIN
  748.                 ELSE
  749.                    MIN_THESE(NUM_TO_MIN) = 0
  750.                 END IF
  751.                 NUM_TO_MIN = NUM_TO_MIN + 1
  752.                 IF ( MG_PERF%NUM_ALLREDUCES /= 0 ) THEN
  753.                    MIN_THESE(NUM_TO_MIN) = MG_PERF%ALLREDUCE_COUNT_MIN
  754.                 ELSE
  755.                    MIN_THESE(NUM_TO_MIN) = 0
  756.                 END IF
  757.                 NUM_TO_MIN = NUM_TO_MIN + 1
  758.           
  759.                 IF ( MG_PERF%NUM_SENDS /= 0 ) THEN
  760.                    MIN_THESE(NUM_TO_MIN) = MG_PERF%NUM_SENDS
  761.                 ELSE
  762.                    MIN_THESE(NUM_TO_MIN) = 0
  763.                 END IF
  764.                 NUM_TO_MIN = NUM_TO_MIN + 1
  765.                 IF ( MG_PERF%SEND_COUNT /= 0 ) THEN
  766.                    MIN_THESE(NUM_TO_MIN) = MG_PERF%SEND_COUNT
  767.                 ELSE
  768.                    MIN_THESE(NUM_TO_MIN) = 0
  769.                 END IF
  770.                 NUM_TO_MIN = NUM_TO_MIN + 1
  771.                 IF ( MG_PERF%NUM_RECVS /= 0 ) THEN
  772.                    MIN_THESE(NUM_TO_MIN) = MG_PERF%NUM_RECVS
  773.                 ELSE
  774.                    MIN_THESE(NUM_TO_MIN) = 0
  775.                 END IF
  776.                 NUM_TO_MIN = NUM_TO_MIN + 1
  777.                 IF ( MG_PERF%RECV_COUNT /= 0 ) THEN
  778.                    MIN_THESE(NUM_TO_MIN) = MG_PERF%RECV_COUNT
  779.                 ELSE
  780.                    MIN_THESE(NUM_TO_MIN) = 0
  781.                 END IF
  782.                 NUM_TO_MIN = NUM_TO_MIN + 1
  783.            
  784.  +              CALL MPI_REDUCE ( SUM_THESE, THESE_SUMMED, NUM_TO_SUM, MPI_INTEGER8, &
  785.                                   MPI_SUM, ROOT_PE, MPI_COMM_WORLD, IERR )
  786.                 IF ( IERR /= MPI_SUCCESS ) THEN
  787.                    WRITE(*,*) '** Error ** MG_PERF_REPORT: MPI_REDUCE(SUM_THESE); IERR = ', IERR
  788.                    IERR = -1
  789.                    RETURN
  790.                 END IF
  791.  +              CALL MPI_REDUCE ( MAX_THESE, THESE_MAXED, NUM_TO_MAX, MPI_INTEGER8, &
  792.                                   MPI_MAX, ROOT_PE, MPI_COMM_WORLD, IERR )
  793.                 IF ( IERR /= MPI_SUCCESS ) THEN
  794.                    WRITE(*,*) '** Error ** MG_PERF_REPORT: MPI_REDUCE(MAX_THESE); IERR = ', IERR
  795.                    IERR = -1
  796.                    RETURN
  797.                 END IF
  798.  +              CALL MPI_REDUCE ( MIN_THESE, THESE_MINNED, NUM_TO_MIN, MPI_INTEGER8,  &
  799.                                   MPI_MIN, ROOT_PE, MPI_COMM_WORLD, IERR )
  800.                 IF ( IERR /= MPI_SUCCESS ) THEN
  801.                    WRITE(*,*) '** Error ** MG_PERF_REPORT: MPI_REDUCE(MIN_THESE); IERR = ', IERR
  802.                    IERR = -1
  803.                    RETURN
  804.                 END IF
  805.           
  806.                 IF ( MYPE /= ROOT_PE ) &
  807.                    RETURN
  808.           
  809.                 NUM_TO_SUM  = 1
  810.                 GNUM_ADDS   = THESE_SUMMED(NUM_TO_SUM)
  811.                 NUM_TO_SUM  = NUM_TO_SUM + 1
  812.                 GNUM_DIVIDES  = THESE_SUMMED(NUM_TO_SUM)
  813.                 NUM_TO_SUM  = NUM_TO_SUM + 1
  814.                 GNUM_DIVIDES  = THESE_SUMMED(NUM_TO_SUM)
  815.                 NUM_TO_SUM  = NUM_TO_SUM + 1
  816.                 GNUM_SENDS  = THESE_SUMMED(NUM_TO_SUM)
  817.                 NUM_TO_SUM  = NUM_TO_SUM + 1
  818.                 GSEND_COUNT = THESE_SUMMED(NUM_TO_SUM)
  819.                 NUM_TO_SUM  = NUM_TO_SUM + 1
  820.                 GNUM_RECVS  = THESE_SUMMED(NUM_TO_SUM)
  821.                 NUM_TO_SUM  = NUM_TO_SUM + 1
  822.                 GRECV_COUNT = THESE_SUMMED(NUM_TO_SUM)
  823.           
  824.                 NUM_TO_MAX = 1
  825.                 GSEND_COUNT_MAX      = THESE_MAXED(NUM_TO_MAX)
  826.                 NUM_TO_MAX = NUM_TO_MAX + 1
  827.                 GRECV_COUNT_MAX      = THESE_MAXED(NUM_TO_MAX)
  828.                 NUM_TO_MAX = NUM_TO_MAX + 1
  829.                 GBCAST_COUNT_MAX     = THESE_MAXED(NUM_TO_MAX)
  830.                 NUM_TO_MAX = NUM_TO_MAX + 1
  831.                 GALLREDUCE_COUNT_MAX = THESE_MAXED(NUM_TO_MAX)
  832.           
  833.                 NUM_TO_MAX = NUM_TO_MAX + 1
  834.                 GSEND_NODE_NUM_MAX   = THESE_MAXED(NUM_TO_MAX)
  835.                 NUM_TO_MAX = NUM_TO_MAX + 1
  836.                 GSEND_NODE_COUNT_MAX = THESE_MAXED(NUM_TO_MAX)
  837.                 NUM_TO_MAX = NUM_TO_MAX + 1
  838.                 GRECV_NODE_NUM_MAX   = THESE_MAXED(NUM_TO_MAX)
  839.                 NUM_TO_MAX = NUM_TO_MAX + 1
  840.                 GRECV_NODE_COUNT_MAX = THESE_MAXED(NUM_TO_MAX)
  841.           
  842.                 NUM_TO_MIN = 1
  843.                 GSEND_COUNT_MIN      = THESE_MINNED(NUM_TO_MIN)
  844.                 NUM_TO_MIN = NUM_TO_MIN + 1
  845.                 GRECV_COUNT_MIN      = THESE_MINNED(NUM_TO_MIN)
  846.                 NUM_TO_MIN = NUM_TO_MIN + 1
  847.                 GBCAST_COUNT_MIN     = THESE_MINNED(NUM_TO_MIN)
  848.                 NUM_TO_MIN = NUM_TO_MIN + 1
  849.                 GALLREDUCE_COUNT_MIN = THESE_MINNED(NUM_TO_MIN)
  850.           
  851.                 NUM_TO_MIN = NUM_TO_MIN + 1
  852.                 GSEND_NODE_NUM_MIN   = THESE_MINNED(NUM_TO_MIN)
  853.                 NUM_TO_MIN = NUM_TO_MIN + 1
  854.                 GSEND_NODE_COUNT_MIN = THESE_MINNED(NUM_TO_MIN)
  855.                 NUM_TO_MIN = NUM_TO_MIN + 1
  856.                 GRECV_NODE_NUM_MIN   = THESE_MINNED(NUM_TO_MIN)
  857.                 NUM_TO_MIN = NUM_TO_MIN + 1
  858.                 GRECV_NODE_COUNT_MIN = THESE_MINNED(NUM_TO_MIN)
  859.           
  860.                 ! Root process writes out global data:
  861.                 TIME_WALL_MIN = TIME_WALL_ALL( 1 )
  862.                 TIME_WALL_MAX = TIME_WALL_ALL( 1 )
  863.                 TIME_WALL_SUM = 0.0
  864.           
  865.    Vr2--<       DO I = 2, NUMPES
  866.    Vr2             TIME_WALL_MIN = MIN( TIME_WALL_MIN, TIME_WALL_ALL( I ) )
  867.    Vr2             TIME_WALL_MAX = MAX( TIME_WALL_MAX, TIME_WALL_ALL( I ) )
  868.    Vr2             TIME_WALL_SUM = TIME_WALL_SUM + TIME_WALL_ALL( I )
  869.    Vr2-->       END DO
  870.                 TIME_WALL_AVG = TIME_WALL_SUM / REAL(NUMPES)
  871.  +              TIME_WALL_STDDEV = MG_COMPUTE_STDDEV ( TIME_WALL_ALL, TIME_WALL_AVG ) 
  872.           
  873.                 TIME_COMM_METHOD_MIN = TIME_COMM_METHOD_ALL( 1 )
  874.                 TIME_COMM_METHOD_MAX = TIME_COMM_METHOD_ALL( 1 )
  875.                 TIME_COMM_METHOD_SUM = 0.0
  876.           
  877.    Vr4--<       DO I = 2, NUMPES
  878.    Vr4             TIME_COMM_METHOD_MIN = MIN( TIME_COMM_METHOD_MIN, TIME_COMM_METHOD_ALL( I ) )
  879.    Vr4             TIME_COMM_METHOD_MAX = MAX( TIME_COMM_METHOD_MAX, TIME_COMM_METHOD_ALL( I ) )
  880.    Vr4             TIME_COMM_METHOD_SUM = TIME_COMM_METHOD_SUM + TIME_COMM_METHOD_ALL( I )
  881.    Vr4-->       END DO
  882.                 TIME_COMM_METHOD_AVG = TIME_COMM_METHOD_SUM / REAL(NUMPES)
  883.  +              TIME_COMM_METHOD_STDDEV = MG_COMPUTE_STDDEV ( TIME_COMM_METHOD_ALL, TIME_COMM_METHOD_AVG )
  884.           
  885.                 IF ( STENCIL /= STENCIL_NONE ) THEN
  886.                    TIME_STENCIL_MIN = TIME_STENCIL_ALL( 1 )
  887.                    TIME_STENCIL_MAX = TIME_STENCIL_ALL( 1 )
  888.                    TIME_STENCIL_SUM = TIME_STENCIL_ALL( 1 )
  889.              
  890.    Vr2--<          DO I = 2, NUMPES
  891.    Vr2                TIME_STENCIL_MIN = MIN( TIME_STENCIL_MIN, TIME_STENCIL_ALL( I ) )
  892.    Vr2                TIME_STENCIL_MAX = MAX( TIME_STENCIL_MAX, TIME_STENCIL_ALL( I ) )
  893.    Vr2                TIME_STENCIL_SUM  = TIME_STENCIL_SUM + TIME_STENCIL_ALL( I )
  894.    Vr2-->          END DO
  895.                 END IF
  896.                 TIME_STENCIL_AVG = TIME_STENCIL_SUM / REAL(NUMPES)
  897.  +              TIME_STENCIL_STDDEV = MG_COMPUTE_STDDEV ( TIME_STENCIL_ALL, TIME_STENCIL_AVG )
  898.           
  899.    V----<       DO I = 1, NUMPES
  900.    V               TIME_COMM_ALL(I) = TIME_PACK_ALL(I) + &
  901.    V                                  TIME_SEND_ALL(I) + &
  902.    V                                  TIME_WAIT_ALL(I) + &
  903.    V                                  TIME_RECV_ALL(I) + &
  904.    V                                  TIME_UNPACK_ALL(I)
  905.    V               TIME_COMM_X_ALL(I) = TIME_PACK_X_ALL(I) + &
  906.    V                                    TIME_SEND_X_ALL(I) + &
  907.    V                                    TIME_WAIT_X_ALL(I) + &
  908.    V                                    TIME_RECV_X_ALL(I) + &
  909.    V                                    TIME_UNPACK_X_ALL(I)
  910.    V               TIME_COMM_Y_ALL(I) = TIME_PACK_Y_ALL(I) + &
  911.    V                                    TIME_SEND_Y_ALL(I) + &
  912.    V                                    TIME_WAIT_Y_ALL(I) + &
  913.    V                                    TIME_RECV_Y_ALL(I) + &
  914.    V                                    TIME_UNPACK_Y_ALL(I)
  915.    V               TIME_COMM_Z_ALL(I) = TIME_PACK_Z_ALL(I) + &
  916.    V                                    TIME_SEND_Z_ALL(I) + &
  917.    V                                    TIME_WAIT_Z_ALL(I) + &
  918.    V                                    TIME_RECV_Z_ALL(I) + &
  919.    V                                    TIME_UNPACK_Z_ALL(I)
  920.    V---->       END DO
  921.           
  922.                 TIME_COMM_SUM = TIME_COMM_ALL( 1 )
  923.                 TIME_COMM_MAX = TIME_COMM_ALL( 1 )
  924.                 TIME_COMM_MIN = TIME_COMM_ALL( 1 )
  925.    Vr2--<       DO I = 2, NUMPES
  926.    Vr2             TIME_COMM_MIN = MIN( TIME_COMM_MIN, TIME_COMM_ALL( I ) )
  927.    Vr2             TIME_COMM_MAX = MAX( TIME_COMM_MAX, TIME_COMM_ALL( I ) )
  928.    Vr2             TIME_COMM_SUM = TIME_COMM_SUM + TIME_COMM_ALL( I )
  929.    Vr2-->       END DO
  930.                 TIME_COMM_AVG = TIME_COMM_SUM / REAL(NUMPES)
  931.  +              TIME_COMM_STDDEV = MG_COMPUTE_STDDEV ( TIME_COMM_ALL, TIME_COMM_AVG )
  932.           
  933.                 TIME_PACK_SUM = TIME_PACK_ALL( 1 )
  934.                 TIME_PACK_MAX = TIME_PACK_ALL( 1 )
  935.                 TIME_PACK_MIN = TIME_PACK_ALL( 1 )
  936.    Vr2--<       DO I = 2, NUMPES
  937.    Vr2             TIME_PACK_MIN = MIN( TIME_PACK_MIN, TIME_PACK_ALL( I ) )
  938.    Vr2             TIME_PACK_MAX = MAX( TIME_PACK_MAX, TIME_PACK_ALL( I ) )
  939.    Vr2             TIME_PACK_SUM = TIME_PACK_SUM + TIME_PACK_ALL( I )
  940.    Vr2-->       END DO
  941.                 TIME_PACK_AVG = TIME_PACK_SUM / REAL(NUMPES)
  942.  +              TIME_PACK_STDDEV = MG_COMPUTE_STDDEV ( TIME_PACK_ALL, TIME_PACK_AVG )
  943.           
  944.                 TIME_SEND_SUM = TIME_SEND_ALL( 1 )
  945.                 TIME_SEND_MAX = TIME_SEND_ALL( 1 )
  946.                 TIME_SEND_MIN = TIME_SEND_ALL( 1 )
  947.    Vr2--<       DO I = 2, NUMPES
  948.    Vr2             TIME_SEND_MIN = MIN( TIME_SEND_MIN, TIME_SEND_ALL( I ) )
  949.    Vr2             TIME_SEND_MAX = MAX( TIME_SEND_MAX, TIME_SEND_ALL( I ) )
  950.    Vr2             TIME_SEND_SUM = TIME_SEND_SUM + TIME_SEND_ALL( I )
  951.    Vr2-->       END DO
  952.                 TIME_SEND_AVG = TIME_SEND_SUM / REAL(NUMPES)
  953.  +              TIME_SEND_STDDEV = MG_COMPUTE_STDDEV ( TIME_SEND_ALL, TIME_SEND_AVG )
  954.           
  955.                 TIME_WAIT_SUM = TIME_WAIT_ALL( 1 )
  956.                 TIME_WAIT_MAX = TIME_WAIT_ALL( 1 )
  957.                 TIME_WAIT_MIN = TIME_WAIT_ALL( 1 )
  958.    Vr2--<       DO I = 2, NUMPES
  959.    Vr2             TIME_WAIT_MIN = MIN( TIME_WAIT_MIN, TIME_WAIT_ALL( I ) )
  960.    Vr2             TIME_WAIT_MAX = MAX( TIME_WAIT_MAX, TIME_WAIT_ALL( I ) )
  961.    Vr2             TIME_WAIT_SUM = TIME_WAIT_SUM + TIME_WAIT_ALL( I )
  962.    Vr2-->       END DO
  963.                 TIME_WAIT_AVG = TIME_WAIT_SUM / REAL(NUMPES)
  964.  +              TIME_WAIT_STDDEV = MG_COMPUTE_STDDEV ( TIME_WAIT_ALL, TIME_WAIT_AVG )
  965.           
  966.                 TIME_RECV_SUM = TIME_RECV_ALL( 1 )
  967.                 TIME_RECV_MAX = TIME_RECV_ALL( 1 )
  968.                 TIME_RECV_MIN = TIME_RECV_ALL( 1 )
  969.    Vr2--<       DO I = 2, NUMPES
  970.    Vr2             TIME_RECV_MIN = MIN( TIME_RECV_MIN, TIME_RECV_ALL( I ) )
  971.    Vr2             TIME_RECV_MAX = MAX( TIME_RECV_MAX, TIME_RECV_ALL( I ) )
  972.    Vr2             TIME_RECV_SUM = TIME_RECV_SUM + TIME_RECV_ALL( I )
  973.    Vr2-->       END DO
  974.                 TIME_RECV_AVG = TIME_RECV_SUM / REAL(NUMPES)
  975.  +              TIME_RECV_STDDEV = MG_COMPUTE_STDDEV ( TIME_RECV_ALL, TIME_RECV_AVG )
  976.           
  977.                 TIME_UNPACK_SUM = TIME_UNPACK_ALL( 1 )
  978.                 TIME_UNPACK_MAX = TIME_UNPACK_ALL( 1 )
  979.                 TIME_UNPACK_MIN = TIME_UNPACK_ALL( 1 )
  980.    Vr2--<       DO I = 2, NUMPES
  981.    Vr2             TIME_UNPACK_MIN = MIN( TIME_UNPACK_MIN, TIME_UNPACK_ALL( I ) )
  982.    Vr2             TIME_UNPACK_MAX = MAX( TIME_UNPACK_MAX, TIME_UNPACK_ALL( I ) )
  983.    Vr2             TIME_UNPACK_SUM = TIME_UNPACK_SUM + TIME_UNPACK_ALL( I )
  984.    Vr2-->       END DO
  985.                 TIME_UNPACK_AVG = TIME_UNPACK_SUM / REAL(NUMPES)
  986.  +              TIME_UNPACK_STDDEV = MG_COMPUTE_STDDEV ( TIME_UNPACK_ALL, TIME_UNPACK_AVG )
  987.           
  988.                 TIME_COMM_X_SUM = TIME_COMM_X_ALL( 1 )
  989.                 TIME_COMM_X_MAX = TIME_COMM_X_ALL( 1 )
  990.                 TIME_COMM_X_MIN = TIME_COMM_X_ALL( 1 )
  991.    Vr2--<       DO I = 2, NUMPES
  992.    Vr2             TIME_COMM_X_MIN = MIN( TIME_COMM_X_MIN, TIME_COMM_X_ALL( I ) )
  993.    Vr2             TIME_COMM_X_MAX = MAX( TIME_COMM_X_MAX, TIME_COMM_X_ALL( I ) )
  994.    Vr2             TIME_COMM_X_SUM = TIME_COMM_X_SUM + TIME_COMM_X_ALL( I )
  995.    Vr2-->       END DO
  996.                 TIME_COMM_X_AVG = TIME_COMM_X_SUM / REAL(NUMPES)
  997.  +              TIME_COMM_X_STDDEV = MG_COMPUTE_STDDEV ( TIME_COMM_X_ALL, TIME_COMM_X_AVG )
  998.           
  999.                 TIME_PACK_X_SUM = TIME_PACK_X_ALL( 1 )
 1000.                 TIME_PACK_X_MAX = TIME_PACK_X_ALL( 1 )
 1001.                 TIME_PACK_X_MIN = TIME_PACK_X_ALL( 1 )
 1002.    Vr2--<       DO I = 2, NUMPES
 1003.    Vr2             TIME_PACK_X_MIN = MIN( TIME_PACK_X_MIN, TIME_PACK_X_ALL( I ) )
 1004.    Vr2             TIME_PACK_X_MAX = MAX( TIME_PACK_X_MAX, TIME_PACK_X_ALL( I ) )
 1005.    Vr2             TIME_PACK_X_SUM = TIME_PACK_X_SUM + TIME_PACK_X_ALL( I )
 1006.    Vr2-->       END DO
 1007.                 TIME_PACK_X_AVG = TIME_PACK_X_SUM / REAL(NUMPES)
 1008.  +              TIME_PACK_X_STDDEV = MG_COMPUTE_STDDEV ( TIME_PACK_X_ALL, TIME_PACK_X_AVG )
 1009.           
 1010.                 TIME_SEND_X_SUM = TIME_SEND_X_ALL( 1 )
 1011.                 TIME_SEND_X_MAX = TIME_SEND_X_ALL( 1 )
 1012.                 TIME_SEND_X_MIN = TIME_SEND_X_ALL( 1 )
 1013.    Vr2--<       DO I = 2, NUMPES
 1014.    Vr2             TIME_SEND_X_MIN = MIN( TIME_SEND_X_MIN, TIME_SEND_X_ALL( I ) )
 1015.    Vr2             TIME_SEND_X_MAX = MAX( TIME_SEND_X_MAX, TIME_SEND_X_ALL( I ) )
 1016.    Vr2             TIME_SEND_X_SUM = TIME_SEND_X_SUM + TIME_SEND_X_ALL( I )
 1017.    Vr2-->       END DO
 1018.                 TIME_SEND_X_AVG = TIME_SEND_X_SUM / REAL(NUMPES)
 1019.  +              TIME_SEND_X_STDDEV = MG_COMPUTE_STDDEV ( TIME_SEND_X_ALL, TIME_SEND_X_AVG )
 1020.           
 1021.                 TIME_WAIT_X_SUM = TIME_WAIT_X_ALL( 1 )
 1022.                 TIME_WAIT_X_MAX = TIME_WAIT_X_ALL( 1 )
 1023.                 TIME_WAIT_X_MIN = TIME_WAIT_X_ALL( 1 )
 1024.    Vr2--<       DO I = 2, NUMPES
 1025.    Vr2             TIME_WAIT_X_MIN = MIN( TIME_WAIT_X_MIN, TIME_WAIT_X_ALL( I ) )
 1026.    Vr2             TIME_WAIT_X_MAX = MAX( TIME_WAIT_X_MAX, TIME_WAIT_X_ALL( I ) )
 1027.    Vr2             TIME_WAIT_X_SUM = TIME_WAIT_X_SUM + TIME_WAIT_X_ALL( I )
 1028.    Vr2-->       END DO
 1029.                 TIME_WAIT_X_AVG = TIME_WAIT_X_SUM / REAL(NUMPES)
 1030.  +              TIME_WAIT_X_STDDEV = MG_COMPUTE_STDDEV ( TIME_WAIT_X_ALL, TIME_WAIT_X_AVG )
 1031.           
 1032.                 TIME_RECV_X_SUM = TIME_RECV_X_ALL( 1 )
 1033.                 TIME_RECV_X_MAX = TIME_RECV_X_ALL( 1 )
 1034.                 TIME_RECV_X_MIN = TIME_RECV_X_ALL( 1 )
 1035.    Vr2--<       DO I = 2, NUMPES
 1036.    Vr2             TIME_RECV_X_MIN = MIN( TIME_RECV_X_MIN, TIME_RECV_X_ALL( I ) )
 1037.    Vr2             TIME_RECV_X_MAX = MAX( TIME_RECV_X_MAX, TIME_RECV_X_ALL( I ) )
 1038.    Vr2             TIME_RECV_X_SUM = TIME_RECV_X_SUM + TIME_RECV_X_ALL( I )
 1039.    Vr2-->       END DO
 1040.                 TIME_RECV_X_AVG = TIME_RECV_X_SUM / REAL(NUMPES)
 1041.  +              TIME_RECV_X_STDDEV = MG_COMPUTE_STDDEV ( TIME_RECV_X_ALL, TIME_RECV_X_AVG )
 1042.           
 1043.                 TIME_UNPACK_X_SUM = TIME_UNPACK_X_ALL( 1 )
 1044.                 TIME_UNPACK_X_MAX = TIME_UNPACK_X_ALL( 1 )
 1045.                 TIME_UNPACK_X_MIN = TIME_UNPACK_X_ALL( 1 )
 1046.    Vr2--<       DO I = 2, NUMPES
 1047.    Vr2             TIME_UNPACK_X_MIN = MIN( TIME_UNPACK_X_MIN, TIME_UNPACK_X_ALL( I ) )
 1048.    Vr2             TIME_UNPACK_X_MAX = MAX( TIME_UNPACK_X_MAX, TIME_UNPACK_X_ALL( I ) )
 1049.    Vr2             TIME_UNPACK_X_SUM = TIME_UNPACK_X_SUM + TIME_UNPACK_X_ALL( I )
 1050.    Vr2-->       END DO
 1051.                 TIME_UNPACK_X_AVG = TIME_UNPACK_X_SUM / REAL(NUMPES)
 1052.  +              TIME_UNPACK_X_STDDEV = MG_COMPUTE_STDDEV ( TIME_UNPACK_X_ALL, TIME_UNPACK_X_AVG )
 1053.           
 1054.                 TIME_COMM_Y_SUM = TIME_COMM_Y_ALL( 1 )
 1055.                 TIME_COMM_Y_MAX = TIME_COMM_Y_ALL( 1 )
 1056.                 TIME_COMM_Y_MIN = TIME_COMM_Y_ALL( 1 )
 1057.    Vr2--<       DO I = 2, NUMPES
 1058.    Vr2             TIME_COMM_Y_MIN = MIN( TIME_COMM_Y_MIN, TIME_COMM_Y_ALL( I ) )
 1059.    Vr2             TIME_COMM_Y_MAX = MAX( TIME_COMM_Y_MAX, TIME_COMM_Y_ALL( I ) )
 1060.    Vr2             TIME_COMM_Y_SUM = TIME_COMM_Y_SUM + TIME_COMM_Y_ALL( I )
 1061.    Vr2-->       END DO
 1062.                 TIME_COMM_Y_AVG = TIME_COMM_Y_SUM / REAL(NUMPES)
 1063.  +              TIME_COMM_Y_STDDEV = MG_COMPUTE_STDDEV ( TIME_COMM_Y_ALL, TIME_COMM_Y_AVG )
 1064.           
 1065.                 TIME_PACK_Y_SUM = TIME_PACK_Y_ALL( 1 )
 1066.                 TIME_PACK_Y_MAX = TIME_PACK_Y_ALL( 1 )
 1067.                 TIME_PACK_Y_MIN = TIME_PACK_Y_ALL( 1 )
 1068.    Vr2--<       DO I = 2, NUMPES
 1069.    Vr2             TIME_PACK_Y_MIN = MIN( TIME_PACK_Y_MIN, TIME_PACK_Y_ALL( I ) )
 1070.    Vr2             TIME_PACK_Y_MAX = MAX( TIME_PACK_Y_MAX, TIME_PACK_Y_ALL( I ) )
 1071.    Vr2             TIME_PACK_Y_SUM = TIME_PACK_Y_SUM + TIME_PACK_Y_ALL( I )
 1072.    Vr2-->       END DO
 1073.                 TIME_PACK_Y_AVG = TIME_PACK_Y_SUM / REAL(NUMPES)
 1074.  +              TIME_PACK_Y_STDDEV = MG_COMPUTE_STDDEV ( TIME_PACK_Y_ALL, TIME_PACK_Y_AVG )
 1075.           
 1076.                 TIME_SEND_Y_SUM = TIME_SEND_Y_ALL( 1 )
 1077.                 TIME_SEND_Y_MAX = TIME_SEND_Y_ALL( 1 )
 1078.                 TIME_SEND_Y_MIN = TIME_SEND_Y_ALL( 1 )
 1079.    Vr2--<       DO I = 2, NUMPES
 1080.    Vr2             TIME_SEND_Y_MIN = MIN( TIME_SEND_Y_MIN, TIME_SEND_Y_ALL( I ) )
 1081.    Vr2             TIME_SEND_Y_MAX = MAX( TIME_SEND_Y_MAX, TIME_SEND_Y_ALL( I ) )
 1082.    Vr2             TIME_SEND_Y_SUM = TIME_SEND_Y_SUM + TIME_SEND_Y_ALL( I )
 1083.    Vr2-->       END DO
 1084.                 TIME_SEND_Y_AVG = TIME_SEND_Y_SUM / REAL(NUMPES)
 1085.  +              TIME_SEND_Y_STDDEV = MG_COMPUTE_STDDEV ( TIME_SEND_Y_ALL, TIME_SEND_Y_AVG )
 1086.           
 1087.                 TIME_WAIT_Y_SUM = TIME_WAIT_Y_ALL( 1 )
 1088.                 TIME_WAIT_Y_MAX = TIME_WAIT_Y_ALL( 1 )
 1089.                 TIME_WAIT_Y_MIN = TIME_WAIT_Y_ALL( 1 )
 1090.    Vr2--<       DO I = 2, NUMPES
 1091.    Vr2             TIME_WAIT_Y_MIN = MIN( TIME_WAIT_Y_MIN, TIME_WAIT_Y_ALL( I ) )
 1092.    Vr2             TIME_WAIT_Y_MAX = MAX( TIME_WAIT_Y_MAX, TIME_WAIT_Y_ALL( I ) )
 1093.    Vr2             TIME_WAIT_Y_SUM = TIME_WAIT_Y_SUM + TIME_WAIT_Y_ALL( I )
 1094.    Vr2-->       END DO
 1095.                 TIME_WAIT_Y_AVG = TIME_WAIT_Y_SUM / REAL(NUMPES)
 1096.  +              TIME_WAIT_Y_STDDEV = MG_COMPUTE_STDDEV ( TIME_WAIT_Y_ALL, TIME_WAIT_Y_AVG )
 1097.           
 1098.                 TIME_RECV_Y_SUM = TIME_RECV_Y_ALL( 1 )
 1099.                 TIME_RECV_Y_MAX = TIME_RECV_Y_ALL( 1 )
 1100.                 TIME_RECV_Y_MIN = TIME_RECV_Y_ALL( 1 )
 1101.    Vr2--<       DO I = 2, NUMPES
 1102.    Vr2             TIME_RECV_Y_MIN = MIN( TIME_RECV_Y_MIN, TIME_RECV_Y_ALL( I ) )
 1103.    Vr2             TIME_RECV_Y_MAX = MAX( TIME_RECV_Y_MAX, TIME_RECV_Y_ALL( I ) )
 1104.    Vr2             TIME_RECV_Y_SUM = TIME_RECV_Y_SUM + TIME_RECV_Y_ALL( I )
 1105.    Vr2-->       END DO
 1106.                 TIME_RECV_Y_AVG = TIME_RECV_Y_SUM / REAL(NUMPES)
 1107.  +              TIME_RECV_Y_STDDEV = MG_COMPUTE_STDDEV ( TIME_RECV_Y_ALL, TIME_RECV_Y_AVG )
 1108.           
 1109.                 TIME_UNPACK_Y_SUM = TIME_UNPACK_Y_ALL( 1 )
 1110.                 TIME_UNPACK_Y_MAX = TIME_UNPACK_Y_ALL( 1 )
 1111.                 TIME_UNPACK_Y_MIN = TIME_UNPACK_Y_ALL( 1 )
 1112.    Vr2--<       DO I = 2, NUMPES
 1113.    Vr2             TIME_UNPACK_Y_MIN = MIN( TIME_UNPACK_Y_MIN, TIME_UNPACK_Y_ALL( I ) )
 1114.    Vr2             TIME_UNPACK_Y_MAX = MAX( TIME_UNPACK_Y_MAX, TIME_UNPACK_Y_ALL( I ) )
 1115.    Vr2             TIME_UNPACK_Y_SUM = TIME_UNPACK_Y_SUM + TIME_UNPACK_Y_ALL( I )
 1116.    Vr2-->       END DO
 1117.                 TIME_UNPACK_Y_AVG = TIME_UNPACK_Y_SUM / REAL(NUMPES)
 1118.  +              TIME_UNPACK_Y_STDDEV = MG_COMPUTE_STDDEV ( TIME_UNPACK_Y_ALL, TIME_UNPACK_Y_AVG )
 1119.           
 1120.                 TIME_COMM_Z_SUM = TIME_COMM_Z_ALL( 1 )
 1121.                 TIME_COMM_Z_MAX = TIME_COMM_Z_ALL( 1 )
 1122.                 TIME_COMM_Z_MIN = TIME_COMM_Z_ALL( 1 )
 1123.    Vr2--<       DO I = 2, NUMPES
 1124.    Vr2             TIME_COMM_Z_MIN = MIN( TIME_COMM_Z_MIN, TIME_COMM_Z_ALL( I ) )
 1125.    Vr2             TIME_COMM_Z_MAX = MAX( TIME_COMM_Z_MAX, TIME_COMM_Z_ALL( I ) )
 1126.    Vr2             TIME_COMM_Z_SUM = TIME_COMM_Z_SUM + TIME_COMM_Z_ALL( I )
 1127.    Vr2-->       END DO
 1128.                 TIME_COMM_Z_AVG = TIME_COMM_Z_SUM / REAL(NUMPES)
 1129.  +              TIME_COMM_Z_STDDEV = MG_COMPUTE_STDDEV ( TIME_COMM_Z_ALL, TIME_COMM_Z_AVG )
 1130.           
 1131.                 TIME_PACK_Z_SUM = TIME_PACK_Z_ALL( 1 )
 1132.                 TIME_PACK_Z_MAX = TIME_PACK_Z_ALL( 1 )
 1133.                 TIME_PACK_Z_MIN = TIME_PACK_Z_ALL( 1 )
 1134.    Vr2--<       DO I = 2, NUMPES
 1135.    Vr2             TIME_PACK_Z_MIN = MIN( TIME_PACK_Z_MIN, TIME_PACK_Z_ALL( I ) )
 1136.    Vr2             TIME_PACK_Z_MAX = MAX( TIME_PACK_Z_MAX, TIME_PACK_Z_ALL( I ) )
 1137.    Vr2             TIME_PACK_Z_SUM = TIME_PACK_Z_SUM + TIME_PACK_Z_ALL( I )
 1138.    Vr2-->       END DO
 1139.                 TIME_PACK_Z_AVG = TIME_PACK_Z_SUM / REAL(NUMPES)
 1140.  +              TIME_PACK_Z_STDDEV = MG_COMPUTE_STDDEV ( TIME_PACK_Z_ALL, TIME_PACK_Z_AVG )
 1141.           
 1142.                 TIME_SEND_Z_SUM = TIME_SEND_Z_ALL( 1 )
 1143.                 TIME_SEND_Z_MAX = TIME_SEND_Z_ALL( 1 )
 1144.                 TIME_SEND_Z_MIN = TIME_SEND_Z_ALL( 1 )
 1145.    Vr2--<       DO I = 2, NUMPES
 1146.    Vr2             TIME_SEND_Z_MIN = MIN( TIME_SEND_Z_MIN, TIME_SEND_Z_ALL( I ) )
 1147.    Vr2             TIME_SEND_Z_MAX = MAX( TIME_SEND_Z_MAX, TIME_SEND_Z_ALL( I ) )
 1148.    Vr2             TIME_SEND_Z_SUM = TIME_SEND_Z_SUM + TIME_SEND_Z_ALL( I )
 1149.    Vr2-->       END DO
 1150.                 TIME_SEND_Z_AVG = TIME_SEND_Z_SUM / REAL(NUMPES)
 1151.  +              TIME_SEND_Z_STDDEV = MG_COMPUTE_STDDEV ( TIME_SEND_Z_ALL, TIME_SEND_Z_AVG )
 1152.           
 1153.                 TIME_WAIT_Z_SUM = TIME_WAIT_Z_ALL( 1 )
 1154.                 TIME_WAIT_Z_MAX = TIME_WAIT_Z_ALL( 1 )
 1155.                 TIME_WAIT_Z_MIN = TIME_WAIT_Z_ALL( 1 )
 1156.    Vr2--<       DO I = 2, NUMPES
 1157.    Vr2             TIME_WAIT_Z_MIN = MIN( TIME_WAIT_Z_MIN, TIME_WAIT_Z_ALL( I ) )
 1158.    Vr2             TIME_WAIT_Z_MAX = MAX( TIME_WAIT_Z_MAX, TIME_WAIT_Z_ALL( I ) )
 1159.    Vr2             TIME_WAIT_Z_SUM = TIME_WAIT_Z_SUM + TIME_WAIT_Z_ALL( I )
 1160.    Vr2-->       END DO
 1161.                 TIME_WAIT_Z_AVG = TIME_WAIT_Z_SUM / REAL(NUMPES)
 1162.  +              TIME_WAIT_Z_STDDEV = MG_COMPUTE_STDDEV ( TIME_WAIT_Z_ALL, TIME_WAIT_Z_AVG )
 1163.           
 1164.                 TIME_RECV_Z_SUM = TIME_RECV_Z_ALL( 1 )
 1165.                 TIME_RECV_Z_MAX = TIME_RECV_Z_ALL( 1 )
 1166.                 TIME_RECV_Z_MIN = TIME_RECV_Z_ALL( 1 )
 1167.    Vr2--<       DO I = 2, NUMPES
 1168.    Vr2             TIME_RECV_Z_MIN = MIN( TIME_RECV_Z_MIN, TIME_RECV_Z_ALL( I ) )
 1169.    Vr2             TIME_RECV_Z_MAX = MAX( TIME_RECV_Z_MAX, TIME_RECV_Z_ALL( I ) )
 1170.    Vr2             TIME_RECV_Z_SUM = TIME_RECV_Z_SUM + TIME_RECV_Z_ALL( I )
 1171.    Vr2-->       END DO
 1172.                 TIME_RECV_Z_AVG = TIME_RECV_Z_SUM / REAL(NUMPES)
 1173.  +              TIME_RECV_Z_STDDEV = MG_COMPUTE_STDDEV ( TIME_RECV_Z_ALL, TIME_RECV_Z_AVG )
 1174.           
 1175.                 TIME_UNPACK_Z_SUM = TIME_UNPACK_Z_ALL( 1 )
 1176.                 TIME_UNPACK_Z_MAX = TIME_UNPACK_Z_ALL( 1 )
 1177.                 TIME_UNPACK_Z_MIN = TIME_UNPACK_Z_ALL( 1 )
 1178.    Vr2--<       DO I = 2, NUMPES
 1179.    Vr2             TIME_UNPACK_Z_MIN = MIN( TIME_UNPACK_Z_MIN, TIME_UNPACK_Z_ALL( I ) )
 1180.    Vr2             TIME_UNPACK_Z_MAX = MAX( TIME_UNPACK_Z_MAX, TIME_UNPACK_Z_ALL( I ) )
 1181.    Vr2             TIME_UNPACK_Z_SUM = TIME_UNPACK_Z_SUM + TIME_UNPACK_Z_ALL( I )
 1182.    Vr2-->       END DO
 1183.                 TIME_UNPACK_Z_AVG = TIME_UNPACK_Z_SUM / REAL(NUMPES)
 1184.  +              TIME_UNPACK_Z_STDDEV = MG_COMPUTE_STDDEV ( TIME_UNPACK_Z_ALL, TIME_UNPACK_Z_AVG )
 1185.           
 1186.                 IF ( MG_PERF%NUM_SUMGRID /= 0) THEN
 1187.                    TIME_SUMGRID_SUM = TIME_SUMGRID_ALL(1)
 1188.                    TIME_SUMGRID_MAX = TIME_SUMGRID_ALL(1)
 1189.                    TIME_SUMGRID_MIN = TIME_SUMGRID_ALL(1)
 1190.    Vr2--<          DO I = 2, NUMPES
 1191.    Vr2                TIME_SUMGRID_MIN = MIN(TIME_SUMGRID_MIN, TIME_SUMGRID_ALL(I))
 1192.    Vr2                TIME_SUMGRID_MAX = MAX(TIME_SUMGRID_MAX, TIME_SUMGRID_ALL(I))
 1193.    Vr2                TIME_SUMGRID_SUM = TIME_SUMGRID_SUM + TIME_SUMGRID_ALL(I)
 1194.    Vr2-->          END DO
 1195.                    TIME_SUMGRID_AVG = TIME_SUMGRID_SUM / REAL(NUMPES)
 1196.  +                 TIME_SUMGRID_STDDEV = MG_COMPUTE_STDDEV ( TIME_SUMGRID_ALL, TIME_SUMGRID_AVG )
 1197.           
 1198.                    TIME_SUMGRID_COMP_SUM = TIME_SUMGRID_COMP_ALL(1)
 1199.                    TIME_SUMGRID_COMP_MAX = TIME_SUMGRID_COMP_ALL(1)
 1200.                    TIME_SUMGRID_COMP_MIN = TIME_SUMGRID_COMP_ALL(1)
 1201.    Vr2--<          DO I = 2, NUMPES
 1202.    Vr2                TIME_SUMGRID_COMP_MIN = MIN(TIME_SUMGRID_COMP_MIN, TIME_SUMGRID_COMP_ALL(I))
 1203.    Vr2                TIME_SUMGRID_COMP_MAX = MAX(TIME_SUMGRID_COMP_MAX, TIME_SUMGRID_COMP_ALL(I))
 1204.    Vr2                TIME_SUMGRID_COMP_SUM = TIME_SUMGRID_COMP_SUM + TIME_SUMGRID_COMP_ALL(I)
 1205.    Vr2-->          END DO
 1206.                    TIME_SUMGRID_COMP_AVG = TIME_SUMGRID_COMP_SUM / REAL(NUMPES)
 1207.  +                 TIME_SUMGRID_COMP_STDDEV = MG_COMPUTE_STDDEV ( TIME_SUMGRID_COMP_ALL, TIME_SUMGRID_COMP_AVG )
 1208.           
 1209.                    TIME_SUMGRID_COMM_SUM = TIME_SUMGRID_COMM_ALL(1)
 1210.                    TIME_SUMGRID_COMM_MAX = TIME_SUMGRID_COMM_ALL(1)
 1211.                    TIME_SUMGRID_COMM_MIN = TIME_SUMGRID_COMM_ALL(1)
 1212.    Vr2--<          DO I = 2, NUMPES
 1213.    Vr2                TIME_SUMGRID_COMM_MIN = MIN(TIME_SUMGRID_COMM_MIN, TIME_SUMGRID_COMM_ALL(I))
 1214.    Vr2                TIME_SUMGRID_COMM_MAX = MAX(TIME_SUMGRID_COMM_MAX, TIME_SUMGRID_COMM_ALL(I))
 1215.    Vr2                TIME_SUMGRID_COMM_SUM = TIME_SUMGRID_COMM_SUM + TIME_SUMGRID_COMM_ALL(I)
 1216.    Vr2-->          END DO
 1217.                    TIME_SUMGRID_COMM_AVG = TIME_SUMGRID_COMM_SUM / REAL(NUMPES)
 1218.  +                 TIME_SUMGRID_COMM_STDDEV = MG_COMPUTE_STDDEV ( TIME_COMM_ALL, TIME_COMM_AVG )
 1219.                 END IF
 1220.           
 1221.                 CALL DATE_AND_TIME ( TEST_DATE, TEST_TIME )
 1222.           
 1223.  +              CLOCK_RES = REAL(MPI_WTICK ( ))
 1224.           
 1225.                 IF ( REPORT_PERF > 0 ) THEN
 1226.           
 1227.  + 1----<          DO J = 1, 2
 1228.    1      
 1229.    1                  ! Write data to stdout or file:
 1230.    1      
 1231.    1                  IF ( J == 1 ) THEN 
 1232.    1                     OUTPUT_LOC = 6 ! STDOUT
 1233.    1                  ELSE IF ( J == 2 ) THEN
 1234.    1                     OUTPUT_LOC = 8 
 1235.    1                     OPEN ( UNIT=OUTPUT_LOC, FILE = 'results.txt' )
 1236.    1                  END IF
 1237.    1      
 1238.    1                  WRITE(OUTPUT_LOC,*)
 1239.    1                  WRITE(OUTPUT_LOC,100)
 1240.    1                  WRITE(OUTPUT_LOC,*) '          Mantevo miniapp MiniGhost experiment'
 1241.    1                  WRITE(OUTPUT_LOC,100)
 1242.    1      
 1243.    1                  WRITE(OUTPUT_LOC,*)
 1244.    1                  SELECT CASE ( COMM_METHOD )
 1245.    1                     CASE ( COMM_METHOD_BSPMA )
 1246.    1            
 1247.    1                        WRITE(OUTPUT_LOC,*) 'Communication strategy: full message aggregation (COMM_METHOD_BSPMA)'
 1248.    1            
 1249.    1                     CASE ( COMM_METHOD_SVAF )
 1250.    1            
 1251.    1                        WRITE(OUTPUT_LOC,*) 'Communication strategy: one variable at a time (COMM_METHOD_SVAF)'
 1252.    1            
 1253.    1                     CASE DEFAULT
 1254.    1            
 1255.    1                        WRITE(OUTPUT_LOC,*) '** Warning ** Unknown communication strategy'
 1256.    1      
 1257.    1                  END SELECT
 1258.    1                  WRITE(OUTPUT_LOC,*)
 1259.    1         
 1260.    1                  SELECT CASE ( STENCIL )
 1261.    1            
 1262.    1                     CASE ( STENCIL_NONE )
 1263.    1            
 1264.    1                        WRITE(OUTPUT_LOC,*) 'No computation inserted.'
 1265.    1            
 1266.    1                     CASE ( STENCIL_2D5PT )
 1267.    1            
 1268.    1                        WRITE(OUTPUT_LOC,*) 'Computation: 5-point difference stencil on a 2D grid (STENCIL_2D5PT)'
 1269.    1            
 1270.    1                     CASE ( STENCIL_2D9PT )
 1271.    1            
 1272.    1                        WRITE(OUTPUT_LOC,*) 'Computation: 9-point difference stencil on a 2D grid (STENCIL_2D9PT)'
 1273.    1            
 1274.    1                     CASE ( STENCIL_3D7PT )
 1275.    1            
 1276.    1                        WRITE(OUTPUT_LOC,*) 'Computation: 7-point difference stencil on a 3D grid (STENCIL_3D7PT)'
 1277.    1            
 1278.    1                     CASE ( STENCIL_3D27PT )
 1279.    1            
 1280.    1                        WRITE(OUTPUT_LOC,*) 'Computation: 27-point difference stencil on a 3D grid (STENCIL_3D27PT)'
 1281.    1            
 1282.    1                     CASE DEFAULT
 1283.    1            
 1284.    1                        WRITE(OUTPUT_LOC,*) '** Warning ** Unknown computation'
 1285.    1            
 1286.    1                  END SELECT
 1287.    1            
 1288.    1                  WRITE(OUTPUT_LOC,*)
 1289.    1                  WRITE(OUTPUT_LOC,101) NX * NPX, NY * NPY, NZ * NPZ
 1290.    1                  WRITE(OUTPUT_LOC,102) NX, NY, NZ
 1291.    1                  WRITE(OUTPUT_LOC,*)
 1292.    1                  WRITE(OUTPUT_LOC,103) NUM_VARS
 1293.    1                  WRITE(OUTPUT_LOC,104) NUM_SUM_GRID, PERCENT_SUM
 1294.    1                  WRITE(OUTPUT_LOC,*)
 1295.    1                  WRITE(OUTPUT_LOC,110) NUM_TSTEPS
 1296.    1                  WRITE(OUTPUT_LOC,*)
 1297.    1            
 1298.    1                  IF ( SCALING == SCALING_STRONG ) THEN   ! Not that it really matters.
 1299.    1                     WRITE(OUTPUT_LOC,*) 'MPI version, strong scaling'
 1300.    1                  ELSE
 1301.    1                     WRITE(OUTPUT_LOC,*) 'MPI version, weak scaling'
 1302.    1                  END IF
 1303.    1                  WRITE(OUTPUT_LOC,*)
 1304.    1                  WRITE(OUTPUT_LOC,120) NPX, NPY, NPZ
 1305.    1                  WRITE(OUTPUT_LOC,*)
 1306.    1                  IF ( NUMPES == 1 ) THEN
 1307.    1                     WRITE(OUTPUT_LOC,121) TEST_MACHINE, TEST_TIME, TEST_DATE
 1308.    1                  ELSE
 1309.    1                     WRITE(OUTPUT_LOC,122) NUMPES, TEST_MACHINE, TEST_TIME, TEST_DATE
 1310.    1                  END IF
 1311.    1         
 1312.    1                  WRITE(OUTPUT_LOC,*)
 1313.    1                  WRITE(OUTPUT_LOC,130) TIME_WALL_MAX, CLOCK_RES
 1314.    1                  WRITE(OUTPUT_LOC,*)
 1315.    1            
 1316.    1                  IF ( STENCIL /= STENCIL_NONE ) THEN
 1317.    1            
 1318.    1                     GFLOPS = REAL(NUM_TSTEPS) * REAL(GNUM_ADDS + GNUM_DIVIDES) / TIME_WALL_MAX / GIGA
 1319.    1         
 1320.    1                     WRITE(OUTPUT_LOC,*) '-------------------------------------------------'
 1321.    1                     WRITE(OUTPUT_LOC,*) '          Computational performance:'
 1322.    1                     WRITE(OUTPUT_LOC,*) '-------------------------------------------------'
 1323.    1                     WRITE(OUTPUT_LOC,*)
 1324.    1                     WRITE(OUTPUT_LOC,140) TIME_STENCIL_AVG, TIME_STENCIL_STDDEV, TIME_STENCIL_MIN, TIME_STENCIL_MAX
 1325.    1                     WRITE(OUTPUT_LOC,*)
 1326.    1                     WRITE(OUTPUT_LOC,131) '       Total GFLOPS:               ', GFLOPS
 1327.    1                     WRITE(OUTPUT_LOC,131) '       GFLOPS per process:         ', GFLOPS / REAL(NUMPES)
 1328.    1                     WRITE(OUTPUT_LOC,*)
 1329.    1                     WRITE(OUTPUT_LOC,131) '       Total floating point ops:   ', REAL(NUM_TSTEPS) * REAL(GNUM_ADDS + GNUM_DIVIDES)
 1330.    1                     WRITE(OUTPUT_LOC,*)
 1331.    1                     WRITE(OUTPUT_LOC,131) '          Sums:                    ', REAL(NUM_TSTEPS) * REAL(GNUM_ADDS)
 1332.    1                     WRITE(OUTPUT_LOC,131) '          Mult:                    ', REAL(NUM_TSTEPS) * REAL(GNUM_DIVIDES)
 1333.    1                     WRITE(OUTPUT_LOC,*)
 1334.    1                     WRITE(OUTPUT_LOC,*) '       Number of spikes set: ', NUM_SPIKES
 1335.    1                  ELSE
 1336.    1                     WRITE(OUTPUT_LOC,*)  '  *** No computation *** '
 1337.    1                  END IF
 1338.    1         
 1339.    1                  IF ( NUMPES == 1 )    &
 1340.    1                     GO TO 10
 1341.    1      
 1342.    1                  WRITE(OUTPUT_LOC,*)
 1343.    1                  WRITE(OUTPUT_LOC,*) '-------------------------------------------------'
 1344.    1                  WRITE(OUTPUT_LOC,*) '     Inter-process communication statistics:'
 1345.    1                  WRITE(OUTPUT_LOC,*) '-------------------------------------------------'
 1346.    1                  WRITE(OUTPUT_LOC,*)
 1347.    1                  WRITE(OUTPUT_LOC,150) TIME_COMM_AVG, TIME_PACK_AVG, TIME_SEND_AVG, TIME_WAIT_AVG, TIME_RECV_AVG, TIME_UNPACK_AVG
 1348.    1                  WRITE(OUTPUT_LOC,151) TIME_COMM_STDDEV, TIME_PACK_STDDEV, TIME_SEND_STDDEV, TIME_WAIT_STDDEV, TIME_RECV_STDDEV, TIME_UNPACK_STDDEV
 1349.    1                  WRITE(OUTPUT_LOC,152) TIME_COMM_MAX, TIME_PACK_MAX, TIME_SEND_MAX, TIME_WAIT_MAX, TIME_RECV_MAX, TIME_UNPACK_MAX
 1350.    1                  WRITE(OUTPUT_LOC,153) TIME_COMM_MIN, TIME_PACK_MIN, TIME_SEND_MIN, TIME_WAIT_MIN, TIME_RECV_MIN, TIME_UNPACK_MIN
 1351.    1                  WRITE(OUTPUT_LOC,*)
 1352.    1         
 1353.    1                  WRITE(OUTPUT_LOC,*)  ' Messages SENT per time step:'
 1354.    1                  WRITE(OUTPUT_LOC,*)
 1355.    1                  WRITE(OUTPUT_LOC,131) '   Number:                         ', REAL(GNUM_SENDS)
 1356.    1                  WRITE(OUTPUT_LOC,*)
 1357.    1                  WRITE(OUTPUT_LOC,132) '      Total counts/bytes per time step:   ', REAL(GSEND_COUNT), REAL(GSEND_COUNT)*SIZE_OF_DATA
 1358.    1                  WRITE(OUTPUT_LOC,133) '      Min, max counts/bytes per time step:',       &
 1359.    1                     REAL(GSEND_COUNT_MIN), REAL(GSEND_COUNT_MIN)*SIZE_OF_DATA, &
 1360.    1                     REAL(GSEND_COUNT_MAX), REAL(GSEND_COUNT_MAX)*SIZE_OF_DATA
 1361.    1                  WRITE(OUTPUT_LOC,134) '      Min, max number/counts/bytes per time step per process:',       &
 1362.    1                     GSEND_NODE_NUM_MIN, REAL(GSEND_NODE_COUNT_MIN), &
 1363.    1                     REAL(GSEND_NODE_COUNT_MIN)*SIZE_OF_DATA, &
 1364.    1                     GSEND_NODE_NUM_MAX, REAL(GSEND_NODE_COUNT_MAX), &
 1365.    1                     REAL(GSEND_NODE_COUNT_MAX)*SIZE_OF_DATA
 1366.    1         
 1367.    1                  WRITE(OUTPUT_LOC,*)
 1368.    1                  WRITE(OUTPUT_LOC,*)  ' Messages RECEIVED per time step'
 1369.    1                  WRITE(OUTPUT_LOC,*)
 1370.    1                  WRITE(OUTPUT_LOC,131) '   Number:                         ', REAL(GNUM_RECVS)
 1371.    1                  WRITE(OUTPUT_LOC,*)
 1372.    1                  WRITE(OUTPUT_LOC,132) '      Total counts/bytes per time step:   ', REAL(GRECV_COUNT), REAL(GRECV_COUNT)*SIZE_OF_DATA
 1373.    1                  WRITE(OUTPUT_LOC,133) '      Min, max counts/bytes per time step:',       &
 1374.    1                     REAL(GRECV_COUNT_MIN), REAL(GRECV_COUNT_MIN)*SIZE_OF_DATA, &
 1375.    1                     REAL(GRECV_COUNT_MAX), REAL(GRECV_COUNT_MAX)*SIZE_OF_DATA
 1376.    1                  WRITE(OUTPUT_LOC,134) '      Min, max number/counts/bytes per time step per process:',       &
 1377.    1                     GRECV_NODE_NUM_MIN, REAL(GRECV_NODE_COUNT_MIN), &
 1378.    1                     REAL(GRECV_NODE_COUNT_MIN)*SIZE_OF_DATA, &
 1379.    1                     GRECV_NODE_NUM_MAX, REAL(GRECV_NODE_COUNT_MAX), &
 1380.    1                     REAL(GRECV_NODE_COUNT_MAX)*SIZE_OF_DATA
 1381.    1            
 1382.    1                  WRITE(OUTPUT_LOC,*)
 1383.    1                  WRITE(OUTPUT_LOC,*) '     X-direction inter-process communication statistics:'
 1384.    1                  WRITE(OUTPUT_LOC,*)
 1385.    1                  WRITE(OUTPUT_LOC,150) TIME_COMM_X_AVG, TIME_PACK_X_AVG, TIME_SEND_X_AVG, TIME_WAIT_X_AVG, TIME_RECV_X_AVG, &
 1386.    1                                        TIME_UNPACK_X_AVG
 1387.    1                  WRITE(OUTPUT_LOC,151) TIME_COMM_X_STDDEV, TIME_PACK_X_STDDEV, TIME_SEND_X_STDDEV, TIME_WAIT_X_STDDEV, TIME_RECV_X_STDDEV, &
 1388.    1                                        TIME_UNPACK_X_STDDEV
 1389.    1                  WRITE(OUTPUT_LOC,152) TIME_COMM_X_MAX, TIME_PACK_X_MAX, TIME_SEND_X_MAX, TIME_WAIT_X_MAX, TIME_RECV_X_MAX, &
 1390.    1                                        TIME_UNPACK_X_MAX
 1391.    1                  WRITE(OUTPUT_LOC,153) TIME_COMM_X_MIN, TIME_PACK_X_MIN, TIME_SEND_X_MIN, TIME_WAIT_X_MIN, TIME_RECV_X_MIN, &
 1392.    1                                        TIME_UNPACK_X_MIN
 1393.    1            
 1394.    1                  WRITE(OUTPUT_LOC,*)
 1395.    1                  WRITE(OUTPUT_LOC,*) '     Y-direction inter-process communication statistics:'
 1396.    1                  WRITE(OUTPUT_LOC,*)
 1397.    1                  WRITE(OUTPUT_LOC,150) TIME_COMM_Y_AVG, TIME_PACK_Y_AVG, TIME_SEND_Y_AVG, TIME_WAIT_Y_AVG, TIME_RECV_Y_AVG, &
 1398.    1                                        TIME_UNPACK_Y_AVG
 1399.    1                  WRITE(OUTPUT_LOC,151) TIME_COMM_Y_STDDEV, TIME_PACK_Y_STDDEV, TIME_SEND_Y_STDDEV, TIME_WAIT_Y_STDDEV, TIME_RECV_Y_STDDEV, &
 1400.    1                                        TIME_UNPACK_Y_STDDEV
 1401.    1                  WRITE(OUTPUT_LOC,152) TIME_COMM_Y_MAX, TIME_PACK_Y_MAX, TIME_SEND_Y_MAX, TIME_WAIT_Y_MAX, TIME_RECV_Y_MAX, &
 1402.    1                                        TIME_UNPACK_Y_MAX
 1403.    1                  WRITE(OUTPUT_LOC,153) TIME_COMM_Y_MIN, TIME_PACK_Y_MIN, TIME_SEND_Y_MIN, TIME_WAIT_Y_MIN, TIME_RECV_Y_MIN, &
 1404.    1                                        TIME_UNPACK_Y_MIN
 1405.    1               
 1406.    1                  WRITE(OUTPUT_LOC,*)
 1407.    1                  WRITE(OUTPUT_LOC,*) '     Z-direction inter-process communication statistics:'
 1408.    1                  WRITE(OUTPUT_LOC,*)
 1409.    1                  WRITE(OUTPUT_LOC,150) TIME_COMM_Z_AVG, TIME_PACK_Z_AVG, TIME_SEND_Z_AVG, TIME_WAIT_Z_AVG, TIME_RECV_Z_AVG, &
 1410.    1                                        TIME_UNPACK_Z_AVG
 1411.    1                  WRITE(OUTPUT_LOC,151) TIME_COMM_Z_STDDEV, TIME_PACK_Z_STDDEV, TIME_SEND_Z_STDDEV, TIME_WAIT_Z_STDDEV, TIME_RECV_Z_STDDEV, &
 1412.    1                                        TIME_UNPACK_Z_STDDEV
 1413.    1                  WRITE(OUTPUT_LOC,152) TIME_COMM_Z_MAX, TIME_PACK_Z_MAX, TIME_SEND_Z_MAX, TIME_WAIT_Z_MAX, TIME_RECV_Z_MAX, &
 1414.    1                                        TIME_UNPACK_Z_MAX
 1415.    1                  WRITE(OUTPUT_LOC,153) TIME_COMM_Z_MIN, TIME_PACK_Z_MIN, TIME_SEND_Z_MIN, TIME_WAIT_Z_MIN, TIME_RECV_Z_MIN, &
 1416.    1                                        TIME_UNPACK_Z_MIN
 1417.    1                  WRITE(OUTPUT_LOC,*)
 1418.    1          
 1419.    1       10         CONTINUE
 1420.    1      
 1421.    1                  IF ( MG_PERF%NUM_SUMGRID /= 0) THEN
 1422.    1                     WRITE(OUTPUT_LOC,*)
 1423.    1                     WRITE(OUTPUT_LOC,*) '  GRIDSUM performance'
 1424.    1                     WRITE(OUTPUT_LOC,*)
 1425.    1                     WRITE(OUTPUT_LOC,131) '   Number:                         ', REAL(MG_PERF%NUM_SUMGRID)
 1426.    1                     WRITE(OUTPUT_LOC,*)
 1427.    1                     WRITE(OUTPUT_LOC,161) TIME_SUMGRID_AVG, TIME_SUMGRID_COMP_AVG, TIME_SUMGRID_COMM_AVG
 1428.    1                     WRITE(OUTPUT_LOC,162) TIME_SUMGRID_MAX, TIME_SUMGRID_COMP_MAX, TIME_SUMGRID_COMM_MAX
 1429.    1                     WRITE(OUTPUT_LOC,163) TIME_SUMGRID_MIN, TIME_SUMGRID_COMP_MIN, TIME_SUMGRID_COMM_MIN
 1430.    1                     WRITE(OUTPUT_LOC,*)
 1431.    1                  ENDIF
 1432.    1            
 1433.    1                  IF ( NUMPES == 1 )    &
 1434.    1                     GO TO 20
 1435.    1         
 1436.    1                  IF ( MG_PERF%NUM_ALLREDUCES /= 0 ) THEN
 1437.    1                     WRITE(OUTPUT_LOC,*)
 1438.    1                     WRITE(OUTPUT_LOC,*)  ' Reductions (to all) per time step'
 1439.    1                     WRITE(OUTPUT_LOC,*)
 1440.    1                     WRITE(OUTPUT_LOC,131) '    Number:                  ', REAL(MG_PERF%NUM_ALLREDUCES)
 1441.    1                     WRITE(OUTPUT_LOC,*)
 1442.    1                     WRITE(OUTPUT_LOC,132) '      Total counts/bytes per time step:',       &
 1443.    1                        REAL(MG_PERF%ALLREDUCE_COUNT), REAL(MG_PERF%ALLREDUCE_COUNT)*SIZE_OF_DATA
 1444.    1                     WRITE(OUTPUT_LOC,133) '      Min, max counts/bytes per time step: ',       &
 1445.    1                        REAL(GALLREDUCE_COUNT_MIN), REAL(GALLREDUCE_COUNT_MIN)*SIZE_OF_DATA, &
 1446.    1                        REAL(GALLREDUCE_COUNT_MAX), REAL(GALLREDUCE_COUNT_MAX)*SIZE_OF_DATA
 1447.    1                  END IF
 1448.    1         
 1449.    1                  IF ( MG_PERF%NUM_BCASTS /= 0 ) THEN
 1450.    1                     WRITE(OUTPUT_LOC,*)
 1451.    1                     WRITE(OUTPUT_LOC,*)  ' Broadcasts per time step'
 1452.    1                     WRITE(OUTPUT_LOC,*)
 1453.    1                     WRITE(OUTPUT_LOC,131) '    Number:                  ', REAL(MG_PERF%NUM_BCASTS)
 1454.    1                     WRITE(OUTPUT_LOC,*)
 1455.    1                     WRITE(OUTPUT_LOC,133) '       Total counts/bytes per time step: ',       &
 1456.    1                        REAL(MG_PERF%BCAST_COUNT), REAL(MG_PERF%BCAST_COUNT)*SIZE_OF_DATA
 1457.    1                     WRITE(OUTPUT_LOC,133) '       Min, max counts/bytes per time step: ',       &
 1458.    1                        REAL(GBCAST_COUNT_MIN), REAL(GBCAST_COUNT_MIN)*SIZE_OF_DATA, &
 1459.    1                        REAL(GBCAST_COUNT_MAX), REAL(GBCAST_COUNT_MAX)*SIZE_OF_DATA
 1460.    1                  END IF
 1461.    1      
 1462.    1                  IF ( REPORT_PERF == 2 ) THEN
 1463.    1      
 1464.    1                     WRITE(OUTPUT_LOC,*)
 1465.    1                     WRITE(OUTPUT_LOC,*) ' Per process communication time:'
 1466.    1                     WRITE(OUTPUT_LOC,*)
 1467.    1                     WRITE(OUTPUT_LOC,*) '    PE     Wall (sec)     % Comm'
 1468.    1                     WRITE(OUTPUT_LOC,*) '   ----    ----------     ------'
 1469.  + 1 2--<                DO I = 1, NUMPES
 1470.    1 2                      IF ( TIME_WALL_ALL( I ) == TIME_WALL_MAX ) THEN
 1471.    1 2                         WRITE(OUTPUT_LOC,171) I-1, TIME_WALL_ALL( I ),                   &
 1472.    1 2                            ( TIME_COMM_ALL( I ) / TIME_WALL_ALL( I ) ) * 100.0
 1473.    1 2                      ELSE IF ( TIME_WALL_ALL( I ) == TIME_WALL_MIN ) THEN
 1474.    1 2                         WRITE(OUTPUT_LOC,172) I-1, TIME_WALL_ALL( I ),                   &
 1475.    1 2                            ( TIME_COMM_ALL( I ) / TIME_WALL_ALL( I ) ) * 100.0
 1476.    1 2                      ELSE
 1477.    1 2                         WRITE(OUTPUT_LOC,173) I-1, TIME_WALL_ALL( I ),                   &
 1478.    1 2                            ( TIME_COMM_ALL( I ) / TIME_WALL_ALL( I ) ) * 100.0
 1479.    1 2                      END IF
 1480.    1 2-->                END DO
 1481.    1                  END IF
 1482.    1      
 1483.    1                  WRITE(OUTPUT_LOC,*)
 1484.    1                  WRITE(OUTPUT_LOC,200)
 1485.    1                  WRITE(OUTPUT_LOC,*)
 1486.    1      
 1487.    1       20         CONTINUE   ! Skipped to here if single pe execution.
 1488.    1      
 1489.    1                  IF ( OUTPUT_LOC == 8 ) &
 1490.    1                     CLOSE ( UNIT = 8 )
 1491.    1      
 1492.    1---->          END DO
 1493.           
 1494.                 END IF ! REPORT_PERF > 0
 1495.           
 1496.                 ! yaml output
 1497.           
 1498.                 OUTPUT_LOC = 8
 1499.                 OPEN(UNIT=8, FILE = 'results.yaml')
 1500.           
 1501.  +              CALL ENV(OUTPUT_LOC)
 1502.           
 1503.                 SELECT CASE (COMM_METHOD)
 1504.                    CASE (COMM_METHOD_BSPMA)
 1505.                       WRITE(OUTPUT_LOC,*) 'Comm_strategy: full message aggregation (COMM_METHOD_BSPMA)'
 1506.                    CASE (COMM_METHOD_SVAF)
 1507.                       WRITE(OUTPUT_LOC,*) 'Comm_strategy: one variable at a time (COMM_METHOD_SVAF)'
 1508.                 END SELECT
 1509.           
 1510.                 SELECT CASE (STENCIL)
 1511.                    CASE (STENCIL_NONE)
 1512.                       WRITE(OUTPUT_LOC,*) 'Computation: None'
 1513.                    CASE (STENCIL_2D5PT)
 1514.                       WRITE(OUTPUT_LOC,*) 'Computation: 5-point difference stencil on a 2D grid (STENCIL_2D5PT)'
 1515.                    CASE (STENCIL_2D9PT)
 1516.                       WRITE(OUTPUT_LOC,*) 'Computation: 9-point difference stencil on a 2D grid (STENCIL_2D9PT)'
 1517.                    CASE (STENCIL_3D7PT)
 1518.                       WRITE(OUTPUT_LOC,*) 'Computation: 7-point difference stencil on a 3D grid (STENCIL_3D7PT)'
 1519.                    CASE (STENCIL_3D27PT)
 1520.                       WRITE(OUTPUT_LOC,*) 'Computation: 27-point difference stencil on a 3D grid (STENCIL_3D27PT)'
 1521.                 END SELECT
 1522.           
 1523.                 WRITE(OUTPUT_LOC,301) NX*NPX, NY*NPY, NZ*NPZ
 1524.                 WRITE(OUTPUT_LOC,302) NX, NY, NZ
 1525.                 WRITE(OUTPUT_LOC,303) NUM_VARS
 1526.                 WRITE(OUTPUT_LOC,304) NUM_SUM_GRID, PERCENT_SUM
 1527.                 WRITE(OUTPUT_LOC,310) NUM_TSTEPS
 1528.                 WRITE(OUTPUT_LOC,320) NPX, NPY, NPZ
 1529.           
 1530.                 IF (SCALING == SCALING_STRONG) THEN
 1531.                    WRITE(OUTPUT_LOC,*) 'Scaling: strong'
 1532.                 ELSE
 1533.                    WRITE(OUTPUT_LOC,*) 'Scaling: weak'
 1534.                 END IF
 1535.           
 1536.                 WRITE(OUTPUT_LOC,322) NUMPES, TEST_MACHINE, TEST_TIME, TEST_DATE
 1537.                 WRITE(OUTPUT_LOC,330) TIME_WALL_MAX, CLOCK_RES
 1538.           
 1539.                 IF (STENCIL /= STENCIL_NONE) THEN
 1540.                    WRITE(OUTPUT_LOC,335) ERROR_TOL
 1541.                    WRITE(OUTPUT_LOC,340) TIME_STENCIL_AVG, TIME_STENCIL_MIN, TIME_STENCIL_MAX
 1542.                    GFLOPS = REAL(NUM_TSTEPS) * REAL(GNUM_ADDS + GNUM_DIVIDES) / TIME_WALL_MAX / GIGA
 1543.                    WRITE(OUTPUT_LOC,331) ' GFLOPS_Total:          ', GFLOPS
 1544.                    WRITE(OUTPUT_LOC,331) ' GFLOPS_per_process:    ', GFLOPS / REAL(NUMPES)
 1545.                    WRITE(OUTPUT_LOC,331) ' FLOPS_Total:           ', REAL(NUM_TSTEPS)*REAL(GNUM_ADDS + GNUM_DIVIDES)
 1546.                    WRITE(OUTPUT_LOC,331) ' FLOPS_Sums:            ', REAL(NUM_TSTEPS)*REAL(GNUM_ADDS)
 1547.                    WRITE(OUTPUT_LOC,331) ' FLOPS_Divide:          ', REAL(NUM_TSTEPS) * REAL(GNUM_DIVIDES)
 1548.                    WRITE(OUTPUT_LOC,*) 'Number_spikes: ', NUM_SPIKES
 1549.                 END IF
 1550.           
 1551.                 IF (NUMPES /= 1) THEN
 1552.                    WRITE(OUTPUT_LOC,350) ' Comm_total_ave:    ', TIME_COMM_AVG, &
 1553.                                          ' Comm_pack_ave:     ', TIME_PACK_AVG, &
 1554.                                          ' Comm_send_ave:     ', TIME_SEND_AVG, &
 1555.                                          ' Comm_wait_ave:     ', TIME_WAIT_AVG, &
 1556.                                          ' Comm_recv_ave:     ', TIME_RECV_AVG, &
 1557.                                          ' Comm_unpack_ave:   ', TIME_UNPACK_AVG
 1558.                    WRITE(OUTPUT_LOC,350) ' Comm_total_max:    ', TIME_COMM_MAX, &
 1559.                                          ' Comm_pack_max:     ', TIME_PACK_MAX, &
 1560.                                          ' Comm_send_max:     ', TIME_SEND_MAX, &
 1561.                                          ' Comm_wait_max:     ', TIME_WAIT_MAX, &
 1562.                                          ' Comm_recv_max:     ', TIME_RECV_MAX, &
 1563.                                          ' Comm_unpack_max:   ', TIME_UNPACK_MAX
 1564.                    WRITE(OUTPUT_LOC,350) ' Comm_total_min:    ', TIME_COMM_MIN, &
 1565.                                          ' Comm_pack_min:     ', TIME_PACK_MIN, &
 1566.                                          ' Comm_send_min:     ', TIME_SEND_MIN, &
 1567.                                          ' Comm_wait_min:     ', TIME_WAIT_MIN, &
 1568.                                          ' Comm_recv_min:     ', TIME_RECV_MIN, &
 1569.                                          ' Comm_unpack_min:   ', TIME_UNPACK_MIN
 1570.           
 1571.                    WRITE(OUTPUT_LOC,*) 'Send_messages: ',GNUM_SENDS
 1572.                    WRITE(OUTPUT_LOC,*) 'Send_total_words: ',GSEND_COUNT
 1573.                    WRITE(OUTPUT_LOC,*) 'Send_total_bytes: ',GSEND_COUNT*SIZE_OF_DATA
 1574.                    WRITE(OUTPUT_LOC,*) 'Send_min_words: ',GSEND_COUNT_MIN
 1575.                    WRITE(OUTPUT_LOC,*) 'Send_min_bytes: ',GSEND_COUNT_MIN*SIZE_OF_DATA
 1576.                    WRITE(OUTPUT_LOC,*) 'Send_max_words: ',GSEND_COUNT_MAX
 1577.                    WRITE(OUTPUT_LOC,*) 'Send_max_bytes: ',GSEND_COUNT_MAX*SIZE_OF_DATA
 1578.                    WRITE(OUTPUT_LOC,*) 'Send_min_proc: ',GSEND_NODE_NUM_MIN
 1579.                    WRITE(OUTPUT_LOC,*) 'Send_min_words_proc: ',GSEND_NODE_COUNT_MIN
 1580.                    WRITE(OUTPUT_LOC,*) 'Send_min_bytes_proc: ',GSEND_NODE_COUNT_MIN*SIZE_OF_DATA
 1581.                    WRITE(OUTPUT_LOC,*) 'Send_max_proc: ',GSEND_NODE_NUM_MAX
 1582.                    WRITE(OUTPUT_LOC,*) 'Send_max_words_proc: ',GSEND_NODE_COUNT_MAX
 1583.                    WRITE(OUTPUT_LOC,*) 'Send_max_bytes_proc: ',GSEND_NODE_COUNT_MAX*SIZE_OF_DATA
 1584.           
 1585.                    WRITE(OUTPUT_LOC,*) 'Recv_messages: ',GNUM_RECVS
 1586.                    WRITE(OUTPUT_LOC,*) 'Recv_total_words: ',GRECV_COUNT
 1587.                    WRITE(OUTPUT_LOC,*) 'Recv_total_bytes: ',GRECV_COUNT*SIZE_OF_DATA
 1588.                    WRITE(OUTPUT_LOC,*) 'Recv_min_words: ',GRECV_COUNT_MIN
 1589.                    WRITE(OUTPUT_LOC,*) 'Recv_min_bytes: ',GRECV_COUNT_MIN*SIZE_OF_DATA
 1590.                    WRITE(OUTPUT_LOC,*) 'Recv_max_words: ',GRECV_COUNT_MAX
 1591.                    WRITE(OUTPUT_LOC,*) 'Recv_max_bytes: ',GRECV_COUNT_MAX*SIZE_OF_DATA
 1592.                    WRITE(OUTPUT_LOC,*) 'Recv_min_proc: ',GRECV_NODE_NUM_MIN
 1593.                    WRITE(OUTPUT_LOC,*) 'Recv_min_words_proc: ',GRECV_NODE_COUNT_MIN
 1594.                    WRITE(OUTPUT_LOC,*) 'Recv_min_bytes_proc: ',GRECV_NODE_COUNT_MIN*SIZE_OF_DATA
 1595.                    WRITE(OUTPUT_LOC,*) 'Recv_max_proc: ',GRECV_NODE_NUM_MAX
 1596.                    WRITE(OUTPUT_LOC,*) 'Recv_max_words_proc: ',GRECV_NODE_COUNT_MAX
 1597.                    WRITE(OUTPUT_LOC,*) 'Recv_max_bytes_proc: ',GRECV_NODE_COUNT_MAX*SIZE_OF_DATA
 1598.           
 1599.                    WRITE(OUTPUT_LOC,350) ' Comm_x_total_ave:  ', TIME_COMM_X_AVG, &
 1600.                                          ' Comm_x_pack_ave:   ', TIME_PACK_X_AVG, &
 1601.                                          ' Comm_x_send_ave:   ', TIME_SEND_X_AVG, &
 1602.                                          ' Comm_x_wait_ave:   ', TIME_WAIT_X_AVG, &
 1603.                                          ' Comm_x_recv_ave:   ', TIME_RECV_X_AVG, &
 1604.                                          ' Comm_x_unpack_ave: ', TIME_UNPACK_X_AVG
 1605.                    WRITE(OUTPUT_LOC,350) ' Comm_x_total_max:  ', TIME_COMM_X_MAX, &
 1606.                                          ' Comm_x_pack_max:   ', TIME_PACK_X_MAX, &
 1607.                                          ' Comm_x_send_max:   ', TIME_SEND_X_MAX, &
 1608.                                          ' Comm_x_wait_max:   ', TIME_WAIT_X_MAX, &
 1609.                                          ' Comm_x_recv_max:   ', TIME_RECV_X_MAX, &
 1610.                                          ' Comm_x_unpack_max: ', TIME_UNPACK_X_MAX
 1611.                    WRITE(OUTPUT_LOC,350) ' Comm_x_total_min:  ', TIME_COMM_X_MIN, &
 1612.                                          ' Comm_x_pack_min:   ', TIME_PACK_X_MIN, &
 1613.                                          ' Comm_x_send_min:   ', TIME_SEND_X_MIN, &
 1614.                                          ' Comm_x_wait_min:   ', TIME_WAIT_X_MIN, &
 1615.                                          ' Comm_x_recv_min:   ', TIME_RECV_X_MIN, &
 1616.                                          ' Comm_x_unpack_min: ', TIME_UNPACK_X_MIN
 1617.           
 1618.                    WRITE(OUTPUT_LOC,350) ' Comm_y_total_ave:  ', TIME_COMM_Y_AVG, &
 1619.                                          ' Comm_y_pack_ave:   ', TIME_PACK_Y_AVG, &
 1620.                                          ' Comm_y_send_ave:   ', TIME_SEND_Y_AVG, &
 1621.                                          ' Comm_y_wait_ave:   ', TIME_WAIT_Y_AVG, &
 1622.                                          ' Comm_y_recv_ave:   ', TIME_RECV_Y_AVG, &
 1623.                                          ' Comm_y_unpack_ave: ', TIME_UNPACK_Y_AVG
 1624.                    WRITE(OUTPUT_LOC,350) ' Comm_y_total_max:  ', TIME_COMM_Y_MAX, &
 1625.                                          ' Comm_y_pack_max:   ', TIME_PACK_Y_MAX, &
 1626.                                          ' Comm_y_send_max:   ', TIME_SEND_Y_MAX, &
 1627.                                          ' Comm_y_wait_max:   ', TIME_WAIT_Y_MAX, &
 1628.                                          ' Comm_y_recv_max:   ', TIME_RECV_Y_MAX, &
 1629.                                          ' Comm_y_unpack_max: ', TIME_UNPACK_Y_MAX
 1630.                    WRITE(OUTPUT_LOC,350) ' Comm_y_total_min:  ', TIME_COMM_Y_MIN, &
 1631.                                          ' Comm_y_pack_min:   ', TIME_PACK_Y_MIN, &
 1632.                                          ' Comm_y_send_min:   ', TIME_SEND_Y_MIN, &
 1633.                                          ' Comm_y_wait_min:   ', TIME_WAIT_Y_MIN, &
 1634.                                          ' Comm_y_recv_min:   ', TIME_RECV_Y_MIN, &
 1635.                                          ' Comm_y_unpack_min: ', TIME_UNPACK_Y_MIN
 1636.           
 1637.                    WRITE(OUTPUT_LOC,350) ' Comm_z_total_ave:  ', TIME_COMM_Z_AVG, &
 1638.                                          ' Comm_z_pack_ave:   ', TIME_PACK_Z_AVG, &
 1639.                                          ' Comm_z_send_ave:   ', TIME_SEND_Z_AVG, &
 1640.                                          ' Comm_z_wait_ave:   ', TIME_WAIT_Z_AVG, &
 1641.                                          ' Comm_z_recv_ave:   ', TIME_RECV_Z_AVG, &
 1642.                                          ' Comm_z_unpack_ave: ', TIME_UNPACK_Z_AVG
 1643.                    WRITE(OUTPUT_LOC,350) ' Comm_z_total_max:  ', TIME_COMM_Z_MAX, &
 1644.                                          ' Comm_z_pack_max:   ', TIME_PACK_Z_MAX, &
 1645.                                          ' Comm_z_send_max:   ', TIME_SEND_Z_MAX, &
 1646.                                          ' Comm_z_wait_max:   ', TIME_WAIT_Z_MAX, &
 1647.                                          ' Comm_z_recv_max:   ', TIME_RECV_Z_MAX, &
 1648.                                          ' Comm_z_unpack_max: ', TIME_UNPACK_Z_MAX
 1649.                    WRITE(OUTPUT_LOC,350) ' Comm_z_total_min:  ', TIME_COMM_Z_MIN, &
 1650.                                          ' Comm_z_pack_min:   ', TIME_PACK_Z_MIN, &
 1651.                                          ' Comm_z_send_min:   ', TIME_SEND_Z_MIN, &
 1652.                                          ' Comm_z_wait_min:   ', TIME_WAIT_Z_MIN, &
 1653.                                          ' Comm_z_recv_min:   ', TIME_RECV_Z_MIN, &
 1654.                                          ' Comm_z_unpack_min: ', TIME_UNPACK_Z_MIN
 1655.                 END IF
 1656.           
 1657.                 IF (MG_PERF%NUM_SUMGRID /= 0) THEN
 1658.                    WRITE(OUTPUT_LOC,*) 'Number_gridsum: ',MG_PERF%NUM_SUMGRID
 1659.                    WRITE(OUTPUT_LOC,331) ' Gridsum_Time_ave:      ',TIME_SUMGRID_AVG
 1660.                    WRITE(OUTPUT_LOC,331) ' Gridsum_Time_comp_ave: ',TIME_SUMGRID_COMP_AVG
 1661.                    WRITE(OUTPUT_LOC,331) ' Gridsum_Time_comm_ave: ',TIME_SUMGRID_COMM_AVG
 1662.                    WRITE(OUTPUT_LOC,331) ' Gridsum_Time_max:      ',TIME_SUMGRID_MAX
 1663.                    WRITE(OUTPUT_LOC,331) ' Gridsum_Time_comp_max: ',TIME_SUMGRID_COMP_MAX
 1664.                    WRITE(OUTPUT_LOC,331) ' Gridsum_Time_comm_max: ',TIME_SUMGRID_COMM_MAX
 1665.                    WRITE(OUTPUT_LOC,331) ' Gridsum_Time_min:      ',TIME_SUMGRID_MIN
 1666.                    WRITE(OUTPUT_LOC,331) ' Gridsum_Time_comp_min: ',TIME_SUMGRID_COMP_MIN
 1667.                    WRITE(OUTPUT_LOC,331) ' Gridsum_Time_comm_min: ',TIME_SUMGRID_COMM_MIN
 1668.                 END IF
 1669.           
 1670.                 IF (NUMPES /= 1.AND.MG_PERF%NUM_ALLREDUCES /= 0) THEN
 1671.                    WRITE(OUTPUT_LOC,*) 'Number_Reduce: ',MG_PERF%NUM_ALLREDUCES
 1672.                    WRITE(OUTPUT_LOC,*) 'Reduce_words: ',MG_PERF%ALLREDUCE_COUNT
 1673.                    WRITE(OUTPUT_LOC,*) 'Reduce_bytes: ',MG_PERF%ALLREDUCE_COUNT*SIZE_OF_DATA
 1674.                 END IF
 1675.           
 1676.                 CLOSE(UNIT=8)
 1677.           
 1678.                 ! Format statements
 1679.           
 1680.            100  FORMAT ( ' =================================================' )
 1681.           
 1682.            101  FORMAT ( '      Global Grid Dimension: ', I8, ', ', I8, ', ', I8 )
 1683.            102  FORMAT ( '      Local Grid Dimension : ', I8, ', ', I8, ', ', I8 )
 1684.           
 1685.            103  FORMAT ( ' Number of variables: ', I2 )
 1686.            104  FORMAT( ' Number of variables reduced each time step: ', I2, '; requested  ', I3, '%.')
 1687.           
 1688.            110  FORMAT ( '      Time steps: ', I6 )
 1689.           
 1690.            120  FORMAT ( '      Task grid: ', I5, ',', I5, ',', I5 )
 1691.           
 1692.            121  FORMAT ( ' 1 process executing on machine ', A30,  // &
 1693.                        ' Program execution at ', A10, ' on ', A8, '.' )
 1694.           
 1695.            122  FORMAT ( I4, ' processes executing on machine ', A30,  // &
 1696.                        ' Program execution at ', A10, ' on ', A8, '.' )
 1697.            123  FORMAT ( A32, ', ', A10, ' on ', A8, '.' )
 1698.           
 1699.            130  FORMAT ( ' Total time for test (sec): ',  1PE9.3, '; clock resolution is ', 1PE9.3 ,' per second.' )
 1700.           
 1701.            131  FORMAT ( A30, 1PE12.3 )
 1702.            132  FORMAT ( A44, 1PE12.3, 1PE12.3 )
 1703.            133  FORMAT ( A44, 1PE12.3, ', ', 1PE12.3, '; ', 1PE12.3, ', ', 1PE12.3 )
 1704.            134  FORMAT ( A63, I8, ', ', 1PE12.3, ', ', 1PE12.3, '; ', I8, ', ', 1PE12.3, ', ', 1PE12.3 )
 1705.           
 1706.            140  FORMAT ( '       Time : avg, min, max secs:', 1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3 )
 1707.           
 1708.            150  FORMAT ( '       Avg (total,pack,send,wait,recv,unpack secs):    ', 1PE9.3, ', ', 1PE9.3, ', ', &
 1709.                          1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3 )
 1710.            151  FORMAT ( '       StdDev (total,pack,send,wait,recv,unpack secs): ', 1PE9.3, ', ', 1PE9.3, ', ', &
 1711.                          1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3 )
 1712.            152  FORMAT ( '       Max (total,pack,send,wait,recv,unpack secs):    ', 1PE9.3, ', ', 1PE9.3, ', ', &
 1713.                          1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3 )
 1714.            153  FORMAT ( '       Min (total,pack,send,wait,recv,unpack secs):    ', 1PE9.3, ', ', 1PE9.3, ', ', &
 1715.                          1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3 )
 1716.           
 1717.            161  FORMAT ( '       Avg (total,compute,reduce secs): ', 1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3)
 1718.            162  FORMAT ( '       Max (total,compute,reduce secs): ', 1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3)
 1719.            163  FORMAT ( '       Min (total,compute,reduce secs): ', 1PE9.3, ', ', 1PE9.3, ', ', 1PE9.3)
 1720.           
 1721.            ! Comm reporting.
 1722.            171  FORMAT ( '     ', I3, '     ', 0PE9.3, '     ', F9.3, ' (Max wallclock)' )
 1723.            172  FORMAT ( '     ', I3, '     ', 0PE9.3, '     ', F9.3, ' (Min wallclock)' )
 1724.            173  FORMAT ( '     ', I3, '     ', 0PE9.3, '     ', F9.3 )
 1725.           
 1726.            200  FORMAT ( ' ================== End report ===================' )
 1727.           
 1728.            301  FORMAT(' Global_Grid_X: ',I8,/ ' Global_Grid_Y: ',I8,/ ' Global_Grid_Z: ',I8)
 1729.            302  FORMAT(' Local_Grid_X: ',I8,/ ' Local_Grid_Y: ',I8,/ ' Local_Grid_Z: ',I8)
 1730.            303  FORMAT(' Number_variables: ',I2)
 1731.            304  FORMAT(' Number_reduced: ',I2,/ ' Percent_reduced: ',I3)
 1732.            310  FORMAT(' Time_steps: ',I6)
 1733.            320  FORMAT(' Task_grid_X: ',I5,/ ' Task_grid_Y: ',I5,/ ' Task_grid_Z: ',I5)
 1734.            322  FORMAT(' processes: ',I4,/ ' machine: ', A30, / &
 1735.                        ' Program_execution_at: ',A10,/ ' Program_execution_date: ',A8)
 1736.            330  FORMAT(' Total_time: ',1PE9.3,/ ' clock_resolution: ',1PE9.3)
 1737.            331  FORMAT(A24,1PE12.3)
 1738.            335  FORMAT( ' Error_tolerance: ', 1PE12.6 )
 1739.            340  FORMAT(' Comp_time_ave: ',1PE9.3,/ ' Comp_time_min: ',1PE9.3,/ ' Comp_time_max: ', 1PE9.3)
 1740.            350  FORMAT(5(A20,1PE9.3,/),A20,1PE9.3)
 1741.           
 1742.           #elif defined _MG_SERIAL
 1743.    D      
 1744.    D            TIME_WALL_MAX    = MG_PERF%TIME_WALL_PE
 1745.    D            TIME_STENCIL_MAX = MG_PERF%TIME_STENCIL_PE
 1746.    D            TIME_SUMGRID_SUM = MG_PERF%TIME_SUMGRID_PE
 1747.    D      
 1748.    D            GNUM_ADDS  = MG_PERF%NUM_ADDS
 1749.    D            GNUM_DIVIDES = MG_PERF%NUM_DIVIDES
 1750.    D      
 1751.    D            CALL DATE_AND_TIME ( TEST_DATE, TEST_TIME )
 1752.    D      
 1753.    D            CALL SYSTEM_CLOCK ( IDUM, ICLOCK_RATE )
 1754.    D            CLOCK_RES = REAL(ICLOCK_RATE)
 1755.    D      
 1756.    D            IF ( REPORT_PERF > 0 ) THEN
 1757.    D      
 1758.    D               DO J = 1, 2
 1759.    D      
 1760.    D                  ! Write data to stdout or file:
 1761.    D      
 1762.    D                  IF ( J == 1 ) THEN 
 1763.    D                     OUTPUT_LOC = 6 ! STDOUT
 1764.    D                  ELSE IF ( J == 2 ) THEN
 1765.    D                     OUTPUT_LOC = 8 
 1766.    D                     OPEN ( UNIT=OUTPUT_LOC, FILE = 'results.txt' )
 1767.    D                  END IF
 1768.    D      
 1769.    D                  WRITE(OUTPUT_LOC,*)
 1770.    D                  WRITE(OUTPUT_LOC,100)
 1771.    D                  WRITE(OUTPUT_LOC,*) '          Mantevo miniapp MiniGhost experiment'
 1772.    D                  WRITE(OUTPUT_LOC,100)
 1773.    D      
 1774.    D                  WRITE(OUTPUT_LOC,*)
 1775.    D                  WRITE(OUTPUT_LOC,102) NX, NY, NZ
 1776.    D                  WRITE(OUTPUT_LOC,*)
 1777.    D                  WRITE(OUTPUT_LOC,103) NUM_VARS
 1778.    D                  WRITE(OUTPUT_LOC,104) NUM_SUM_GRID, PERCENT_SUM
 1779.    D                  WRITE(OUTPUT_LOC,*)
 1780.    D                  WRITE(OUTPUT_LOC,110) NUM_TSTEPS
 1781.    D                  WRITE(OUTPUT_LOC,*)
 1782.    D            
 1783.    D                  WRITE(OUTPUT_LOC,121) TEST_MACHINE, TEST_TIME, TEST_DATE
 1784.    D         
 1785.    D                  WRITE(OUTPUT_LOC,*)
 1786.    D                  WRITE(OUTPUT_LOC,130) TIME_WALL_MAX, CLOCK_RES
 1787.    D                  WRITE(OUTPUT_LOC,*)
 1788.    D            
 1789.    D                  IF ( STENCIL /= STENCIL_NONE ) THEN
 1790.    D            
 1791.    D                     GFLOPS = REAL(NUM_TSTEPS) * REAL(GNUM_ADDS + GNUM_DIVIDES) / TIME_WALL_MAX / GIGA
 1792.    D         
 1793.    D                     WRITE(OUTPUT_LOC,*) '-------------------------------------------------'
 1794.    D                     WRITE(OUTPUT_LOC,*) '          Computational performance:'
 1795.    D                     WRITE(OUTPUT_LOC,*) '-------------------------------------------------'
 1796.    D                     WRITE(OUTPUT_LOC,*)
 1797.    D                     WRITE(OUTPUT_LOC,131) '       Total GFLOPS:               ', GFLOPS
 1798.    D                     WRITE(OUTPUT_LOC,*)
 1799.    D                     WRITE(OUTPUT_LOC,131) '       Total floating point ops:   ', REAL(NUM_TSTEPS) * REAL(GNUM_ADDS + GNUM_DIVIDES)
 1800.    D                     WRITE(OUTPUT_LOC,*)
 1801.    D                     WRITE(OUTPUT_LOC,131) '          Sums:                    ', REAL(NUM_TSTEPS) * REAL(GNUM_ADDS)
 1802.    D                     WRITE(OUTPUT_LOC,131) '          Mult:                    ', REAL(NUM_TSTEPS) * REAL(GNUM_DIVIDES)
 1803.    D                     WRITE(OUTPUT_LOC,*)
 1804.    D                     WRITE(OUTPUT_LOC,*) '       Number of spikes set: ', NUM_SPIKES
 1805.    D                  ELSE
 1806.    D                     WRITE(OUTPUT_LOC,*)  '  *** No computation *** '
 1807.    D                  END IF
 1808.    D         
 1809.    D                  IF ( OUTPUT_LOC == 8 ) &
 1810.    D                     CLOSE ( UNIT = 8 )
 1811.    D      
 1812.    D               END DO
 1813.    D      
 1814.    D            END IF ! REPORT_PERF > 0
 1815.    D      
 1816.    D            ! yaml output
 1817.    D      
 1818.    D            OUTPUT_LOC = 8
 1819.    D            OPEN(UNIT=8, FILE = 'results.yaml')
 1820.    D      
 1821.    D            CALL ENV(OUTPUT_LOC)
 1822.    D      
 1823.    D            SELECT CASE (STENCIL)
 1824.    D               CASE (STENCIL_NONE)
 1825.    D                  WRITE(OUTPUT_LOC,*) 'Computation: None'
 1826.    D               CASE (STENCIL_2D5PT)
 1827.    D                  WRITE(OUTPUT_LOC,*) 'Computation: 5-point difference stencil on a 2D grid (STENCIL_2D5PT)'
 1828.    D               CASE (STENCIL_2D9PT)
 1829.    D                  WRITE(OUTPUT_LOC,*) 'Computation: 9-point difference stencil on a 2D grid (STENCIL_2D9PT)'
 1830.    D               CASE (STENCIL_3D7PT)
 1831.    D                  WRITE(OUTPUT_LOC,*) 'Computation: 7-point difference stencil on a 3D grid (STENCIL_3D7PT)'
 1832.    D               CASE (STENCIL_3D27PT)
 1833.    D                  WRITE(OUTPUT_LOC,*) 'Computation: 27-point difference stencil on a 3D grid (STENCIL_3D27PT)'
 1834.    D            END SELECT
 1835.    D      
 1836.    D            WRITE(OUTPUT_LOC,301) NX, NY, NZ
 1837.    D            WRITE(OUTPUT_LOC,303) NUM_VARS
 1838.    D            WRITE(OUTPUT_LOC,304) NUM_SUM_GRID, PERCENT_SUM
 1839.    D            WRITE(OUTPUT_LOC,310) NUM_TSTEPS
 1840.    D      
 1841.    D            IF (SCALING == SCALING_STRONG) THEN
 1842.    D               WRITE(OUTPUT_LOC,*) 'Scaling: strong'
 1843.    D            ELSE
 1844.    D               WRITE(OUTPUT_LOC,*) 'Scaling: weak'
 1845.    D            END IF
 1846.    D      
 1847.    D            WRITE(OUTPUT_LOC,422) TEST_MACHINE, TEST_TIME, TEST_DATE
 1848.    D            WRITE(OUTPUT_LOC,330) TIME_WALL_MAX, CLOCK_RES
 1849.    D      
 1850.    D            WRITE(OUTPUT_LOC,422) TEST_MACHINE, TEST_TIME, TEST_DATE
 1851.    D            WRITE(OUTPUT_LOC,330) TIME_WALL_MAX, CLOCK_RES
 1852.    D      
 1853.    D            WRITE(OUTPUT_LOC,440) TIME_STENCIL_MAX
 1854.    D            GFLOPS = REAL(NUM_TSTEPS) * REAL(GNUM_ADDS + GNUM_DIVIDES) / TIME_WALL_MAX / GIGA
 1855.    D            WRITE(OUTPUT_LOC,331) ' GFLOPS_Total:          ', GFLOPS
 1856.    D            WRITE(OUTPUT_LOC,331) ' FLOPS_Total:           ', REAL(NUM_TSTEPS)*REAL(GNUM_ADDS + GNUM_DIVIDES)
 1857.    D            WRITE(OUTPUT_LOC,331) ' FLOPS_Sums:            ', REAL(NUM_TSTEPS)*REAL(GNUM_ADDS)
 1858.    D            WRITE(OUTPUT_LOC,331) ' FLOPS_Divide:          ', REAL(NUM_TSTEPS) * REAL(GNUM_DIVIDES)
 1859.    D            WRITE(OUTPUT_LOC,*) 'Number_spikes: ', NUM_SPIKES
 1860.    D      
 1861.    D            100  FORMAT ( ' =================================================' )
 1862.    D      
 1863.    D       102  FORMAT ( '      Grid Dimension : ', I8, ', ', I8, ', ', I8 )
 1864.    D      
 1865.    D       103  FORMAT ( ' Number of variables: ', I2 )
 1866.    D       104  FORMAT( ' Number of variables reduced each time step: ', I2, '; requested  ', I3, '%.')
 1867.    D      
 1868.    D       110  FORMAT ( '      Time steps: ', I6 )
 1869.    D      
 1870.    D       121  FORMAT ( ' Process executing on machine ', A30,  // &
 1871.    D                   ' Program execution at ', A10, ' on ', A8, '.' )
 1872.    D       123  FORMAT ( A32, ', ', A10, ' on ', A8, '.' )
 1873.    D      
 1874.    D       130  FORMAT ( ' Total time for test (sec): ',  1PE9.3, '; clock resolution is ', 1PE9.3 ,' per second.' )
 1875.    D       
 1876.    D       131  FORMAT ( A30, 1PE12.3 )
 1877.    D      
 1878.    D       200  FORMAT ( ' ================== End report ===================' )
 1879.    D      
 1880.    D       301  FORMAT(' Grid_X: ',I8,/ ' Grid_Y: ',I8,/ ' Grid_Z: ',I8)
 1881.    D       303  FORMAT(' Number_variables: ',I2)
 1882.    D       304  FORMAT(' Number_reduced: ',I2,/ ' Percent_reduced: ',I3,'%')
 1883.    D       310  FORMAT(' Time_steps: ',I6)
 1884.    D       335  FORMAT( ' Error_tolerance: ', 1PE12.6 )
 1885.    D       422  FORMAT(' Serial_execution_on_machine: ', A30, / &
 1886.    D                   ' Program_execution_at: ',A10,/ ' Program_execution_date: ',A8)
 1887.    D       330  FORMAT(' Total_time: ',1PE9.3,/ ' clock_resolution: ',1PE9.3)
 1888.    D       331  FORMAT(A24,1PE12.3)
 1889.    D       440  FORMAT(' Comp_time_ave: ',1PE9.3)
 1890.    D       350  FORMAT(5(A20,1PE9.3,/),A20,1PE9.3)
 1891.    D      
 1892.           #endif ! _MG_MPI or _MG_SERIAL
 1893.           
 1894.                 END SUBROUTINE MG_PERF_REPORT
ftn-5001 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Local variable "TIME_WALL_STDDEV" is assigned a value but never used.

ftn-5001 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Local variable "TIME_COMM_METHOD_STDDEV" is assigned a value but never used.

ftn-5001 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Local variable "TIME_SUMGRID_STDDEV" is assigned a value but never used.

ftn-5001 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Local variable "TIME_SUMGRID_COMP_STDDEV" is assigned a value but never used.

ftn-5001 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Local variable "TIME_SUMGRID_COMM_STDDEV" is assigned a value but never used.

ftn-5002 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Local variable "IDUM" is declared but neither defined nor used.

ftn-5002 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Local variable "ICLOCK_RATE" is declared but neither defined nor used.

ftn-5002 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Local variable "GNUM_COPY" is declared but neither defined nor used.

ftn-5002 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Local variable "LEN" is declared but neither defined nor used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "IALLREDUCE_COUNT" is not used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "INUM_ALLREDUCES" is not used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "INUM_ADDS" is not used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "INUM_SENDS" is not used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "INUM_RECVS" is not used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "INUM_SUMGRID" is not used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "INUM_DIVIDES" is not used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "INUM_COPYS" is not used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "IRECV_COUNT" is not used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "ISEND_COUNT" is not used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "INUM_BCASTS" is not used.

ftn-5008 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Named Constant "IBCAST_COUNT" is not used.

ftn-5011 ftn: NOTE MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1894 
  Label "123" is unused.

 1895.           
 1896.           END MODULE MG_PROFILING_MOD

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 523, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 526, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 528, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 531, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 533, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 536, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 538, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 541, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 543, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 546, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 548, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 551, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 553, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 556, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 558, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 561, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 563, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 566, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 568, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 571, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 573, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 576, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 578, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 581, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 583, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 586, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 588, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 591, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 593, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 596, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 598, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 601, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 603, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 606, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 608, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 611, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 613, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 616, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 618, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 621, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 623, Column = 12 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 626, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 632, Column = 18 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 635, Column = 18 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 639, Column = 18 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 642, Column = 18 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 653, Column = 18 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 656, Column = 18 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 661, Column = 15 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 664, Column = 15 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 666, Column = 15 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 669, Column = 15 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 671, Column = 15 
  "mpi_gather" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 674, Column = 15 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 680, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 683, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 688, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 691, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 694, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 697, Column = 12 
  "mg_assert" (called from "mg_perf_report") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 784, Column = 12 
  "mpi_reduce" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 791, Column = 12 
  "mpi_reduce" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 798, Column = 12 
  "mpi_reduce" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 865 
  A loop starting at line 865 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 865 
  A loop starting at line 865 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 871, Column = 26 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 877 
  A loop starting at line 877 was unrolled 4 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 877 
  A loop starting at line 877 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 883, Column = 33 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 890 
  A loop starting at line 890 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 890 
  A loop starting at line 890 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 897, Column = 29 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 899 
  A loop starting at line 899 was vectorized.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 925 
  A loop starting at line 925 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 925 
  A loop starting at line 925 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 931, Column = 26 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 936 
  A loop starting at line 936 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 936 
  A loop starting at line 936 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 942, Column = 26 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 947 
  A loop starting at line 947 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 947 
  A loop starting at line 947 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 953, Column = 26 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 958 
  A loop starting at line 958 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 958 
  A loop starting at line 958 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 964, Column = 26 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 969 
  A loop starting at line 969 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 969 
  A loop starting at line 969 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 975, Column = 26 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 980 
  A loop starting at line 980 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 980 
  A loop starting at line 980 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 986, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 991 
  A loop starting at line 991 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 991 
  A loop starting at line 991 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 997, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1002 
  A loop starting at line 1002 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1002 
  A loop starting at line 1002 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1008, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1013 
  A loop starting at line 1013 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1013 
  A loop starting at line 1013 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1019, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1024 
  A loop starting at line 1024 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1024 
  A loop starting at line 1024 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1030, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1035 
  A loop starting at line 1035 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1035 
  A loop starting at line 1035 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1041, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1046 
  A loop starting at line 1046 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1046 
  A loop starting at line 1046 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1052, Column = 30 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1057 
  A loop starting at line 1057 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1057 
  A loop starting at line 1057 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1063, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1068 
  A loop starting at line 1068 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1068 
  A loop starting at line 1068 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1074, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1079 
  A loop starting at line 1079 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1079 
  A loop starting at line 1079 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1085, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1090 
  A loop starting at line 1090 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1090 
  A loop starting at line 1090 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1096, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1101 
  A loop starting at line 1101 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1101 
  A loop starting at line 1101 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1107, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1112 
  A loop starting at line 1112 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1112 
  A loop starting at line 1112 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1118, Column = 30 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1123 
  A loop starting at line 1123 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1123 
  A loop starting at line 1123 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1129, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1134 
  A loop starting at line 1134 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1134 
  A loop starting at line 1134 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1140, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1145 
  A loop starting at line 1145 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1145 
  A loop starting at line 1145 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1151, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1156 
  A loop starting at line 1156 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1156 
  A loop starting at line 1156 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1162, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1167 
  A loop starting at line 1167 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1167 
  A loop starting at line 1167 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1173, Column = 28 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1178 
  A loop starting at line 1178 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1178 
  A loop starting at line 1178 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1184, Column = 30 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1190 
  A loop starting at line 1190 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1190 
  A loop starting at line 1190 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1196, Column = 32 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1201 
  A loop starting at line 1201 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1201 
  A loop starting at line 1201 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1207, Column = 37 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-6005 ftn: SCALAR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1212 
  A loop starting at line 1212 was unrolled 2 times.

ftn-6204 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1212 
  A loop starting at line 1212 was vectorized.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1218, Column = 37 
  "mg_compute_stddev" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.

ftn-3021 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1223, Column = 24 
  "mpi_wtick" (called from "mg_perf_report") was not inlined because the compiler was unable to locate the routine.

ftn-6262 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1227 
  A loop starting at line 1227 was not vectorized because it contains a call to a subroutine or function on line 1235.

ftn-6286 ftn: VECTOR MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1469 
  A loop starting at line 1469 was not vectorized because it contains input/output operations at line 1471.

ftn-3171 ftn: IPA MG_PERF_REPORT, File = MG_PROFILING.F, Line = 1501, Column = 12 
  "env" (called from "mg_perf_report") was not inlined because it is not in the body of a loop.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
             C r o s s   R e f e r e n c e   for   MG_PROFILING_MOD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                                      Storage/Owner                   
----                                      -------------                   

10                                                                        
  Statement label
  Declared      1419
  Defined   
  Referenced    1339

100                                                                       
  FORMAT label
  Declared      1680
  Defined   
  Referenced

101                                                                       
  FORMAT label
  Declared      1682
  Defined   
  Referenced

102                                                                       
  FORMAT label
  Declared      1683
  Defined   
  Referenced

103                                                                       
  FORMAT label
  Declared      1685
  Defined   
  Referenced

104                                                                       
  FORMAT label
  Declared      1686
  Defined   
  Referenced

110                                                                       
  FORMAT label
  Declared      1688
  Defined   
  Referenced

120                                                                       
  FORMAT label
  Declared      1690
  Defined   
  Referenced

121                                                                       
  FORMAT label
  Declared      1692
  Defined   
  Referenced

122                                                                       
  FORMAT label
  Declared      1695
  Defined   
  Referenced

123                                                                       
  FORMAT label
  Declared      1697
  Defined   
  Referenced

130                                                                       
  FORMAT label
  Declared      1699
  Defined   
  Referenced

131                                                                       
  FORMAT label
  Declared      1701
  Defined   
  Referenced

132                                                                       
  FORMAT label
  Declared      1702
  Defined   
  Referenced

133                                                                       
  FORMAT label
  Declared      1703
  Defined   
  Referenced

134                                                                       
  FORMAT label
  Declared      1704
  Defined   
  Referenced

140                                                                       
  FORMAT label
  Declared      1706
  Defined   
  Referenced

150                                                                       
  FORMAT label
  Declared      1708
  Defined   
  Referenced

151                                                                       
  FORMAT label
  Declared      1710
  Defined   
  Referenced

152                                                                       
  FORMAT label
  Declared      1712
  Defined   
  Referenced

153                                                                       
  FORMAT label
  Declared      1714
  Defined   
  Referenced

161                                                                       
  FORMAT label
  Declared      1717
  Defined   
  Referenced

162                                                                       
  FORMAT label
  Declared      1718
  Defined   
  Referenced

163                                                                       
  FORMAT label
  Declared      1719
  Defined   
  Referenced

171                                                                       
  FORMAT label
  Declared      1722
  Defined   
  Referenced

172                                                                       
  FORMAT label
  Declared      1723
  Defined   
  Referenced

173                                                                       
  FORMAT label
  Declared      1724
  Defined   
  Referenced

20                                                                        
  Statement label
  Declared      1487
  Defined   
  Referenced    1433

200                                                                       
  FORMAT label
  Declared      1726
  Defined   
  Referenced

301                                                                       
  FORMAT label
  Declared      1728
  Defined   
  Referenced

302                                                                       
  FORMAT label
  Declared      1729
  Defined   
  Referenced

303                                                                       
  FORMAT label
  Declared      1730
  Defined   
  Referenced

304                                                                       
  FORMAT label
  Declared      1731
  Defined   
  Referenced

310                                                                       
  FORMAT label
  Declared      1732
  Defined   
  Referenced

320                                                                       
  FORMAT label
  Declared      1733
  Defined   
  Referenced

322                                                                       
  FORMAT label
  Declared      1734
  Defined   
  Referenced

330                                                                       
  FORMAT label
  Declared      1736
  Defined   
  Referenced

331                                                                       
  FORMAT label
  Declared      1737
  Defined   
  Referenced

335                                                                       
  FORMAT label
  Declared      1738
  Defined   
  Referenced

340                                                                       
  FORMAT label
  Declared      1739
  Defined   
  Referenced

350                                                                       
  FORMAT label
  Declared      1740
  Defined   
  Referenced

ALLREDUCE_COUNT                           Structure offset=1024           
  Integer(kind=8), Component of PERF_CHECK
  Declared        71
  Defined   
  Referenced     146    1443    1672    1673

ALLREDUCE_COUNT_MAX                       Structure offset=1088           
  Integer(kind=8), Component of PERF_CHECK
  Declared        72
  Defined   
  Referenced     153     722

ALLREDUCE_COUNT_MIN                       Structure offset=1152           
  Integer(kind=8), Component of PERF_CHECK
  Declared        73
  Defined   
  Referenced     158     753

BCAST_COUNT                               Structure offset=768            
  Integer(kind=8), Component of PERF_CHECK
  Declared        66
  Defined   
  Referenced     144    1456

BCAST_COUNT_MAX                           Structure offset=832            
  Integer(kind=8), Component of PERF_CHECK
  Declared        67
  Defined   
  Referenced     152     720

BCAST_COUNT_MIN                           Structure offset=896            
  Integer(kind=8), Component of PERF_CHECK
  Declared        68
  Defined   
  Referenced     157     747

CLOCK_RES                                 Static offset=0                 
  Variable, Real(kind=4), Initialized, Save
  Declared       289
  Defined       1223
  Referenced    1313    1537

COMM_METHOD                               MG_PERF_REPORT                  
  Dummy Argument, Integer(kind=4), Intent(in)
  Declared       199     205
  Defined   
  Referenced     628    1244    1503

COMM_METHOD_BSPMA                         Module MG_OPTIONS_MOD           
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     630    1245    1504
  Referenced in contained procedure

COMM_METHOD_SVAF                          Module MG_OPTIONS_MOD           
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     637    1249    1506
  Referenced in contained procedure

DATE_AND_TIME                                                             
  Subroutine, Intrinsic
  Declared  
  Defined   
  Referenced    1221

ENV                                       Module MG_ENV_MOD               
  Subroutine, Module procedure
  Declared  
  Defined   
  Referenced    1501

ENV                                       Module MG_ENV_MOD               
  Subroutine, Module procedure
  Declared  
  Defined   
  Referenced    1501

ERROR_TOL                                 Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc
  Declared  
  Defined   
  Referenced    1540
  Referenced in contained procedure

GALLREDUCE_COUNT_MAX                      Stack                           
  Variable, Integer(kind=8)
  Declared       277
  Defined        831
  Referenced    1446

GALLREDUCE_COUNT_MIN                      Stack                           
  Variable, Integer(kind=8)
  Declared       278
  Defined        849
  Referenced    1445

GBCAST_COUNT_MAX                          Stack                           
  Variable, Integer(kind=8)
  Declared       274
  Defined        829
  Referenced    1459

GBCAST_COUNT_MIN                          Stack                           
  Variable, Integer(kind=8)
  Declared       275
  Defined        847
  Referenced    1458

GFLOPS                                    Stack                           
  Variable, Real(kind=8)
  Declared       292
  Defined       1318    1542
  Referenced    1326    1327    1543    1544

GIGA                                                                      
  Parameter, Real(kind=8)
  Declared       509
  Defined   
  Referenced    1318    1542

GNUM_ADDS                                 Stack                           
  Variable, Integer(kind=8)
  Declared       252
  Defined        810
  Referenced    1318    1329    1331    1542    1545    1546

GNUM_COPY                                 Stack                           
  Variable, Integer(kind=8)
  Declared       254
  Defined   
  Referenced

GNUM_DIVIDES                              Stack                           
  Variable, Integer(kind=8)
  Declared       253
  Defined        812     814
  Referenced    1318    1329    1332    1542    1545    1547

GNUM_RECVS                                Stack                           
  Variable, Integer(kind=8)
  Declared       265
  Defined        820
  Referenced    1370    1585

GNUM_SENDS                                Stack                           
  Variable, Integer(kind=8)
  Declared       256
  Defined        816
  Referenced    1355    1571

GRECV_COUNT                               Stack                           
  Variable, Integer(kind=8)
  Declared       266
  Defined        822
  Referenced    1372    1586    1587

GRECV_COUNT_MAX                           Stack                           
  Variable, Integer(kind=8)
  Declared       267
  Defined        827
  Referenced    1375    1590    1591

GRECV_COUNT_MIN                           Stack                           
  Variable, Integer(kind=8)
  Declared       268
  Defined        845
  Referenced    1374    1588    1589

GRECV_NODE_COUNT_MAX                      Stack                           
  Variable, Integer(kind=8)
  Declared       271
  Defined        840
  Referenced    1379    1380    1596    1597

GRECV_NODE_COUNT_MIN                      Stack                           
  Variable, Integer(kind=8)
  Declared       272
  Defined        858
  Referenced    1377    1378    1593    1594

GRECV_NODE_NUM_MAX                        Stack                           
  Variable, Integer(kind=8)
  Declared       269
  Defined        838
  Referenced    1379    1595

GRECV_NODE_NUM_MIN                        Stack                           
  Variable, Integer(kind=8)
  Declared       270
  Defined        856
  Referenced    1377    1592

GSEND_COUNT                               Stack                           
  Variable, Integer(kind=8)
  Declared       257
  Defined        818
  Referenced    1357    1572    1573

GSEND_COUNT_MAX                           Stack                           
  Variable, Integer(kind=8)
  Declared       258
  Defined        825
  Referenced    1360    1576    1577

GSEND_COUNT_MIN                           Stack                           
  Variable, Integer(kind=8)
  Declared       259
  Defined        843
  Referenced    1359    1574    1575

GSEND_NODE_COUNT_MAX                      Stack                           
  Variable, Integer(kind=8)
  Declared       262
  Defined        836
  Referenced    1364    1365    1582    1583

GSEND_NODE_COUNT_MIN                      Stack                           
  Variable, Integer(kind=8)
  Declared       263
  Defined        854
  Referenced    1362    1363    1579    1580

GSEND_NODE_NUM_MAX                        Stack                           
  Variable, Integer(kind=8)
  Declared       260
  Defined        834
  Referenced    1364    1581

GSEND_NODE_NUM_MIN                        Stack                           
  Variable, Integer(kind=8)
  Declared       261
  Defined        852
  Referenced    1362    1578

I                                         Stack                           
  Variable, Integer
  Declared       239
  Defined   
  Referenced     866     867     868     878     879     880     891     892     893     900     901     902     903     904     905
           906     907     908     909     910     911     912     913     914     915     916     917     918     919     926
           927     928     937     938     939     948     949     950     959     960     961     970     971     972     981
           982     983     992     993     994    1003    1004    1005    1014    1015    1016    1025    1026    1027    1036
          1037    1038    1047    1048    1049    1058    1059    1060    1069    1070    1071    1080    1081    1082    1091
          1092    1093    1102    1103    1104    1113    1114    1115    1124    1125    1126    1135    1136    1137    1146
          1147    1148    1157    1158    1159    1168    1169    1170    1179    1180    1181    1191    1192    1193    1202
          1203    1204    1213    1214    1215    1470    1471    1472    1473    1474    1475    1477    1478

IALLREDUCE_COUNT                                                          
  Parameter, Integer
  Declared       232
  Defined   
  Referenced

IBCAST_COUNT                                                              
  Parameter, Integer
  Declared       230
  Defined   
  Referenced

ICLOCK_RATE                               Stack                           
  Variable, Integer
  Declared       241
  Defined   
  Referenced

IDUM                                      Stack                           
  Variable, Integer
  Declared       242
  Defined   
  Referenced

IERR                                      MG_PERF_INIT                    
  Dummy Argument, Integer, Intent(out)
  Declared       121     129
  Defined   
  Referenced

IERR                                      MG_PERF_REPORT                  
  Dummy Argument, Integer, Intent(out)
  Declared       199     207
  Defined        515     788     795     802
  Referenced     525     526     530     531     535     536     540     541     545     546     550     551     555     556     560
           561     565     566     570     571     575     576     580     581     585     586     590     591     595     596
           600     601     605     606     610     611     615     616     620     621     625     626     634     635     641
           642     655     656     663     664     668     669     673     674     679     680     682     683     687     688
           690     691     693     694     696     697     785     786     787     792     793     794     799     800     801

INUM_ADDS                                                                 
  Parameter, Integer
  Declared       220
  Defined   
  Referenced

INUM_ALLREDUCES                                                           
  Parameter, Integer
  Declared       231
  Defined   
  Referenced

INUM_BCASTS                                                               
  Parameter, Integer
  Declared       229
  Defined   
  Referenced

INUM_COPYS                                                                
  Parameter, Integer
  Declared       222
  Defined   
  Referenced

INUM_DIVIDES                                                              
  Parameter, Integer
  Declared       221
  Defined   
  Referenced

INUM_RECVS                                                                
  Parameter, Integer
  Declared       226
  Defined   
  Referenced

INUM_SENDS                                                                
  Parameter, Integer
  Declared       224
  Defined   
  Referenced

INUM_SUMGRID                                                              
  Parameter, Integer
  Declared       234
  Defined   
  Referenced

IRECV_COUNT                                                               
  Parameter, Integer
  Declared       227
  Defined   
  Referenced

ISEND_COUNT                                                               
  Parameter, Integer
  Declared       225
  Defined   
  Referenced

J                                         Stack                           
  Variable, Integer
  Declared       240
  Defined   
  Referenced    1231    1233

LEN                                       Stack                           
  Variable, Integer
  Declared       243
  Defined   
  Referenced

MAX                                                                       
  Function, Integer, Intrinsic, Pure, Elemental
  Declared  
  Defined   
  Referenced     867     879     892     927     938     949     960     971     982     993    1004    1015    1026    1037    1048
          1059    1070    1081    1092    1103    1114    1125    1136    1147    1158    1169    1180    1192    1203    1214

MAX_THESE                                 Heap                            
  Variable, Integer(kind=8), Dimension(:), Allocatable
  Declared       281
  Defined        716     718     720     722     725     727     729     731
  Referenced     679     791

MG_ASSERT                                 Module MG_UTILS_MOD             
  Subroutine, Module procedure
  Declared  
  Defined   
  Referenced     526     526     531     531     536     536     541     541     546     546     551     551     556     556     561
           561     566     566     571     571     576     576     581     581     586     586     591     591     596     596
           601     601     606     606     611     611     616     616     621     621     626     626     635     635     642
           642     656     656     664     664     669     669     674     674     680     683     688     691     694     697

MG_ASSERT                                 Module MG_UTILS_MOD             
  Subroutine, Module procedure
  Declared  
  Defined   
  Referenced     526     526     531     531     536     536     541     541     546     546     551     551     556     556     561
           561     566     566     571     571     576     576     581     581     586     586     591     591     596     596
           601     601     606     606     611     611     616     616     621     621     626     626     635     635     642
           642     656     656     664     664     669     669     674     674     680     683     688     691     694     697

MG_COMPUTE_STDDEV                         Module MG_UTILS_MOD             
  Function, Double Precision, result(MG_COMPUTE_STDDEV), Module procedure
  Declared  
  Defined   
  Referenced     871     883     897     931     942     953     964     975     986     997    1008    1019    1030    1041    1052
          1063    1074    1085    1096    1107    1118    1129    1140    1151    1162    1173    1184    1196    1207    1218

MG_COMPUTE_STDDEV                         Module MG_UTILS_MOD             
  Function, Double Precision, result(MG_COMPUTE_STDDEV), Module procedure
  Declared  
  Defined   
  Referenced     871     883     897     931     942     953     964     975     986     997    1008    1019    1030    1041    1052
          1063    1074    1085    1096    1107    1118    1129    1140    1151    1162    1173    1184    1196    1207    1218

MG_CONSTANTS_MOD                                                          
  Module
  Declared  
  Defined   
  Referenced      34

MG_CONSTANTS_MOD                                                          
  Module, Used indirectly (from module MG_UTILS_MOD)
  Declared  
  Defined   
  Referenced

MG_ENV_MOD                                                                
  Module
  Declared  
  Defined   
  Referenced      36

MG_INT                                    Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=1), Use assoc
  Declared  
  Defined   
  Referenced     204
  Referenced in contained procedure

MG_INT8                                   Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=1), Use assoc
  Declared  
  Defined   
  Referenced      42      51      52      53      55      56      57      58      60      61      62      63      65      66      67
            68      70      71      72      73      75     251     280
  Referenced in contained procedure

MG_OPTIONS_MOD                                                            
  Module, Used indirectly (from module MG_UTILS_MOD)
  Declared  
  Defined   
  Referenced

MG_PERF                                   Static offset=0                 
  TYPE(PERF_CHECK)
  Declared       115
  Defined        135     136     137     139     140     141     142     143     144     145     146     148     150     151     152
           153     155     156     157     158     162     163     164     165     166     167     168     169     170     171
           173     174     175     176     177     179     180     181     182     183     185     186     187     188     189
           191     192     193
  Referenced     523     528     533     538     543     548     553     558     563     568     573     578     583     588     593
           598     603     608     613     618     623     632     639     653     660     661     666     671     700     702
           704     707     709     711     713     716     718     720     722     725     727     729     731     734     735
           740     741     746     747     752     753     759     760     765     766     771     772     777     778    1186
          1421    1425    1436    1440    1443    1449    1453    1456    1657    1658    1670    1671    1672    1673
  Referenced in contained procedure

MG_PERF_INIT                                                              
  Subroutine, Module procedure
  Declared       121
  Defined   
  Referenced

MG_PERF_INIT_MIN                          Static offset=0                 
  Integer(kind=8), Initialized, Save
  Declared        42
  Defined   
  Referenced

MG_PERF_REPORT                                                            
  Subroutine, Module procedure
  Declared       199
  Defined   
  Referenced

MG_PROFILING_MOD                                                          
  Module
  Declared        28
  Defined   
  Referenced

MG_REAL4                                  Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=1), Use assoc
  Declared  
  Defined   
  Referenced     288
  Referenced in contained procedure

MG_REAL8                                  Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=1), Use assoc
  Declared  
  Defined   
  Referenced      79      80      81      82      83      84      85      86      87      88      89      91      92      93      94
            95      97      98      99     100     101     103     104     105     106     107     109     110     111     291
           508
  Referenced in contained procedure

MG_UTILS_MOD                                                              
  Module
  Declared  
  Defined   
  Referenced      35

MIN                                                                       
  Function, Integer, Intrinsic, Pure, Elemental
  Declared  
  Defined   
  Referenced     866     878     891     926     937     948     959     970     981     992    1003    1014    1025    1036    1047
          1058    1069    1080    1091    1102    1113    1124    1135    1146    1157    1168    1179    1191    1202    1213

MIN_THESE                                 Heap                            
  Variable, Integer(kind=8), Dimension(:), Allocatable
  Declared       282
  Defined        735     737     741     743     747     749     753     755     760     762     766     768     772     774     778
           780
  Referenced     682     798

MPIFCMB5                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIFCMB9                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIPRIV1                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIPRIV2                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIPRIVC                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPI_COMM_WORLD                            Module MG_CONSTANTS_MOD         
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     525     530     535     540     545     550     555     560     565     570     575     580     585     590     595
           600     605     610     615     620     625     634     641     655     663     668     673     785     792     799
  Referenced in contained procedure

MPI_GATHER                                                                
  Subroutine, External
  Declared  
  Defined   
  Referenced     523     523     528     528     533     533     538     538     543     543     548     548     553     553     558
           558     563     563     568     568     573     573     578     578     583     583     588     588     593     593
           598     598     603     603     608     608     613     613     618     618     623     623     632     632     639
           639     653     653     661     661     666     666     671     671

MPI_INTEGER8                              Module MG_CONSTANTS_MOD         
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     784     791     798
  Referenced in contained procedure

MPI_MAX                                   Module MG_CONSTANTS_MOD         
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     792
  Referenced in contained procedure

MPI_MIN                                   Module MG_CONSTANTS_MOD         
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     799
  Referenced in contained procedure

MPI_REAL8                                 Module MG_CONSTANTS_MOD         
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     523     524     528     529     533     534     538     539     543     544     548     549     553     554     558
           559     563     564     568     569     573     574     578     579     583     584     588     589     593     594
           598     599     603     604     608     609     613     614     618     619     623     624     632     633     639
           640     653     654     661     662     666     667     671     672
  Referenced in contained procedure

MPI_REDUCE                                                                
  Subroutine
  Declared  
  Defined   
  Referenced     784     784     791     791     798     798

MPI_SUCCESS                               Module MG_CONSTANTS_MOD         
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     786     793     800
  Referenced in contained procedure

MPI_SUM                                   Module MG_CONSTANTS_MOD         
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     785
  Referenced in contained procedure

MPI_WTICK                                 Module MG_CONSTANTS_MOD         
  Function, Real*8, result(MPI_WTICK), Interface body
  Declared  
  Defined   
  Referenced    1223

MYPE                                      Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced     806
  Referenced in contained procedure

NPX                                       Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1289    1304    1523    1528
  Referenced in contained procedure

NPY                                       Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1289    1304    1523    1528
  Referenced in contained procedure

NPZ                                       Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1289    1304    1523    1528
  Referenced in contained procedure

NUMPES                                    Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced     865     870     877     882     890     896     899     925     930     936     941     947     952     958     963
           969     974     980     985     991     996    1002    1007    1013    1018    1024    1029    1035    1040    1046
          1051    1057    1062    1068    1073    1079    1084    1090    1095    1101    1106    1112    1117    1123    1128
          1134    1139    1145    1150    1156    1161    1167    1172    1178    1183    1190    1195    1201    1206    1212
          1217    1306    1309    1327    1339    1433    1469    1536    1544    1551
  Referenced in contained procedure

NUM_ADDS                                  Structure offset=64             
  Integer(kind=8), Component of PERF_CHECK
  Declared        52
  Defined   
  Referenced     135     700

NUM_ALLREDUCES                            Structure offset=960            
  Integer(kind=8), Component of PERF_CHECK
  Declared        70
  Defined   
  Referenced     145     752    1436    1440    1670    1671

NUM_BCASTS                                Structure offset=704            
  Integer(kind=8), Component of PERF_CHECK
  Declared        65
  Defined   
  Referenced     143     746    1449    1453

NUM_COPY                                  Structure offset=0              
  Integer(kind=8), Component of PERF_CHECK
  Declared        51
  Defined   
  Referenced     137     704

NUM_DIVIDES                               Structure offset=128            
  Integer(kind=8), Component of PERF_CHECK
  Declared        53
  Defined   
  Referenced     136     702

NUM_PARAMS                                                                
  Parameter, Integer
  Declared       236
  Defined   
  Referenced     679     680     682     683     687     688     690     691     693     694     696     697

NUM_RECVS                                 Structure offset=448            
  Integer(kind=8), Component of PERF_CHECK
  Declared        60
  Defined   
  Referenced     141     711     729     740     771     772

NUM_SENDS                                 Structure offset=192            
  Integer(kind=8), Component of PERF_CHECK
  Declared        55
  Defined   
  Referenced     139     707     725     734     759     760

NUM_SPIKES                                Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1334    1548
  Referenced in contained procedure

NUM_SUMGRID                               Structure offset=1216           
  Integer(kind=8), Component of PERF_CHECK
  Declared        75
  Defined   
  Referenced     148     660    1186    1421    1425    1657    1658

NUM_SUM_GRID                              Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced    1293    1526
  Referenced in contained procedure

NUM_TO_MAX                                Stack                           
  Variable, Integer
  Declared       244
  Defined        715     717     719     721     724     726     728     730     824     826     828     830     833     835     837
           839
  Referenced     716     718     720     722     725     727     729     731     791     825     827     829     831     834     836
           838     840

NUM_TO_MIN                                Stack                           
  Variable, Integer
  Declared       245
  Defined        733     739     745     751     757     764     770     776     782     842     844     846     848     851     853
           855     857
  Referenced     735     737     741     743     747     749     753     755     760     762     766     768     772     774     778
           780     798     843     845     847     849     852     854     856     858

NUM_TO_SUM                                Stack                           
  Variable, Integer
  Declared       246
  Defined        699     701     703     705     708     710     712     809     811     813     815     817     819     821
  Referenced     700     702     704     707     709     711     713     784     810     812     814     816     818     820     822

NUM_TSTEPS                                Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1295    1318    1329    1331    1332    1527    1542    1545    1546    1547
  Referenced in contained procedure

NUM_VARS                                  Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1292    1525
  Referenced in contained procedure

NX                                        Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1289    1290    1523    1524
  Referenced in contained procedure

NY                                        Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1289    1290    1523    1524
  Referenced in contained procedure

NZ                                        Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1289    1290    1523    1524
  Referenced in contained procedure

OUTPUT_LOC                                Stack                           
  Variable, Integer
  Declared       247
  Defined       1232    1234    1498
  Referenced    1238    1239    1240    1241    1243    1247    1251    1255    1258    1264    1268    1272    1276    1280    1284
          1288    1289    1290    1291    1292    1293    1294    1295    1296    1299    1301    1303    1304    1305    1307
          1309    1312    1313    1314    1320    1321    1322    1323    1324    1325    1326    1327    1328    1329    1330
          1331    1332    1333    1334    1336    1342    1343    1344    1345    1346    1347    1348    1349    1350    1351
          1353    1354    1355    1356    1357    1358    1361    1367    1368    1369    1370    1371    1372    1373    1376
          1382    1383    1384    1385    1387    1389    1391    1394    1395    1396    1397    1399    1401    1403    1406
          1407    1408    1409    1411    1413    1415    1417    1422    1423    1424    1425    1426    1427    1428    1429
          1430    1437    1438    1439    1440    1441    1442    1444    1450    1451    1452    1453    1454    1455    1457
          1464    1465    1466    1467    1468    1471    1474    1477    1483    1484    1485    1489    1501    1505    1507
          1512    1514    1516    1518    1520    1523    1524    1525    1526    1527    1528    1531    1533    1536    1537
          1540    1541    1543    1544    1545    1546    1547    1548    1552    1558    1564    1571    1572    1573    1574
          1575    1576    1577    1578    1579    1580    1581    1582    1583    1585    1586    1587    1588    1589    1590
          1591    1592    1593    1594    1595    1596    1597    1599    1605    1611    1618    1624    1630    1637    1643
          1649    1658    1659    1660    1661    1662    1663    1664    1665    1666    1667    1671    1672    1673

PERCENT_SUM                               Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1293    1526
  Referenced in contained procedure

PERF_CHECK                                                                
  Derived type
  Declared        44
  Defined   
  Referenced     115

REAL                                                                      
  Function, Real, Intrinsic, Pure, Elemental
  Declared  
  Defined   
  Referenced     870     882     896     930     941     952     963     974     985     996    1007    1018    1029    1040    1051
          1062    1073    1084    1095    1106    1117    1128    1139    1150    1161    1172    1183    1195    1206    1217
          1223    1318    1327    1329    1331    1332    1355    1357    1359    1360    1362    1363    1364    1365    1370
          1372    1374    1375    1377    1378    1379    1380    1425    1440    1443    1445    1446    1453    1456    1458
          1459    1542    1544    1545    1546    1547

RECV_COUNT                                Structure offset=512            
  Integer(kind=8), Component of PERF_CHECK
  Declared        61
  Defined   
  Referenced     142     713     731     777     778

RECV_COUNT_MAX                            Structure offset=576            
  Integer(kind=8), Component of PERF_CHECK
  Declared        62
  Defined   
  Referenced     151     718

RECV_COUNT_MIN                            Structure offset=640            
  Integer(kind=8), Component of PERF_CHECK
  Declared        63
  Defined   
  Referenced     156     741

REPORT_PERF                               Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1225    1462
  Referenced in contained procedure

ROOT_PE                                   Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced     525     530     535     540     545     550     555     560     565     570     575     580     585     590     595
           600     605     610     615     620     625     634     641     655     663     668     673     785     792     799
           806
  Referenced in contained procedure

SCALING                                   Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced    1298    1530
  Referenced in contained procedure

SCALING_STRONG                            Module MG_OPTIONS_MOD           
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced    1298    1530
  Referenced in contained procedure

SEND_COUNT                                Structure offset=256            
  Integer(kind=8), Component of PERF_CHECK
  Declared        56
  Defined   
  Referenced     140     709     727     765     766

SEND_COUNT_MAX                            Structure offset=320            
  Integer(kind=8), Component of PERF_CHECK
  Declared        57
  Defined   
  Referenced     150     716

SEND_COUNT_MIN                            Structure offset=384            
  Integer(kind=8), Component of PERF_CHECK
  Declared        58
  Defined   
  Referenced     155     735

SIZE_OF_DATA                                                              
  Parameter, Integer
  Declared       506
  Defined   
  Referenced    1357    1359    1360    1363    1365    1372    1374    1375    1378    1380    1443    1445    1446    1456    1458
          1459    1573    1575    1577    1580    1583    1587    1589    1591    1594    1597    1673

STENCIL                                   MG_PERF_REPORT                  
  Dummy Argument, Integer(kind=4), Intent(in)
  Declared       199     205
  Defined   
  Referenced     650     885    1260    1316    1510    1539

STENCIL_2D5PT                             Module MG_OPTIONS_MOD           
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     647    1266    1513
  Referenced in contained procedure

STENCIL_2D9PT                             Module MG_OPTIONS_MOD           
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     648    1270    1515
  Referenced in contained procedure

STENCIL_3D27PT                            Module MG_OPTIONS_MOD           
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     650    1278    1519
  Referenced in contained procedure

STENCIL_3D7PT                             Module MG_OPTIONS_MOD           
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     649    1274    1517
  Referenced in contained procedure

STENCIL_NONE                              Module MG_OPTIONS_MOD           
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     885    1262    1316    1511    1539
  Referenced in contained procedure

SUM_THESE                                 Heap                            
  Variable, Integer(kind=8), Dimension(:), Allocatable
  Declared       283
  Defined        700     702     704     707     709     711     713
  Referenced     687     784

TEST_DATE                                 Stack                           
  Variable, Character(30)
  Declared       215
  Defined   
  Referenced    1221    1307    1309    1536

TEST_MACHINE                              Stack                           
  Variable, Character(30)
  Declared       216
  Defined        517
  Referenced    1307    1309    1536

TEST_TIME                                 Stack                           
  Variable, Character(30)
  Declared       217
  Defined   
  Referenced    1221    1307    1309    1536

THESE_MAXED                               Heap                            
  Variable, Integer(kind=8), Dimension(:), Allocatable
  Declared       284
  Defined   
  Referenced     690     791     825     827     829     831     834     836     838     840

THESE_MINNED                              Heap                            
  Variable, Integer(kind=8), Dimension(:), Allocatable
  Declared       285
  Defined   
  Referenced     693     798     843     845     847     849     852     854     856     858

THESE_SUMMED                              Heap                            
  Variable, Integer(kind=8), Dimension(:), Allocatable
  Declared       286
  Defined   
  Referenced     696     784     810     812     814     816     818     820     822

TIME_BC_PE                                Structure offset=1664           
  Real(kind=8), Component of PERF_CHECK
  Declared        85
  Defined   
  Referenced

TIME_BSPMA_PE                             Structure offset=1280           
  Real(kind=8), Component of PERF_CHECK
  Declared        79
  Defined   
  Referenced     164     632

TIME_COMM_ALL                             Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       476
  Defined        900
  Referenced     922     923     924     926     927     928    1472    1475    1478

TIME_COMM_AVG                             Stack                           
  Variable, Real(kind=8)
  Declared       300
  Defined        930
  Referenced    1347    1552

TIME_COMM_MAX                             Stack                           
  Variable, Real(kind=8)
  Declared       302
  Defined        923     927
  Referenced    1349    1558

TIME_COMM_METHOD_ALL                      Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       475
  Defined   
  Referenced     633     640     873     874     878     879     880

TIME_COMM_METHOD_AVG                      Stack                           
  Variable, Real(kind=8)
  Declared       294
  Defined        882
  Referenced

TIME_COMM_METHOD_MAX                      Stack                           
  Variable, Real(kind=8)
  Declared       296
  Defined        874     879
  Referenced

TIME_COMM_METHOD_MIN                      Stack                           
  Variable, Real(kind=8)
  Declared       297
  Defined        873     878
  Referenced

TIME_COMM_METHOD_STDDEV                   Stack                           
  Variable, Real(kind=8)
  Declared       295
  Defined        883
  Referenced

TIME_COMM_METHOD_SUM                      Stack                           
  Variable, Real(kind=8)
  Declared       298
  Defined        875     880
  Referenced     882

TIME_COMM_MIN                             Stack                           
  Variable, Real(kind=8)
  Declared       303
  Defined        924     926
  Referenced    1350    1564

TIME_COMM_STDDEV                          Stack                           
  Variable, Real(kind=8)
  Declared       301
  Defined        931
  Referenced    1348

TIME_COMM_SUM                             Stack                           
  Variable, Real(kind=8)
  Declared       304
  Defined        922     928
  Referenced     930

TIME_COMM_X_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       482
  Defined        905
  Referenced     988     989     990     992     993     994

TIME_COMM_X_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       306
  Defined        996
  Referenced    1385    1599

TIME_COMM_X_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       308
  Defined        989     993
  Referenced    1389    1605

TIME_COMM_X_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       309
  Defined        990     992
  Referenced    1391    1611

TIME_COMM_X_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       307
  Defined        997
  Referenced    1387

TIME_COMM_X_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       310
  Defined        988     994
  Referenced     996

TIME_COMM_Y_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       488
  Defined        910
  Referenced    1054    1055    1056    1058    1059    1060

TIME_COMM_Y_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       312
  Defined       1062
  Referenced    1397    1618

TIME_COMM_Y_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       314
  Defined       1055    1059
  Referenced    1401    1624

TIME_COMM_Y_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       315
  Defined       1056    1058
  Referenced    1403    1630

TIME_COMM_Y_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       313
  Defined       1063
  Referenced    1399

TIME_COMM_Y_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       316
  Defined       1054    1060
  Referenced    1062

TIME_COMM_Z_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       494
  Defined        915
  Referenced    1120    1121    1122    1124    1125    1126

TIME_COMM_Z_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       318
  Defined       1128
  Referenced    1409    1637

TIME_COMM_Z_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       320
  Defined       1121    1125
  Referenced    1413    1643

TIME_COMM_Z_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       321
  Defined       1122    1124
  Referenced    1415    1649

TIME_COMM_Z_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       319
  Defined       1129
  Referenced    1411

TIME_COMM_Z_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       322
  Defined       1120    1126
  Referenced    1128

TIME_COPY_PE                              Structure offset=1344           
  Real(kind=8), Component of PERF_CHECK
  Declared        80
  Defined   
  Referenced

TIME_PACK_ALL                             Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       477
  Defined   
  Referenced     529     900     933     934     935     937     938     939

TIME_PACK_AVG                             Stack                           
  Variable, Real(kind=8)
  Declared       330
  Defined        941
  Referenced    1347    1553

TIME_PACK_MAX                             Stack                           
  Variable, Real(kind=8)
  Declared       332
  Defined        934     938
  Referenced    1349    1559

TIME_PACK_MIN                             Stack                           
  Variable, Real(kind=8)
  Declared       333
  Defined        935     937
  Referenced    1350    1565

TIME_PACK_PE                              Structure offset=1408           
  Real(kind=8), Component of PERF_CHECK
  Declared        81
  Defined   
  Referenced     163     166     528

TIME_PACK_STDDEV                          Stack                           
  Variable, Real(kind=8)
  Declared       331
  Defined        942
  Referenced    1348

TIME_PACK_SUM                             Stack                           
  Variable, Real(kind=8)
  Declared       334
  Defined        933     939
  Referenced     941

TIME_PACK_X_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       483
  Defined   
  Referenced     554     905     999    1000    1001    1003    1004    1005

TIME_PACK_X_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       336
  Defined       1007
  Referenced    1385    1600

TIME_PACK_X_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       338
  Defined       1000    1004
  Referenced    1389    1606

TIME_PACK_X_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       339
  Defined       1001    1003
  Referenced    1391    1612

TIME_PACK_X_PE                            Structure offset=1984           
  Real(kind=8), Component of PERF_CHECK
  Declared        91
  Defined   
  Referenced     173     553

TIME_PACK_X_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       337
  Defined       1008
  Referenced    1387

TIME_PACK_X_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       340
  Defined        999    1005
  Referenced    1007

TIME_PACK_Y_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       489
  Defined   
  Referenced     579     910    1065    1066    1067    1069    1070    1071

TIME_PACK_Y_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       342
  Defined       1073
  Referenced    1397    1619

TIME_PACK_Y_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       344
  Defined       1066    1070
  Referenced    1401    1625

TIME_PACK_Y_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       345
  Defined       1067    1069
  Referenced    1403    1631

TIME_PACK_Y_PE                            Structure offset=2304           
  Real(kind=8), Component of PERF_CHECK
  Declared        97
  Defined   
  Referenced     179     578

TIME_PACK_Y_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       343
  Defined       1074
  Referenced    1399

TIME_PACK_Y_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       346
  Defined       1065    1071
  Referenced    1073

TIME_PACK_Z_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       495
  Defined   
  Referenced     604     915    1131    1132    1133    1135    1136    1137

TIME_PACK_Z_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       348
  Defined       1139
  Referenced    1409    1638

TIME_PACK_Z_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       350
  Defined       1132    1136
  Referenced    1413    1644

TIME_PACK_Z_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       351
  Defined       1133    1135
  Referenced    1415    1650

TIME_PACK_Z_PE                            Structure offset=2624           
  Real(kind=8), Component of PERF_CHECK
  Declared       103
  Defined   
  Referenced     185     603

TIME_PACK_Z_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       349
  Defined       1140
  Referenced    1411

TIME_PACK_Z_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       352
  Defined       1131    1137
  Referenced    1139

TIME_RECV_ALL                             Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       480
  Defined   
  Referenced     544     903     966     967     968     970     971     972

TIME_RECV_AVG                             Stack                           
  Variable, Real(kind=8)
  Declared       402
  Defined        974
  Referenced    1347    1556

TIME_RECV_MAX                             Stack                           
  Variable, Real(kind=8)
  Declared       404
  Defined        967     971
  Referenced    1349    1562

TIME_RECV_MIN                             Stack                           
  Variable, Real(kind=8)
  Declared       405
  Defined        968     970
  Referenced    1350    1568

TIME_RECV_PE                              Structure offset=1472           
  Real(kind=8), Component of PERF_CHECK
  Declared        82
  Defined   
  Referenced     169     543

TIME_RECV_STDDEV                          Stack                           
  Variable, Real(kind=8)
  Declared       403
  Defined        975
  Referenced    1348

TIME_RECV_SUM                             Stack                           
  Variable, Real(kind=8)
  Declared       406
  Defined        966     972
  Referenced     974

TIME_RECV_X_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       486
  Defined   
  Referenced     569     908    1032    1033    1034    1036    1037    1038

TIME_RECV_X_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       408
  Defined       1040
  Referenced    1385    1603

TIME_RECV_X_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       410
  Defined       1033    1037
  Referenced    1389    1609

TIME_RECV_X_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       411
  Defined       1034    1036
  Referenced    1391    1615

TIME_RECV_X_PE                            Structure offset=2176           
  Real(kind=8), Component of PERF_CHECK
  Declared        94
  Defined   
  Referenced     176     568

TIME_RECV_X_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       409
  Defined       1041
  Referenced    1387

TIME_RECV_X_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       412
  Defined       1032    1038
  Referenced    1040

TIME_RECV_Y_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       492
  Defined   
  Referenced     594     913    1098    1099    1100    1102    1103    1104

TIME_RECV_Y_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       414
  Defined       1106
  Referenced    1397    1622

TIME_RECV_Y_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       416
  Defined       1099    1103
  Referenced    1401    1628

TIME_RECV_Y_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       417
  Defined       1100    1102
  Referenced    1403    1634

TIME_RECV_Y_PE                            Structure offset=2496           
  Real(kind=8), Component of PERF_CHECK
  Declared       100
  Defined   
  Referenced     182     593

TIME_RECV_Y_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       415
  Defined       1107
  Referenced    1399

TIME_RECV_Y_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       418
  Defined       1098    1104
  Referenced    1106

TIME_RECV_Z_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       498
  Defined   
  Referenced     619     918    1164    1165    1166    1168    1169    1170

TIME_RECV_Z_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       420
  Defined       1172
  Referenced    1409    1641

TIME_RECV_Z_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       422
  Defined       1165    1169
  Referenced    1413    1647

TIME_RECV_Z_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       423
  Defined       1166    1168
  Referenced    1415    1653

TIME_RECV_Z_PE                            Structure offset=2816           
  Real(kind=8), Component of PERF_CHECK
  Declared       106
  Defined   
  Referenced     188     618

TIME_RECV_Z_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       421
  Defined       1173
  Referenced    1411

TIME_RECV_Z_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       424
  Defined       1164    1170
  Referenced    1172

TIME_SEND_ALL                             Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       479
  Defined   
  Referenced     534     901     944     945     946     948     949     950

TIME_SEND_AVG                             Stack                           
  Variable, Real(kind=8)
  Declared       378
  Defined        952
  Referenced    1347    1554

TIME_SEND_MAX                             Stack                           
  Variable, Real(kind=8)
  Declared       380
  Defined        945     949
  Referenced    1349    1560

TIME_SEND_MIN                             Stack                           
  Variable, Real(kind=8)
  Declared       381
  Defined        946     948
  Referenced    1350    1566

TIME_SEND_PE                              Structure offset=1536           
  Real(kind=8), Component of PERF_CHECK
  Declared        83
  Defined   
  Referenced     167     533

TIME_SEND_STDDEV                          Stack                           
  Variable, Real(kind=8)
  Declared       379
  Defined        953
  Referenced    1348

TIME_SEND_SUM                             Stack                           
  Variable, Real(kind=8)
  Declared       382
  Defined        944     950
  Referenced     952

TIME_SEND_X_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       484
  Defined   
  Referenced     559     906    1010    1011    1012    1014    1015    1016

TIME_SEND_X_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       384
  Defined       1018
  Referenced    1385    1601

TIME_SEND_X_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       386
  Defined       1011    1015
  Referenced    1389    1607

TIME_SEND_X_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       387
  Defined       1012    1014
  Referenced    1391    1613

TIME_SEND_X_PE                            Structure offset=2048           
  Real(kind=8), Component of PERF_CHECK
  Declared        92
  Defined   
  Referenced     174     558

TIME_SEND_X_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       385
  Defined       1019
  Referenced    1387

TIME_SEND_X_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       388
  Defined       1010    1016
  Referenced    1018

TIME_SEND_Y_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       490
  Defined   
  Referenced     584     911    1076    1077    1078    1080    1081    1082

TIME_SEND_Y_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       390
  Defined       1084
  Referenced    1397    1620

TIME_SEND_Y_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       392
  Defined       1077    1081
  Referenced    1401    1626

TIME_SEND_Y_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       393
  Defined       1078    1080
  Referenced    1403    1632

TIME_SEND_Y_PE                            Structure offset=2368           
  Real(kind=8), Component of PERF_CHECK
  Declared        98
  Defined   
  Referenced     180     583

TIME_SEND_Y_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       391
  Defined       1085
  Referenced    1399

TIME_SEND_Y_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       394
  Defined       1076    1082
  Referenced    1084

TIME_SEND_Z_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       496
  Defined   
  Referenced     609     916    1142    1143    1144    1146    1147    1148

TIME_SEND_Z_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       396
  Defined       1150
  Referenced    1409    1639

TIME_SEND_Z_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       398
  Defined       1143    1147
  Referenced    1413    1645

TIME_SEND_Z_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       399
  Defined       1144    1146
  Referenced    1415    1651

TIME_SEND_Z_PE                            Structure offset=2688           
  Real(kind=8), Component of PERF_CHECK
  Declared       104
  Defined   
  Referenced     186     608

TIME_SEND_Z_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       397
  Defined       1151
  Referenced    1411

TIME_SEND_Z_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       400
  Defined       1142    1148
  Referenced    1150

TIME_STENCIL_ALL                          Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       500
  Defined   
  Referenced     654     886     887     888     891     892     893

TIME_STENCIL_AVG                          Stack                           
  Variable, Real(kind=8)
  Declared       450
  Defined        896
  Referenced    1324    1541

TIME_STENCIL_MAX                          Stack                           
  Variable, Real(kind=8)
  Declared       452
  Defined        887     892
  Referenced    1324    1541

TIME_STENCIL_MIN                          Stack                           
  Variable, Real(kind=8)
  Declared       453
  Defined        886     891
  Referenced    1324    1541

TIME_STENCIL_PE                           Structure offset=1600           
  Real(kind=8), Component of PERF_CHECK
  Declared        84
  Defined   
  Referenced     171     653

TIME_STENCIL_STDDEV                       Stack                           
  Variable, Real(kind=8)
  Declared       451
  Defined        897
  Referenced    1324

TIME_STENCIL_SUM                          Stack                           
  Variable, Real(kind=8)
  Declared       454
  Defined        888     893
  Referenced     896

TIME_SUMGRID_ALL                          Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       501
  Defined   
  Referenced     662    1187    1188    1189    1191    1192    1193

TIME_SUMGRID_AVG                          Stack                           
  Variable, Real(kind=8)
  Declared       456
  Defined       1195
  Referenced    1427    1659

TIME_SUMGRID_COMM_ALL                     Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       503
  Defined   
  Referenced     672    1209    1210    1211    1213    1214    1215

TIME_SUMGRID_COMM_AVG                     Stack                           
  Variable, Real(kind=8)
  Declared       468
  Defined       1217
  Referenced    1427    1661

TIME_SUMGRID_COMM_MAX                     Stack                           
  Variable, Real(kind=8)
  Declared       470
  Defined       1210    1214
  Referenced    1428    1664

TIME_SUMGRID_COMM_MIN                     Stack                           
  Variable, Real(kind=8)
  Declared       471
  Defined       1211    1213
  Referenced    1429    1667

TIME_SUMGRID_COMM_PE                      Structure offset=3072           
  Real(kind=8), Component of PERF_CHECK
  Declared       111
  Defined   
  Referenced     193     671

TIME_SUMGRID_COMM_STDDEV                  Stack                           
  Variable, Real(kind=8)
  Declared       469
  Defined       1218
  Referenced

TIME_SUMGRID_COMM_SUM                     Stack                           
  Variable, Real(kind=8)
  Declared       472
  Defined       1209    1215
  Referenced    1217

TIME_SUMGRID_COMP_ALL                     Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       502
  Defined   
  Referenced     667    1198    1199    1200    1202    1203    1204

TIME_SUMGRID_COMP_AVG                     Stack                           
  Variable, Real(kind=8)
  Declared       462
  Defined       1206
  Referenced    1427    1660

TIME_SUMGRID_COMP_MAX                     Stack                           
  Variable, Real(kind=8)
  Declared       464
  Defined       1199    1203
  Referenced    1428    1663

TIME_SUMGRID_COMP_MIN                     Stack                           
  Variable, Real(kind=8)
  Declared       465
  Defined       1200    1202
  Referenced    1429    1666

TIME_SUMGRID_COMP_PE                      Structure offset=3008           
  Real(kind=8), Component of PERF_CHECK
  Declared       110
  Defined   
  Referenced     192     666

TIME_SUMGRID_COMP_STDDEV                  Stack                           
  Variable, Real(kind=8)
  Declared       463
  Defined       1207
  Referenced

TIME_SUMGRID_COMP_SUM                     Stack                           
  Variable, Real(kind=8)
  Declared       466
  Defined       1198    1204
  Referenced    1206

TIME_SUMGRID_MAX                          Stack                           
  Variable, Real(kind=8)
  Declared       458
  Defined       1188    1192
  Referenced    1428    1662

TIME_SUMGRID_MIN                          Stack                           
  Variable, Real(kind=8)
  Declared       459
  Defined       1189    1191
  Referenced    1429    1665

TIME_SUMGRID_PE                           Structure offset=2944           
  Real(kind=8), Component of PERF_CHECK
  Declared       109
  Defined   
  Referenced     191     661

TIME_SUMGRID_STDDEV                       Stack                           
  Variable, Real(kind=8)
  Declared       457
  Defined       1196
  Referenced

TIME_SUMGRID_SUM                          Stack                           
  Variable, Real(kind=8)
  Declared       460
  Defined       1187    1193
  Referenced    1195

TIME_SVAF_PE                              Structure offset=1728           
  Real(kind=8), Component of PERF_CHECK
  Declared        86
  Defined   
  Referenced     165     639

TIME_UNPACK_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       481
  Defined   
  Referenced     549     904     977     978     979     981     982     983

TIME_UNPACK_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       426
  Defined        985
  Referenced    1347    1557

TIME_UNPACK_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       428
  Defined        978     982
  Referenced    1349    1563

TIME_UNPACK_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       429
  Defined        979     981
  Referenced    1350    1569

TIME_UNPACK_PE                            Structure offset=1792           
  Real(kind=8), Component of PERF_CHECK
  Declared        87
  Defined   
  Referenced     170     548

TIME_UNPACK_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       427
  Defined        986
  Referenced    1348

TIME_UNPACK_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       430
  Defined        977     983
  Referenced     985

TIME_UNPACK_X_ALL                         Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       487
  Defined   
  Referenced     574     909    1043    1044    1045    1047    1048    1049

TIME_UNPACK_X_AVG                         Stack                           
  Variable, Real(kind=8)
  Declared       432
  Defined       1051
  Referenced    1386    1604

TIME_UNPACK_X_MAX                         Stack                           
  Variable, Real(kind=8)
  Declared       434
  Defined       1044    1048
  Referenced    1390    1610

TIME_UNPACK_X_MIN                         Stack                           
  Variable, Real(kind=8)
  Declared       435
  Defined       1045    1047
  Referenced    1392    1616

TIME_UNPACK_X_PE                          Structure offset=2240           
  Real(kind=8), Component of PERF_CHECK
  Declared        95
  Defined   
  Referenced     177     573

TIME_UNPACK_X_STDDEV                      Stack                           
  Variable, Real(kind=8)
  Declared       433
  Defined       1052
  Referenced    1388

TIME_UNPACK_X_SUM                         Stack                           
  Variable, Real(kind=8)
  Declared       436
  Defined       1043    1049
  Referenced    1051

TIME_UNPACK_Y_ALL                         Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       493
  Defined   
  Referenced     599     914    1109    1110    1111    1113    1114    1115

TIME_UNPACK_Y_AVG                         Stack                           
  Variable, Real(kind=8)
  Declared       438
  Defined       1117
  Referenced    1398    1623

TIME_UNPACK_Y_MAX                         Stack                           
  Variable, Real(kind=8)
  Declared       440
  Defined       1110    1114
  Referenced    1402    1629

TIME_UNPACK_Y_MIN                         Stack                           
  Variable, Real(kind=8)
  Declared       441
  Defined       1111    1113
  Referenced    1404    1635

TIME_UNPACK_Y_PE                          Structure offset=2560           
  Real(kind=8), Component of PERF_CHECK
  Declared       101
  Defined   
  Referenced     183     598

TIME_UNPACK_Y_STDDEV                      Stack                           
  Variable, Real(kind=8)
  Declared       439
  Defined       1118
  Referenced    1400

TIME_UNPACK_Y_SUM                         Stack                           
  Variable, Real(kind=8)
  Declared       442
  Defined       1109    1115
  Referenced    1117

TIME_UNPACK_Z_ALL                         Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       499
  Defined   
  Referenced     624     919    1175    1176    1177    1179    1180    1181

TIME_UNPACK_Z_AVG                         Stack                           
  Variable, Real(kind=8)
  Declared       444
  Defined       1183
  Referenced    1410    1642

TIME_UNPACK_Z_MAX                         Stack                           
  Variable, Real(kind=8)
  Declared       446
  Defined       1176    1180
  Referenced    1414    1648

TIME_UNPACK_Z_MIN                         Stack                           
  Variable, Real(kind=8)
  Declared       447
  Defined       1177    1179
  Referenced    1416    1654

TIME_UNPACK_Z_PE                          Structure offset=2880           
  Real(kind=8), Component of PERF_CHECK
  Declared       107
  Defined   
  Referenced     189     623

TIME_UNPACK_Z_STDDEV                      Stack                           
  Variable, Real(kind=8)
  Declared       445
  Defined       1184
  Referenced    1412

TIME_UNPACK_Z_SUM                         Stack                           
  Variable, Real(kind=8)
  Declared       448
  Defined       1175    1181
  Referenced    1183

TIME_WAIT_ALL                             Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       478
  Defined   
  Referenced     539     902     955     956     957     959     960     961

TIME_WAIT_AVG                             Stack                           
  Variable, Real(kind=8)
  Declared       354
  Defined        963
  Referenced    1347    1555

TIME_WAIT_MAX                             Stack                           
  Variable, Real(kind=8)
  Declared       356
  Defined        956     960
  Referenced    1349    1561

TIME_WAIT_MIN                             Stack                           
  Variable, Real(kind=8)
  Declared       357
  Defined        957     959
  Referenced    1350    1567

TIME_WAIT_PE                              Structure offset=1856           
  Real(kind=8), Component of PERF_CHECK
  Declared        88
  Defined   
  Referenced     168     538

TIME_WAIT_STDDEV                          Stack                           
  Variable, Real(kind=8)
  Declared       355
  Defined        964
  Referenced    1348

TIME_WAIT_SUM                             Stack                           
  Variable, Real(kind=8)
  Declared       358
  Defined        955     961
  Referenced     963

TIME_WAIT_X_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       485
  Defined   
  Referenced     564     907    1021    1022    1023    1025    1026    1027

TIME_WAIT_X_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       360
  Defined       1029
  Referenced    1385    1602

TIME_WAIT_X_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       362
  Defined       1022    1026
  Referenced    1389    1608

TIME_WAIT_X_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       363
  Defined       1023    1025
  Referenced    1391    1614

TIME_WAIT_X_PE                            Structure offset=2112           
  Real(kind=8), Component of PERF_CHECK
  Declared        93
  Defined   
  Referenced     175     563

TIME_WAIT_X_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       361
  Defined       1030
  Referenced    1387

TIME_WAIT_X_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       364
  Defined       1021    1027
  Referenced    1029

TIME_WAIT_Y_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       491
  Defined   
  Referenced     589     912    1087    1088    1089    1091    1092    1093

TIME_WAIT_Y_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       366
  Defined       1095
  Referenced    1397    1621

TIME_WAIT_Y_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       368
  Defined       1088    1092
  Referenced    1401    1627

TIME_WAIT_Y_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       369
  Defined       1089    1091
  Referenced    1403    1633

TIME_WAIT_Y_PE                            Structure offset=2432           
  Real(kind=8), Component of PERF_CHECK
  Declared        99
  Defined   
  Referenced     181     588

TIME_WAIT_Y_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       367
  Defined       1096
  Referenced    1399

TIME_WAIT_Y_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       370
  Defined       1087    1093
  Referenced    1095

TIME_WAIT_Z_ALL                           Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       497
  Defined   
  Referenced     614     917    1153    1154    1155    1157    1158    1159

TIME_WAIT_Z_AVG                           Stack                           
  Variable, Real(kind=8)
  Declared       372
  Defined       1161
  Referenced    1409    1640

TIME_WAIT_Z_MAX                           Stack                           
  Variable, Real(kind=8)
  Declared       374
  Defined       1154    1158
  Referenced    1413    1646

TIME_WAIT_Z_MIN                           Stack                           
  Variable, Real(kind=8)
  Declared       375
  Defined       1155    1157
  Referenced    1415    1652

TIME_WAIT_Z_PE                            Structure offset=2752           
  Real(kind=8), Component of PERF_CHECK
  Declared       105
  Defined   
  Referenced     187     613

TIME_WAIT_Z_STDDEV                        Stack                           
  Variable, Real(kind=8)
  Declared       373
  Defined       1162
  Referenced    1411

TIME_WAIT_Z_SUM                           Stack                           
  Variable, Real(kind=8)
  Declared       376
  Defined       1153    1159
  Referenced    1161

TIME_WALL_ALL                             Stack                           
  Variable, Real(kind=8), Dimension(<exp>)
  Declared       474
  Defined   
  Referenced     524     861     862     866     867     868    1470    1471    1472    1473    1474    1475    1477    1478

TIME_WALL_AVG                             Stack                           
  Variable, Real(kind=8)
  Declared       324
  Defined        870
  Referenced

TIME_WALL_MAX                             Stack                           
  Variable, Real(kind=8)
  Declared       326
  Defined        862     867
  Referenced    1313    1318    1470    1537    1542

TIME_WALL_MIN                             Stack                           
  Variable, Real(kind=8)
  Declared       327
  Defined        861     866
  Referenced    1473

TIME_WALL_PE                              Structure offset=1920           
  Real(kind=8), Component of PERF_CHECK
  Declared        89
  Defined   
  Referenced     162     523

TIME_WALL_STDDEV                          Stack                           
  Variable, Real(kind=8)
  Declared       325
  Defined        871
  Referenced

TIME_WALL_SUM                             Stack                           
  Variable, Real(kind=8)
  Declared       328
  Defined        863     868
  Referenced     870

_F90_DATE_AND_TIME                                                        
  Subroutine, Intrinsic
  Declared  
  Defined   
  Referenced    1221


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                     C o m m o n   B l o c k   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIFCMB5/                            Length: 4 bytes

     MG_PROFILING_MOD                 Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIFCMB9/                            Length: 4 bytes

     MG_PROFILING_MOD                 Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV1/                            Length: 28 bytes

     MG_PROFILING_MOD                 Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV2/                            Length: 24 bytes

     MG_PROFILING_MOD                 Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIVC/                            Length: 2 bytes

     MG_PROFILING_MOD                 Block is used from MG_CONSTANTS_MOD


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
DATE_AND_TIME(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1221, file MG_PROFILING.F)

Name  Messages
----  --------
ENV in MG_ENV_MOD
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1501, file MG_PROFILING.F)

Name  Messages
----  --------
MAX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_PERF_REPORT in MG_PROFILING_MOD (Line 867, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 879, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 892, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 927, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 938, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 949, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 960, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 971, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 982, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 993, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1004, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1015, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1026, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1037, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1048, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1059, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1070, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1081, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1092, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1103, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1114, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1125, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1136, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1147, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1158, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1169, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1180, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1192, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1203, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1214, file MG_PROFILING.F)

Name  Messages
----  --------
MG_ASSERT in MG_UTILS_MOD
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_PERF_REPORT in MG_PROFILING_MOD (Line 526, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 531, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 536, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 541, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 546, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 551, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 556, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 561, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 566, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 571, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 576, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 581, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 586, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 591, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 596, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 601, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 606, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 611, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 616, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 621, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 626, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 635, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 642, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 656, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 664, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 669, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 674, file MG_PROFILING.F)

Name  Messages
----  --------
MG_COMPUTE_STDDEV in MG_UTILS_MOD
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_PERF_REPORT in MG_PROFILING_MOD (Line 871, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 883, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 897, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 931, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 942, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 953, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 964, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 975, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 986, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 997, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1008, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1019, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1030, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1041, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1052, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1063, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1074, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1085, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1096, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1107, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1118, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1129, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1140, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1151, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1162, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1173, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1184, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1196, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1207, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1218, file MG_PROFILING.F)

Name  Messages
----  --------
MG_CONSTANTS_MOD
      Defined as:  No definitions.

      Used By:     MG_PROFILING_MOD
                   MG_PROFILING_MOD  (indirectly)

Name  Messages
----  --------
MG_ENV_MOD
      Defined as:  No definitions.

      Used By:     MG_PROFILING_MOD

Name  Messages
----  --------
MG_GRID_DEALLOC in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_GRID_INIT in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_INIT in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_INIT_GRID in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_INSERT_SPIKE in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_OPTIONS_MOD
      Defined as:  No definitions.

      Used By:     MG_PROFILING_MOD  (indirectly)

Name  Messages
----  --------
MG_PERF_INIT in MG_PROFILING_MOD
      Defined as:  Subroutine (line 121, file MG_PROFILING.F)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_PERF_REPORT in MG_PROFILING_MOD
      Defined as:  Subroutine (line 199, file MG_PROFILING.F)

      Interface:   None

      Calls:       ENV in MG_ENV_MOD (Line 1501, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 526, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 531, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 536, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 541, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 546, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 551, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 556, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 561, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 566, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 571, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 576, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 581, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 586, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 591, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 596, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 601, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 606, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 611, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 616, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 621, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 626, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 635, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 642, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 656, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 664, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 669, file MG_PROFILING.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 674, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 871, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 883, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 897, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 931, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 942, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 953, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 964, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 975, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 986, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 997, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1008, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1019, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1030, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1041, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1052, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1063, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1074, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1085, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1096, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1107, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1118, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1129, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1140, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1151, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1162, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1173, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1184, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1196, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1207, file MG_PROFILING.F)
                   MG_COMPUTE_STDDEV in MG_UTILS_MOD (Line 1218, file MG_PROFILING.F)
                   MPI_WTICK (Line 1223, file MG_PROFILING.F)
                   MPI_GATHER (Line 523, file MG_PROFILING.F)
                   MPI_GATHER (Line 528, file MG_PROFILING.F)
                   MPI_GATHER (Line 533, file MG_PROFILING.F)
                   MPI_GATHER (Line 538, file MG_PROFILING.F)
                   MPI_GATHER (Line 543, file MG_PROFILING.F)
                   MPI_GATHER (Line 548, file MG_PROFILING.F)
                   MPI_GATHER (Line 553, file MG_PROFILING.F)
                   MPI_GATHER (Line 558, file MG_PROFILING.F)
                   MPI_GATHER (Line 563, file MG_PROFILING.F)
                   MPI_GATHER (Line 568, file MG_PROFILING.F)
                   MPI_GATHER (Line 573, file MG_PROFILING.F)
                   MPI_GATHER (Line 578, file MG_PROFILING.F)
                   MPI_GATHER (Line 583, file MG_PROFILING.F)
                   MPI_GATHER (Line 588, file MG_PROFILING.F)
                   MPI_GATHER (Line 593, file MG_PROFILING.F)
                   MPI_GATHER (Line 598, file MG_PROFILING.F)
                   MPI_GATHER (Line 603, file MG_PROFILING.F)
                   MPI_GATHER (Line 608, file MG_PROFILING.F)
                   MPI_GATHER (Line 613, file MG_PROFILING.F)
                   MPI_GATHER (Line 618, file MG_PROFILING.F)
                   MPI_GATHER (Line 623, file MG_PROFILING.F)
                   MPI_GATHER (Line 632, file MG_PROFILING.F)
                   MPI_GATHER (Line 639, file MG_PROFILING.F)
                   MPI_GATHER (Line 653, file MG_PROFILING.F)
                   MPI_GATHER (Line 661, file MG_PROFILING.F)
                   MPI_GATHER (Line 666, file MG_PROFILING.F)
                   MPI_GATHER (Line 671, file MG_PROFILING.F)
                   MPI_REDUCE (Line 784, file MG_PROFILING.F)
                   MPI_REDUCE (Line 791, file MG_PROFILING.F)
                   MPI_REDUCE (Line 798, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 866, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 878, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 891, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 926, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 937, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 948, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 959, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 970, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 981, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 992, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1003, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1014, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1025, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1036, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1047, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1058, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1069, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1080, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1091, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1102, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1113, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1124, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1135, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1146, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1157, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1168, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1179, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1191, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1202, file MG_PROFILING.F)
                   MIN(Intrinsic) (Line 1213, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 867, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 879, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 892, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 927, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 938, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 949, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 960, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 971, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 982, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 993, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1004, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1015, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1026, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1037, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1048, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1059, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1070, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1081, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1092, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1103, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1114, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1125, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1136, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1147, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1158, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1169, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1180, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1192, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1203, file MG_PROFILING.F)
                   MAX(Intrinsic) (Line 1214, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 870, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 882, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 896, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 930, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 941, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 952, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 963, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 974, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 985, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 996, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1007, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1018, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1029, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1040, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1051, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1062, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1073, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1084, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1095, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1106, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1117, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1128, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1139, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1150, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1161, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1172, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1183, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1195, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1206, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1217, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1223, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1318, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1318, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1327, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1329, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1329, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1331, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1331, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1332, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1332, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1355, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1357, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1357, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1359, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1359, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1360, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1360, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1362, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1363, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1364, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1365, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1370, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1372, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1372, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1374, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1374, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1375, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1375, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1377, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1378, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1379, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1380, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1425, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1440, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1443, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1443, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1445, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1445, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1446, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1446, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1453, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1456, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1456, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1458, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1458, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1459, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1459, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1542, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1542, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1544, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1545, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1545, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1546, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1546, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1547, file MG_PROFILING.F)
                   REAL(Intrinsic) (Line 1547, file MG_PROFILING.F)
                   DATE_AND_TIME(Intrinsic) (Line 1221, file MG_PROFILING.F)

Name  Messages
----  --------
MG_PRINT_HEADER in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_PROFILING_MOD
      Defined as:  Module (line 28, file MG_PROFILING.F)

        Uses:      MG_CONSTANTS_MOD
                   MG_UTILS_MOD
                   MG_OPTIONS_MOD  (indirectly)
                   MG_CONSTANTS_MOD  (indirectly)
                   MG_ENV_MOD

Name  Messages
----  --------
MG_TIMER in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_UTILS_MOD
      Defined as:  No definitions.

      Used By:     MG_PROFILING_MOD

Name  Messages
----  --------
MIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_PERF_REPORT in MG_PROFILING_MOD (Line 866, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 878, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 891, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 926, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 937, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 948, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 959, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 970, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 981, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 992, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1003, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1014, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1025, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1036, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1047, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1058, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1069, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1080, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1091, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1102, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1113, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1124, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1135, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1146, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1157, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1168, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1179, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1191, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1202, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1213, file MG_PROFILING.F)

Name  Messages
----  --------
MPI_COMM_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_CONVERSION_FN_NULL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_GATHER
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_PERF_REPORT in MG_PROFILING_MOD (Line 523, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 528, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 533, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 538, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 543, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 548, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 553, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 558, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 563, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 568, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 573, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 578, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 583, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 588, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 593, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 598, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 603, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 608, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 613, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 618, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 623, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 632, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 639, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 653, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 661, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 666, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 671, file MG_PROFILING.F)

Name  Messages
----  --------
MPI_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_REDUCE
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_PERF_REPORT in MG_PROFILING_MOD (Line 784, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 791, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 798, file MG_PROFILING.F)

Name  Messages
----  --------
MPI_TYPE_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WTICK
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1223, file MG_PROFILING.F)

Name  Messages
----  --------
MPI_WTIME
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PMPI_WTICK
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PMPI_WTIME
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_PERF_REPORT in MG_PROFILING_MOD (Line 870, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 882, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 896, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 930, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 941, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 952, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 963, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 974, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 985, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 996, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1007, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1018, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1029, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1040, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1051, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1062, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1073, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1084, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1095, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1106, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1117, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1128, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1139, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1150, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1161, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1172, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1183, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1195, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1206, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1217, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1223, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1318, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1318, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1327, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1329, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1329, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1331, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1331, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1332, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1332, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1355, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1357, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1357, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1359, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1359, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1360, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1360, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1362, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1363, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1364, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1365, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1370, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1372, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1372, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1374, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1374, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1375, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1375, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1377, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1378, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1379, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1380, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1425, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1440, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1443, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1443, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1445, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1445, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1446, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1446, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1453, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1456, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1456, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1458, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1458, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1459, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1459, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1542, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1542, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1544, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1545, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1545, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1546, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1546, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1547, file MG_PROFILING.F)
                   MG_PERF_REPORT in MG_PROFILING_MOD (Line 1547, file MG_PROFILING.F)

Name  Messages
----  --------
_F90_DATE_AND_TIME(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
