%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lus/scratch/p02128/work/MiniGhost/source/MG_BUFINIT.F
Compiled : 10/31/18  05:23:38
Compiler : Version 8.7.6
Ftnlx    : Version 8503 (libcif 85008)
Target   : x86-64
Command  : ftn_driver.exe -hcpu=broadwell -hstatic -D__CRAYXC
           -D__CRAY_BROADWELL -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries
           -D_MG_MPI -D_MG_INT4 -D_MG_REAL8 -ffree -hlist=a -c MG_BUFINIT.F
           -I/opt/cray/pe/cce/8.7.6/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/mpt/7.7.3/gni/mpich-cray/8.6/include
           -I/opt/cray/pe/libsci/18.07.1/CRAY/8.6/x86_64/include
           -I/opt/cray/rca/2.2.18-6.0.7.0_33.3__g2aa4f39.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/xpmem/2.2.15-6.0.7.0_35.11__g7549d06.ari/include
           -I/opt/cray/dmapp/7.1.1-6.0.7.0_34.3__g5a674e0.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-6.0.7.0_24.1__g3b1768f.ari/include
           -I/opt/cray/ugni/6.0.14.0-6.0.7.0_23.1__gea11d3d.ari/include
           -I/opt/cray/udreg/2.3.2-6.0.7.0_33.18__g5196236.ari/include
           -I/opt/cray/alps/6.6.43-6.0.7.0_26.4__ga796da3.ari/include
           -I/opt/cray/wlm_detect/1.3.3-6.0.7.0_47.2__g7109084.ari/include
           -I/opt/cray/krca/2.2.4-6.0.7.0_32.3__g8505b97.ari/include
           -I/opt/cray-hss-devel/8.0.0/include
Program
  Units  : MG_BUFINIT_MOD

ftnlx report
------------
Source   : /lus/scratch/p02128/work/MiniGhost/source/MG_BUFINIT.F
Date     : 10/31/2018  05:23:38


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,scalar2,thread2,vector2,mpi0,modinline,ipa3,noaggress
           -O autoprefetch,noautothread,fusion2,nomsgs,nonegmsgs,nooverindex
           -O pattern,shortcircuit2,unroll2,nozeroinc
           -h noadd_paren,align_arrays,nobounds,caf,noconcurrent,nocontiguous
           -h nocontiguous_assumed_shape,fma,nofp_trap,nofunc_trace,noomp_analyz
           e
           -h noomp_trace,nopat_trace
           -h safe_addr,thread_do_concurrent,fp2=approx,flex_mp=default         
           -h alias=default:standard_restrict         
           -h static (or -static)
           -h omp,noacc
           -h cpu=x86-64,broadwell
           -h network=aries
           -K trap=none
           -s default32
           -eh
           -d abcdefgijmopqsvwzACEFIPQRST0
           -e nBDZ 
           -f free
           -m3
           -S /lus/scratch/tmp/pe_5147/MG_BUFINIT_1.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.          ! ************************************************************************
    2.          !
    3.          !               miniGhost: stencil computations with boundary exchange.
    4.          !                 Copyright (2012) Sandia Corporation
    5.          !
    6.          ! Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
    7.          ! license for use of this work by or on behalf of the U.S. Government.
    8.          !
    9.          ! This library is free software; you can redistribute it and/or modify
   10.          ! it under the terms of the GNU Lesser General Public License as
   11.          ! published by the Free Software Foundation; either version 2.1 of the
   12.          ! License, or (at your option) any later version.
   13.          !
   14.          ! This library is distributed in the hope that it will be useful, but
   15.          ! WITHOUT ANY WARRANTY; without even the implied warranty of
   16.          ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   17.          ! Lesser General Public License for more details.
   18.          !
   19.          ! You should have received a copy of the GNU Lesser General Public
   20.          ! License along with this library; if not, write to the Free Software
   21.          ! Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
   22.          ! USA
   23.          ! Questions? Contact Richard F. Barrett (rfbarre@sandia.gov) or
   24.          !                    Michael A. Heroux (maherou@sandia.gov)
   25.          !
   26.          ! ************************************************************************
   27.          
   28.          MODULE MG_BUFINIT_MOD
   29.          
   30.             ! Purpose
   31.             ! =======
   32.             ! Driver for selecting buffer requirements based on communication 
   33.             ! strategy and other choices.
   34.          
   35.             USE MG_CONSTANTS_MOD
   36.             USE MG_UTILS_MOD
   37.          
   38.             IMPLICIT NONE
   39.          
   40.          CONTAINS
   41.             
   42.             SUBROUTINE MG_BUFINIT ( IERR )
   43.             
   44.                ! ----------------------------------------------------------------
   45.                ! Pack boundary data into send buffer for subsequent transmission.
   46.                ! ----------------------------------------------------------------
   47.          
   48.                ! ---------------------
   49.                ! Argument Declarations
   50.                ! ---------------------
   51.          
   52.                INTEGER, INTENT(OUT) :: &
   53.                   IERR           ! Return status
   54.          
   55.                ! ------------------
   56.                ! Local Declarations
   57.                ! ------------------
   58.          
   59.                INTEGER :: &
   60.                   I                      ! Counter
   61.          
   62.                REAL :: &
   63.                   NUM,               &  ! Tmp random number.
   64.                   PERCENT_SUM_REAL      ! Requested percentage of GRIDS_TO_SUM
   65.             
   66.                ! ---------------------
   67.                ! Executable Statements
   68.                ! ---------------------
   69.          
   70.                IERR = 0
   71.          
   72.                ! ---------------------------
   73.                ! Reduction sum across GRIDs.
   74.                ! ---------------------------
   75.          
   76.                ALLOCATE ( GRIDS_TO_SUM(NUM_VARS), STAT=IERR )
   77.  +             CALL MG_ASSERT ( IERR, 'MG_BUFINFO: ALLOCATE(GRIDS_TO_SUM)', NUM_VARS )
   78.          
   79.                IF ( DEBUG_GRID == 1 ) THEN
   80.                   PERCENT_SUM = 100 ! If we're checking, we're checking them all.
   81.                END IF
   82.          
   83.                IF ( PERCENT_SUM == 100 ) THEN
   84.          
   85.    A--<>          GRIDS_TO_SUM = .TRUE.    ! Every GRID is summed.
   86.                   NUM_SUM_GRID = NUM_VARS
   87.          
   88.                ELSE IF ( PERCENT_SUM == 0 ) THEN
   89.          
   90.    A--<>          GRIDS_TO_SUM = .FALSE.   ! No GRIDs are summed.
   91.                   NUM_SUM_GRID = 0
   92.          
   93.                ELSE
   94.          
   95.                   PERCENT_SUM_REAL = REAL(PERCENT_SUM) / 100.0
   96.                   NUM_SUM_GRID = 0
   97.          
   98.  + Vp--<          DO I = 1, NUM_VARS
   99.    Vp                CALL RANDOM_NUMBER ( NUM )
  100.    Vp                IF ( NUM < PERCENT_SUM ) THEN
  101.    Vp                   GRIDS_TO_SUM(I) = .TRUE.
  102.    Vp                   NUM_SUM_GRID = NUM_SUM_GRID + 1
  103.    Vp                ELSE
  104.    Vp                   GRIDS_TO_SUM(I) = .FALSE.
  105.    Vp                END IF
  106.    Vp-->          END DO
  107.          
  108.                END IF
  109.          
  110.                ALLOCATE ( FLUX_OUT(NUM_VARS), STAT=IERR )
  111.  +             CALL MG_ASSERT ( IERR, 'MG_BUFINFO: ALLOCATE(FLUX_OUT)', NUM_VARS )
  112.    A--<>       FLUX_OUT = 0.0
  113.          
  114.                IF ( NUMPES == 1 ) &
  115.                   RETURN
  116.          
  117.          #if defined _MG_MPI
  118.          
  119.                SELECT CASE ( COMM_METHOD )
  120.          
  121.                   CASE ( COMM_METHOD_BSPMA )
  122.          
  123.  +                   CALL MG_BUF_BSPMA ( IERR )
  124.          
  125.                   CASE ( COMM_METHOD_SVAF )
  126.          
  127.  +                   CALL MG_BUF_SVAF ( IERR )
  128.          
  129.                   CASE DEFAULT
  130.          
  131.  +                   CALL MG_ASSERT ( -1, 'MG_BUFINIT: Unknown COMM_METHOD', COMM_METHOD )
  132.          
  133.                END SELECT
  134.          
  135.                ! -----------------
  136.                ! Set message tags.
  137.                ! -----------------
  138.          
  139.                ALLOCATE ( MSG_TAGS(MAX_NUM_NEIGHBORS), STAT = IERR )
  140.  +             CALL MG_ASSERT ( IERR, 'MG_BUFINFO: ALLOCATE(MSG_TAGS)', MAX_NUM_NEIGHBORS )
  141.          
  142.                MSG_TAGS(NORTH) = 1000
  143.                MSG_TAGS(SOUTH) = 2000
  144.                MSG_TAGS(EAST)  = 3000
  145.                MSG_TAGS(WEST)  = 4000
  146.                MSG_TAGS(BACK)  = 5000
  147.                MSG_TAGS(FRONT) = 6000
  148.          
  149.                ! -----------------------------
  150.                ! Set msg request handle space.
  151.                ! -----------------------------
  152.          
  153.                ALLOCATE ( MSG_REQS(MAX_NUM_SENDS+MAX_NUM_RECVS), STAT = IERR )
  154.  +             CALL MG_ASSERT ( IERR, 'MG_BUFINFO: ALLOCATE(MSG_REQS)', &
  155.                                   MAX_NUM_SENDS+MAX_NUM_RECVS )
  156.          
  157.    A--<>       MSG_REQS(1:MAX_NUM_SENDS+MAX_NUM_RECVS) = MPI_REQUEST_NULL
  158.          
  159.          #endif
  160.          
  161.                RETURN
  162.          
  163.             END SUBROUTINE MG_BUFINIT
ftn-5001 ftn: NOTE MG_BUFINIT, File = MG_BUFINIT.F, Line = 163 
  Local variable "PERCENT_SUM_REAL" is assigned a value but never used.

  164.          
  165.          !  ========================================================================================
  166.             
  167.             SUBROUTINE MG_BUF_BSPMA ( IERR )
  168.             
  169.                ! ----------------------------------------------------------------
  170.                ! Pack boundary data into send buffer for subsequent transmission.
  171.                ! ----------------------------------------------------------------
  172.          
  173.                ! ---------------------
  174.                ! Argument Declarations
  175.                ! ---------------------
  176.          
  177.                INTEGER(KIND=MG_INT), INTENT(OUT) :: &
  178.                   IERR           ! Return status
  179.          
  180.                ! ------------------
  181.                ! Local Declarations
  182.                ! ------------------
  183.          
  184.                ! ---------------------
  185.                ! Executable Statements
  186.                ! ---------------------
  187.          
  188.                IERR = 0
  189.          
  190.                IF ( NUMPES == 1 ) &
  191.                   RETURN
  192.          
  193.                IF ( NEIGHBORS(BACK) /= -1 ) THEN
  194.          
  195.                   SEND_BUFFER_BACK_SIZE = NUM_VARS * (NX+2)*(NY+2)
  196.                   ALLOCATE ( SEND_BUFFER_BACK( SEND_BUFFER_BACK_SIZE ), STAT = IERR )
  197.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: SEND_BUFFER_BACK', SEND_BUFFER_BACK_SIZE )
  198.          
  199.                   RECV_BUFFER_BACK_SIZE = NUM_VARS * (NX+2)*(NY+2)
  200.                   ALLOCATE ( RECV_BUFFER_BACK( RECV_BUFFER_BACK_SIZE ), STAT = IERR )
  201.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: RECV_BUFFER_BACK', RECV_BUFFER_BACK_SIZE )
  202.          
  203.                END IF
  204.          
  205.                IF ( NEIGHBORS(FRONT) /= -1 ) THEN
  206.          
  207.                   SEND_BUFFER_FRONT_SIZE = NUM_VARS * (NX+2)*(NY+2)
  208.                   ALLOCATE ( SEND_BUFFER_FRONT( SEND_BUFFER_FRONT_SIZE ), STAT = IERR )
  209.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: SEND_BUFFER_FRONT', SEND_BUFFER_FRONT_SIZE )
  210.          
  211.                   RECV_BUFFER_FRONT_SIZE = NUM_VARS * (NX+2)*(NY+2)
  212.                   ALLOCATE ( RECV_BUFFER_FRONT( RECV_BUFFER_FRONT_SIZE ), STAT = IERR )
  213.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: RECV_BUFFER_FRONT', RECV_BUFFER_FRONT_SIZE )
  214.          
  215.                END IF
  216.          
  217.                IF ( NEIGHBORS(EAST) /= -1 ) THEN
  218.          
  219.                   SEND_BUFFER_EAST_SIZE = NUM_VARS * (NY+2)*(NZ+2)
  220.                   ALLOCATE ( SEND_BUFFER_EAST( SEND_BUFFER_EAST_SIZE ), STAT = IERR )
  221.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: SEND_BUFFER_EAST', SEND_BUFFER_EAST_SIZE )
  222.          
  223.                   RECV_BUFFER_EAST_SIZE = NUM_VARS * (NY+2)*(NZ+2)
  224.                   ALLOCATE ( RECV_BUFFER_EAST( RECV_BUFFER_EAST_SIZE ), STAT = IERR )
  225.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: RECV_BUFFER_EAST', RECV_BUFFER_EAST_SIZE )
  226.          
  227.                END IF
  228.          
  229.                IF ( NEIGHBORS(WEST) /= -1 ) THEN
  230.          
  231.                   SEND_BUFFER_WEST_SIZE = NUM_VARS * (NY+2)*(NZ+2)
  232.                   ALLOCATE ( SEND_BUFFER_WEST( SEND_BUFFER_WEST_SIZE ), STAT = IERR )
  233.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: SEND_BUFFER_WEST', SEND_BUFFER_WEST_SIZE )
  234.          
  235.                   RECV_BUFFER_WEST_SIZE = NUM_VARS * (NY+2)*(NZ+2)
  236.                   ALLOCATE ( RECV_BUFFER_WEST( RECV_BUFFER_WEST_SIZE ), STAT = IERR )
  237.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: RECV_BUFFER_WEST', RECV_BUFFER_WEST_SIZE )
  238.          
  239.                END IF
  240.          
  241.                IF ( NEIGHBORS(NORTH) /= -1 ) THEN
  242.          
  243.                   SEND_BUFFER_NORTH_SIZE = NUM_VARS * (NX+2)*(NZ+2)
  244.                   ALLOCATE ( SEND_BUFFER_NORTH( SEND_BUFFER_NORTH_SIZE ), STAT = IERR )
  245.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: SEND_BUFFER_NORTH', SEND_BUFFER_NORTH_SIZE )
  246.          
  247.                   RECV_BUFFER_NORTH_SIZE = NUM_VARS * (NX+2)*(NZ+2)
  248.                   ALLOCATE ( RECV_BUFFER_NORTH( RECV_BUFFER_NORTH_SIZE ), STAT = IERR )
  249.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: RECV_BUFFER_NORTH', RECV_BUFFER_NORTH_SIZE )
  250.          
  251.                END IF
  252.          
  253.                IF ( NEIGHBORS(SOUTH) /= -1 ) THEN
  254.          
  255.                   SEND_BUFFER_SOUTH_SIZE = NUM_VARS * (NX+2)*(NZ+2)
  256.                   ALLOCATE ( SEND_BUFFER_SOUTH( SEND_BUFFER_SOUTH_SIZE ), STAT = IERR )
  257.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: SEND_BUFFER_SOUTH', SEND_BUFFER_SOUTH_SIZE )
  258.          
  259.                   RECV_BUFFER_SOUTH_SIZE = NUM_VARS * (NX+2)*(NZ+2)
  260.                   ALLOCATE ( RECV_BUFFER_SOUTH( RECV_BUFFER_SOUTH_SIZE ), STAT = IERR )
  261.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_BSPMA: RECV_BUFFER_SOUTH', RECV_BUFFER_SOUTH_SIZE )
  262.          
  263.                END IF
  264.          
  265.                MAX_NUM_SENDS = MAX_NUM_NEIGHBORS
  266.                MAX_NUM_RECVS = MAX_NUM_NEIGHBORS
  267.          
  268.                RETURN
  269.          
  270.             END SUBROUTINE MG_BUF_BSPMA
  271.          
  272.          !  ========================================================================================
  273.             
  274.             SUBROUTINE MG_BUF_SVAF ( IERR )
  275.             
  276.                ! ----------------------------------------------------------------
  277.                ! Pack boundary data into send buffer for subsequent transmission.
  278.                ! ----------------------------------------------------------------
  279.          
  280.                ! ---------------------
  281.                ! Argument Declarations
  282.                ! ---------------------
  283.          
  284.                INTEGER(KIND=MG_INT), INTENT(OUT) :: &
  285.                   IERR           ! Return status
  286.          
  287.                ! ------------------
  288.                ! Local Declarations
  289.                ! ------------------
  290.          
  291.                ! ---------------------
  292.                ! Executable Statements
  293.                ! ---------------------
  294.          
  295.                IERR = 0
  296.          
  297.                IF ( NUMPES == 1 ) &
  298.                   RETURN
  299.          
  300.                IF ( NEIGHBORS(BACK) /= -1 ) THEN
  301.          
  302.                   SEND_BUFFER_BACK_SIZE = (NX+2)*(NY+2)
  303.                   ALLOCATE ( SEND_BUFFER_BACK( SEND_BUFFER_BACK_SIZE ), STAT = IERR )
  304.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: SEND_BUFFER_BACK', SEND_BUFFER_BACK_SIZE )
  305.          
  306.                   RECV_BUFFER_BACK_SIZE = (NX+2)*(NY+2)
  307.                   ALLOCATE ( RECV_BUFFER_BACK( RECV_BUFFER_BACK_SIZE ), STAT = IERR )
  308.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: RECV_BUFFER_BACK', RECV_BUFFER_BACK_SIZE )
  309.          
  310.                END IF
  311.          
  312.                IF ( NEIGHBORS(FRONT) /= -1 ) THEN
  313.          
  314.                   SEND_BUFFER_FRONT_SIZE = (NX+2)*(NY+2)
  315.                   ALLOCATE ( SEND_BUFFER_FRONT( SEND_BUFFER_FRONT_SIZE ), STAT = IERR )
  316.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: SEND_BUFFER_FRONT', SEND_BUFFER_FRONT_SIZE )
  317.          
  318.                   RECV_BUFFER_FRONT_SIZE = (NX+2)*(NY+2)
  319.                   ALLOCATE ( RECV_BUFFER_FRONT( RECV_BUFFER_FRONT_SIZE ), STAT = IERR )
  320.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: RECV_BUFFER_FRONT', RECV_BUFFER_FRONT_SIZE )
  321.          
  322.                END IF
  323.          
  324.                IF ( NEIGHBORS(EAST) /= -1 ) THEN
  325.          
  326.                   SEND_BUFFER_EAST_SIZE =  (NY+2)*(NZ+2)
  327.                   ALLOCATE ( SEND_BUFFER_EAST( SEND_BUFFER_EAST_SIZE ), STAT = IERR )
  328.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: SEND_BUFFER_EAST', SEND_BUFFER_EAST_SIZE )
  329.          
  330.                   RECV_BUFFER_EAST_SIZE =  (NY+2)*(NZ+2)
  331.                   ALLOCATE ( RECV_BUFFER_EAST( RECV_BUFFER_EAST_SIZE ), STAT = IERR )
  332.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: RECV_BUFFER_EAST', RECV_BUFFER_EAST_SIZE )
  333.          
  334.                END IF
  335.          
  336.                IF ( NEIGHBORS(WEST) /= -1 ) THEN
  337.          
  338.                   SEND_BUFFER_WEST_SIZE =  (NY+2)*(NZ+2)
  339.                   ALLOCATE ( SEND_BUFFER_WEST( SEND_BUFFER_WEST_SIZE ), STAT = IERR )
  340.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: SEND_BUFFER_WEST', SEND_BUFFER_WEST_SIZE )
  341.          
  342.                   RECV_BUFFER_WEST_SIZE =  (NY+2)*(NZ+2)
  343.                   ALLOCATE ( RECV_BUFFER_WEST( RECV_BUFFER_WEST_SIZE ), STAT = IERR )
  344.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: RECV_BUFFER_WEST', RECV_BUFFER_WEST_SIZE )
  345.          
  346.                END IF
  347.          
  348.                IF ( NEIGHBORS(NORTH) /= -1 ) THEN
  349.          
  350.                   SEND_BUFFER_NORTH_SIZE = (NX+2)*(NZ+2)
  351.                   ALLOCATE ( SEND_BUFFER_NORTH( SEND_BUFFER_NORTH_SIZE ), STAT = IERR )
  352.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: SEND_BUFFER_NORTH', SEND_BUFFER_NORTH_SIZE )
  353.          
  354.                   RECV_BUFFER_NORTH_SIZE = (NX+2)*(NZ+2)
  355.                   ALLOCATE ( RECV_BUFFER_NORTH( RECV_BUFFER_NORTH_SIZE ), STAT = IERR )
  356.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: RECV_BUFFER_NORTH', RECV_BUFFER_NORTH_SIZE )
  357.          
  358.                END IF
  359.          
  360.                IF ( NEIGHBORS(SOUTH) /= -1 ) THEN
  361.          
  362.                   SEND_BUFFER_SOUTH_SIZE = (NX+2)*(NZ+2)
  363.                   ALLOCATE ( SEND_BUFFER_SOUTH( SEND_BUFFER_SOUTH_SIZE ), STAT = IERR )
  364.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: SEND_BUFFER_SOUTH', SEND_BUFFER_SOUTH_SIZE )
  365.          
  366.                   RECV_BUFFER_SOUTH_SIZE = (NX+2)*(NZ+2)
  367.                   ALLOCATE ( RECV_BUFFER_SOUTH( RECV_BUFFER_SOUTH_SIZE ), STAT = IERR )
  368.  +                CALL MG_ASSERT ( IERR, 'MG_BUF_SVAF: RECV_BUFFER_SOUTH', RECV_BUFFER_SOUTH_SIZE )
  369.          
  370.                END IF
  371.          
  372.                MAX_NUM_SENDS = MAX_NUM_NEIGHBORS
  373.                MAX_NUM_RECVS = MAX_NUM_NEIGHBORS
  374.          
  375.                RETURN
  376.          
  377.             END SUBROUTINE MG_BUF_SVAF
  378.          
  379.          !  ========================================================================================
  380.          
  381.          END MODULE MG_BUFINIT_MOD

ftn-3118 ftn: IPA MG_BUFINIT, File = MG_BUFINIT.F, Line = 77, Column = 12 
  "mg_assert" (called from "mg_bufinit") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-6202 ftn: VECTOR MG_BUFINIT, File = MG_BUFINIT.F, Line = 85 
  A loop starting at line 85 was replaced by a library call.

ftn-6202 ftn: VECTOR MG_BUFINIT, File = MG_BUFINIT.F, Line = 90 
  A loop starting at line 90 was replaced by a library call.

ftn-6375 ftn: VECTOR MG_BUFINIT, File = MG_BUFINIT.F, Line = 98 
  A loop starting at line 98 would benefit from "!dir$ safe_address".

ftn-6209 ftn: VECTOR MG_BUFINIT, File = MG_BUFINIT.F, Line = 98 
  A loop starting at line 98 was partially vectorized.

ftn-3118 ftn: IPA MG_BUFINIT, File = MG_BUFINIT.F, Line = 111, Column = 12 
  "mg_assert" (called from "mg_bufinit") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-6202 ftn: VECTOR MG_BUFINIT, File = MG_BUFINIT.F, Line = 112 
  A loop starting at line 112 was replaced by a library call.

ftn-3118 ftn: IPA MG_BUFINIT, File = MG_BUFINIT.F, Line = 123, Column = 18 
  "mg_buf_bspma" (called from "mg_bufinit") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUFINIT, File = MG_BUFINIT.F, Line = 127, Column = 18 
  "mg_buf_svaf" (called from "mg_bufinit") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUFINIT, File = MG_BUFINIT.F, Line = 131, Column = 18 
  "mg_assert" (called from "mg_bufinit") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUFINIT, File = MG_BUFINIT.F, Line = 140, Column = 12 
  "mg_assert" (called from "mg_bufinit") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUFINIT, File = MG_BUFINIT.F, Line = 154, Column = 12 
  "mg_assert" (called from "mg_bufinit") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-6202 ftn: VECTOR MG_BUFINIT, File = MG_BUFINIT.F, Line = 157 
  A loop starting at line 157 was replaced by a library call.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 197, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 201, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 209, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 213, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 221, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 225, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 233, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 237, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 245, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 249, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 257, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_BSPMA, File = MG_BUFINIT.F, Line = 261, Column = 15 
  "mg_assert" (called from "mg_buf_bspma") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 304, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 308, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 316, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 320, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 328, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 332, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 340, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 344, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 352, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 356, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 364, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

ftn-3118 ftn: IPA MG_BUF_SVAF, File = MG_BUFINIT.F, Line = 368, Column = 15 
  "mg_assert" (called from "mg_buf_svaf") was not inlined because the call site will not flatten.  "mpi_abort_" is missing.

  382.          


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
              C r o s s   R e f e r e n c e   for   MG_BUFINIT_MOD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                                      Storage/Owner                   
----                                      -------------                   

BACK                                      Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced     146     193     300
  Referenced in contained procedure

COMM_METHOD                               Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced     119     131
  Referenced in contained procedure

COMM_METHOD_BSPMA                         Module MG_OPTIONS_MOD           
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     121
  Referenced in contained procedure

COMM_METHOD_SVAF                          Module MG_OPTIONS_MOD           
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     125
  Referenced in contained procedure

DEBUG_GRID                                Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced      79
  Referenced in contained procedure

EAST                                      Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced     144     217     324
  Referenced in contained procedure

FLUX_OUT                                  Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined        112
  Referenced     110
  Referenced in contained procedure

FRONT                                     Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced     147     205     312
  Referenced in contained procedure

GRIDS_TO_SUM                              Module MG_CONSTANTS_MOD         
  Logical, Use assoc, Dimension(:), Allocatable
  Declared  
  Defined         85      90     101     104
  Referenced      76
  Referenced in contained procedure

I                                         Stack                           
  Variable, Integer
  Declared        60
  Defined   
  Referenced     101     104

IERR                                      MG_BUFINIT                      
  Dummy Argument, Integer, Intent(out)
  Declared        42      53
  Defined         70
  Referenced      76      77     110     111     123     127     139     140     153     154

IERR                                      MG_BUF_BSPMA                    
  Dummy Argument, Integer(kind=4), Intent(out)
  Declared       167     178
  Defined        188
  Referenced     196     197     200     201     208     209     212     213     220     221     224     225     232     233     236
           237     244     245     248     249     256     257     260     261

IERR                                      MG_BUF_SVAF                     
  Dummy Argument, Integer(kind=4), Intent(out)
  Declared       274     285
  Defined        295
  Referenced     303     304     307     308     315     316     319     320     327     328     331     332     339     340     343
           344     351     352     355     356     363     364     367     368

MAX_NUM_NEIGHBORS                         Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced     139     140     265     266     372     373
  Referenced in contained procedure

MAX_NUM_RECVS                             Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        266     373
  Referenced     157
  Referenced in contained procedure

MAX_NUM_SENDS                             Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        265     372
  Referenced     157
  Referenced in contained procedure

MG_ASSERT                                 Module MG_UTILS_MOD             
  Subroutine, Module procedure
  Declared  
  Defined   
  Referenced      77     111     131     131     140     154     197     201     209     213     221     225     233     237     245
           249     257     261     304     308     316     320     328     332     340     344     352     356     364     368

MG_ASSERT                                 Module MG_UTILS_MOD             
  Subroutine, Module procedure
  Declared  
  Defined   
  Referenced      77     111     131     131     140     154     197     201     209     213     221     225     233     237     245
           249     257     261     304     308     316     320     328     332     340     344     352     356     364     368

MG_BUFINIT                                                                
  Subroutine, Module procedure
  Declared        42
  Defined   
  Referenced

MG_BUFINIT_MOD                                                            
  Module
  Declared        28
  Defined   
  Referenced

MG_BUF_BSPMA                                                              
  Subroutine, Module procedure
  Declared       167
  Defined   
  Referenced     123

MG_BUF_SVAF                                                               
  Subroutine, Module procedure
  Declared       274
  Defined   
  Referenced     127

MG_CONSTANTS_MOD                                                          
  Module, Used indirectly (from module MG_UTILS_MOD)
  Declared  
  Defined   
  Referenced

MG_CONSTANTS_MOD                                                          
  Module
  Declared  
  Defined   
  Referenced      35

MG_INT                                    Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=1), Use assoc
  Declared  
  Defined   
  Referenced     177     284
  Referenced in contained procedure

MG_OPTIONS_MOD                                                            
  Module, Used indirectly (from module MG_UTILS_MOD)
  Declared  
  Defined   
  Referenced

MG_UTILS_MOD                                                              
  Module
  Declared  
  Defined   
  Referenced      36

MPIFCMB5                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIFCMB9                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIPRIV1                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIPRIV2                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIPRIVC                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPI_REQUEST_NULL                          Module MG_CONSTANTS_MOD         
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced     157
  Referenced in contained procedure

MSG_REQS                                  Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined        157
  Referenced     153
  Referenced in contained procedure

MSG_TAGS                                  Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined        142     143     144     145     146     147
  Referenced     139
  Referenced in contained procedure

NEIGHBORS                                 Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     193     205     217     229     241     253     300     312     324     336     348     360
  Referenced in contained procedure

NORTH                                     Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced     142     241     348
  Referenced in contained procedure

NUM                                       Stack                           
  Variable, Real
  Declared        63
  Defined         99
  Referenced     100

NUMPES                                    Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced     114     190     297
  Referenced in contained procedure

NUM_SUM_GRID                              Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined         86      91      96     102
  Referenced
  Referenced in contained procedure

NUM_VARS                                  Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced      77      86      98     111     195     199     207     211     219     223     231     235     243     247     255
           259
  Referenced in contained procedure

NX                                        Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced     195     199     207     211     243     247     255     259     302     306     314     318     350     354     362
           366
  Referenced in contained procedure

NY                                        Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced     195     199     207     211     219     223     231     235     302     306     314     318     326     330     338
           342
  Referenced in contained procedure

NZ                                        Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined   
  Referenced     219     223     231     235     243     247     255     259     326     330     338     342     350     354     362
           366
  Referenced in contained procedure

PERCENT_SUM                               Module MG_OPTIONS_MOD           
  Integer, Use assoc
  Declared  
  Defined         80
  Referenced      83      88      95     100
  Referenced in contained procedure

PERCENT_SUM_REAL                          Stack                           
  Variable, Real
  Declared        64
  Defined         95
  Referenced

REAL                                                                      
  Function, Real, Intrinsic, Pure, Elemental
  Declared  
  Defined   
  Referenced      95

RECV_BUFFER_BACK                          Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     200     307
  Referenced in contained procedure

RECV_BUFFER_BACK_SIZE                     Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        199     306
  Referenced     201     308
  Referenced in contained procedure

RECV_BUFFER_EAST                          Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     224     331
  Referenced in contained procedure

RECV_BUFFER_EAST_SIZE                     Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        223     330
  Referenced     225     332
  Referenced in contained procedure

RECV_BUFFER_FRONT                         Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     212     319
  Referenced in contained procedure

RECV_BUFFER_FRONT_SIZE                    Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        211     318
  Referenced     213     320
  Referenced in contained procedure

RECV_BUFFER_NORTH                         Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     248     355
  Referenced in contained procedure

RECV_BUFFER_NORTH_SIZE                    Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        247     354
  Referenced     249     356
  Referenced in contained procedure

RECV_BUFFER_SOUTH                         Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     260     367
  Referenced in contained procedure

RECV_BUFFER_SOUTH_SIZE                    Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        259     366
  Referenced     261     368
  Referenced in contained procedure

RECV_BUFFER_WEST                          Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     236     343
  Referenced in contained procedure

RECV_BUFFER_WEST_SIZE                     Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        235     342
  Referenced     237     344
  Referenced in contained procedure

SEND_BUFFER_BACK                          Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     196     303
  Referenced in contained procedure

SEND_BUFFER_BACK_SIZE                     Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        195     302
  Referenced     197     304
  Referenced in contained procedure

SEND_BUFFER_EAST                          Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     220     327
  Referenced in contained procedure

SEND_BUFFER_EAST_SIZE                     Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        219     326
  Referenced     221     328
  Referenced in contained procedure

SEND_BUFFER_FRONT                         Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     208     315
  Referenced in contained procedure

SEND_BUFFER_FRONT_SIZE                    Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        207     314
  Referenced     209     316
  Referenced in contained procedure

SEND_BUFFER_NORTH                         Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     244     351
  Referenced in contained procedure

SEND_BUFFER_NORTH_SIZE                    Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        243     350
  Referenced     245     352
  Referenced in contained procedure

SEND_BUFFER_SOUTH                         Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     256     363
  Referenced in contained procedure

SEND_BUFFER_SOUTH_SIZE                    Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        255     362
  Referenced     257     364
  Referenced in contained procedure

SEND_BUFFER_WEST                          Module MG_CONSTANTS_MOD         
  Real(kind=8), Use assoc, Dimension(:), Allocatable
  Declared  
  Defined   
  Referenced     232     339
  Referenced in contained procedure

SEND_BUFFER_WEST_SIZE                     Module MG_CONSTANTS_MOD         
  Integer(kind=4), Use assoc
  Declared  
  Defined        231     338
  Referenced     233     340
  Referenced in contained procedure

SOUTH                                     Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced     143     253     360
  Referenced in contained procedure

WEST                                      Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=4), Use assoc
  Declared  
  Defined   
  Referenced     145     229     336
  Referenced in contained procedure


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                     C o m m o n   B l o c k   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIFCMB5/                            Length: 4 bytes

     MG_BUFINIT_MOD                   Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIFCMB9/                            Length: 4 bytes

     MG_BUFINIT_MOD                   Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV1/                            Length: 28 bytes

     MG_BUFINIT_MOD                   Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV2/                            Length: 24 bytes

     MG_BUFINIT_MOD                   Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIVC/                            Length: 2 bytes

     MG_BUFINIT_MOD                   Block is used from MG_CONSTANTS_MOD


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
MG_ASSERT in MG_UTILS_MOD
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_BUFINIT in MG_BUFINIT_MOD (Line 131, file MG_BUFINIT.F)

Name  Messages
----  --------
MG_BUFINIT in MG_BUFINIT_MOD
      Defined as:  Subroutine (line 42, file MG_BUFINIT.F)

      Interface:   None

      Calls:       MG_BUF_BSPMA in MG_BUFINIT_MOD (Line 123, file MG_BUFINIT.F)
                   MG_BUF_SVAF in MG_BUFINIT_MOD (Line 127, file MG_BUFINIT.F)
                   MG_ASSERT in MG_UTILS_MOD (Line 131, file MG_BUFINIT.F)
                   REAL(Intrinsic) (Line 95, file MG_BUFINIT.F)

Name  Messages
----  --------
MG_BUFINIT_MOD
      Defined as:  Module (line 28, file MG_BUFINIT.F)

        Uses:      MG_CONSTANTS_MOD
                   MG_UTILS_MOD
                   MG_OPTIONS_MOD  (indirectly)
                   MG_CONSTANTS_MOD  (indirectly)

Name  Messages
----  --------
MG_BUF_BSPMA in MG_BUFINIT_MOD
      Defined as:  Subroutine (line 167, file MG_BUFINIT.F)

      Interface:   None

      Called By:   MG_BUFINIT in MG_BUFINIT_MOD (Line 123, file MG_BUFINIT.F)

Name  Messages
----  --------
MG_BUF_SVAF in MG_BUFINIT_MOD
      Defined as:  Subroutine (line 274, file MG_BUFINIT.F)

      Interface:   None

      Called By:   MG_BUFINIT in MG_BUFINIT_MOD (Line 127, file MG_BUFINIT.F)

Name  Messages
----  --------
MG_COMPUTE_STDDEV in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_CONSTANTS_MOD
      Defined as:  No definitions.

      Used By:     MG_BUFINIT_MOD
                   MG_BUFINIT_MOD  (indirectly)

Name  Messages
----  --------
MG_GRID_DEALLOC in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_GRID_INIT in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_INIT in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_INIT_GRID in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_INSERT_SPIKE in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_OPTIONS_MOD
      Defined as:  No definitions.

      Used By:     MG_BUFINIT_MOD  (indirectly)

Name  Messages
----  --------
MG_PRINT_HEADER in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_TIMER in MG_UTILS_MOD
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_UTILS_MOD
      Defined as:  No definitions.

      Used By:     MG_BUFINIT_MOD

Name  Messages
----  --------
MPI_COMM_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_CONVERSION_FN_NULL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WTICK
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_WTIME
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PMPI_WTICK
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PMPI_WTIME
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
RANDOM_NUMBER(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   MG_BUFINIT in MG_BUFINIT_MOD (Line 95, file MG_BUFINIT.F)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
