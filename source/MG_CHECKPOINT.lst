%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /lus/scratch/p02128/work/MiniGhost/source/MG_CHECKPOINT.F
Compiled : 10/31/18  05:23:46
Compiler : Version 8.7.6
Ftnlx    : Version 8503 (libcif 85008)
Target   : x86-64
Command  : ftn_driver.exe -hcpu=broadwell -hstatic -D__CRAYXC
           -D__CRAY_BROADWELL -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries
           -D_MG_MPI -D_MG_INT4 -D_MG_REAL8 -ffree -hlist=a -c MG_CHECKPOINT.F
           -I/opt/cray/pe/cce/8.7.6/cce/x86_64/include/craylibs -I/usr/include
           -I/usr/include -I/opt/cray/pe/mpt/7.7.3/gni/mpich-cray/8.6/include
           -I/opt/cray/pe/libsci/18.07.1/CRAY/8.6/x86_64/include
           -I/opt/cray/rca/2.2.18-6.0.7.0_33.3__g2aa4f39.ari/include
           -I/opt/cray/pe/pmi/5.0.14/include
           -I/opt/cray/xpmem/2.2.15-6.0.7.0_35.11__g7549d06.ari/include
           -I/opt/cray/dmapp/7.1.1-6.0.7.0_34.3__g5a674e0.ari/include
           -I/opt/cray/gni-headers/5.0.12.0-6.0.7.0_24.1__g3b1768f.ari/include
           -I/opt/cray/ugni/6.0.14.0-6.0.7.0_23.1__gea11d3d.ari/include
           -I/opt/cray/udreg/2.3.2-6.0.7.0_33.18__g5196236.ari/include
           -I/opt/cray/alps/6.6.43-6.0.7.0_26.4__ga796da3.ari/include
           -I/opt/cray/wlm_detect/1.3.3-6.0.7.0_47.2__g7109084.ari/include
           -I/opt/cray/krca/2.2.4-6.0.7.0_32.3__g8505b97.ari/include
           -I/opt/cray-hss-devel/8.0.0/include
Program
  Units  : MG_CHECKPOINT_MOD

ftnlx report
------------
Source   : /lus/scratch/p02128/work/MiniGhost/source/MG_CHECKPOINT.F
Date     : 10/31/2018  05:23:46


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,scalar2,thread2,vector2,mpi0,modinline,ipa3,noaggress
           -O autoprefetch,noautothread,fusion2,nomsgs,nonegmsgs,nooverindex
           -O pattern,shortcircuit2,unroll2,nozeroinc
           -h noadd_paren,align_arrays,nobounds,caf,noconcurrent,nocontiguous
           -h nocontiguous_assumed_shape,fma,nofp_trap,nofunc_trace,noomp_analyz
           e
           -h noomp_trace,nopat_trace
           -h safe_addr,thread_do_concurrent,fp2=approx,flex_mp=default         
           -h alias=default:standard_restrict         
           -h static (or -static)
           -h omp,noacc
           -h cpu=x86-64,broadwell
           -h network=aries
           -K trap=none
           -s default32
           -eh
           -d abcdefgijmopqsvwzACEFIPQRST0
           -e nBDZ 
           -f free
           -m3
           -S /lus/scratch/tmp/pe_5372/MG_CHECKPOINT_1.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.        ! ************************************************************************
    2.        !
    3.        !               miniGhost: stencil computations with boundary exchange.
    4.        !                 Copyright (2012) Sandia Corporation
    5.        !
    6.        ! Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
    7.        ! license for use of this work by or on behalf of the U.S. Government.
    8.        !
    9.        ! This library is free software; you can redistribute it and/or modify
   10.        ! it under the terms of the GNU Lesser General Public License as
   11.        ! published by the Free Software Foundation; either version 2.1 of the
   12.        ! License, or (at your option) any later version.
   13.        !
   14.        ! This library is distributed in the hope that it will be useful, but
   15.        ! WITHOUT ANY WARRANTY; without even the implied warranty of
   16.        ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   17.        ! Lesser General Public License for more details.
   18.        !
   19.        ! You should have received a copy of the GNU Lesser General Public
   20.        ! License along with this library; if not, write to the Free Software
   21.        ! Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
   22.        ! USA
   23.        ! Questions? Contact Richard F. Barrett (rfbarre@sandia.gov) or
   24.        !                    Michael A. Heroux (maherou@sandia.gov)
   25.        !
   26.        ! ************************************************************************
   27.        
   28.        MODULE MG_CHECKPOINT_MOD
   29.        
   30.        #if defined _MG_SERIAL
   31.    D   
   32.    D   CONTAINS
   33.    D   
   34.    D      SUBROUTINE MG_CHECKPOINT ( IERR )
   35.    D   
   36.    D         ! Current implementation based on MPI IO functionality.
   37.    D   
   38.    D         IMPLICIT NONE
   39.    D   
   40.    D         INTEGER IERR                    ! Return status.
   41.    D   
   42.    D         RETURN
   43.    D   
   44.    D      END SUBROUTINE MG_CHECKPOINT
   45.    D   
   46.        #elif defined _MG_MPI
   47.        
   48.           ! Procedures included:
   49.           !
   50.           !   CHECKPOINT
   51.        
   52.           USE MG_CONSTANTS_MOD
   53.           USE MG_OPTIONS_MOD
   54.        
   55.           IMPLICIT NONE
   56.        
   57.           INTEGER(KIND=MG_INT) :: &
   58.                 CP_INTERVAL
   59.        
   60.           CHARACTER*(1024) :: &
   61.                 CP_FILE
   62.        
   63.           INTEGER(KIND=MPI_ADDRESS_KIND) ::  &
   64.              SIZEOFCHAR,       &
   65.              SIZEOFINT,        &
   66.              SIZEOFREAL8
   67.        
   68.           INTEGER(KIND=MG_INT), PARAMETER :: MAX_GRIDS = 40
   69.        
   70.           TYPE :: CMDLINE_OPTIONS_TYPE
   71.        
   72.              INTEGER(KIND=MG_INT) ::  REPORT_DIFFUSION ! boolean
   73.              INTEGER(KIND=MG_INT) ::  SCALING
   74.              INTEGER(KIND=MG_INT) ::  COMM_METHOD
   75.              INTEGER(KIND=MG_INT) ::  STENCIL
   76.              INTEGER(KIND=MG_INT) ::  NUM_SPIKES
   77.              INTEGER(KIND=MG_INT) ::  NPX
   78.              INTEGER(KIND=MG_INT) ::  NPY
   79.              INTEGER(KIND=MG_INT) ::  NPZ
   80.              INTEGER(KIND=MG_INT) ::  NX
   81.              INTEGER(KIND=MG_INT) ::  NY
   82.              INTEGER(KIND=MG_INT) ::  NZ
   83.              INTEGER(KIND=MG_INT) ::  NUM_VARS
   84.              INTEGER(KIND=MG_INT) ::  NUM_TSTEPS
   85.              INTEGER(KIND=MG_INT) ::  PERCENT_SUM
   86.              INTEGER(KIND=MG_INT) ::  CP_INTERVAL
   87.              CHARACTER(1024)      ::  CP_FILE
   88.        
   89.           END TYPE CMDLINE_OPTIONS_TYPE
   90.        
   91.           TYPE :: PE_COORDS_TYPE
   92.              INTEGER(KIND=MG_INT) ::  MY_GLOBAL_NX_START
   93.              INTEGER(KIND=MG_INT) ::  MY_GLOBAL_NY_START
   94.              INTEGER(KIND=MG_INT) ::  MY_GLOBAL_NZ_START
   95.              INTEGER(KIND=MG_INT) ::  MY_GLOBAL_NX_END
   96.              INTEGER(KIND=MG_INT) ::  MY_GLOBAL_NY_END
   97.              INTEGER(KIND=MG_INT) ::  MY_GLOBAL_NZ_END
   98.              INTEGER(KIND=MG_INT) ::  NUM_NEIGHS
   99.              INTEGER(KIND=MG_INT) ::  NUM_SUM_GRID
  100.              INTEGER(KIND=MG_INT) ::  MYPE
  101.              INTEGER(KIND=MG_INT) ::  MYPX
  102.              INTEGER(KIND=MG_INT) ::  MYPY
  103.              INTEGER(KIND=MG_INT) ::  MYPZ
  104.           END TYPE PE_COORDS_TYPE
  105.        
  106.           TYPE :: TSHEADER_TYPE
  107.        
  108.              INTEGER(KIND=MG_INT)  ::  TSTEP
  109.              INTEGER(KIND=MG_REAL) ::  GSUM_OLD(MAX_GRIDS)
  110.        
  111.           END TYPE TSHEADER_TYPE
  112.        
  113.           INTEGER CP_CMDLINE_TYPE
  114.           INTEGER CP_GRIDSTOSUM_TYPE
  115.           INTEGER CP_PECOORDS_TYPE
  116.           INTEGER CP_PECOORDSARRAY_TYPE
  117.           INTEGER CP_GSUMOLD_TYPE
  118.           INTEGER CP_TSHEADER_TYPE
  119.           INTEGER CP_NOGHOST_TYPE
  120.           INTEGER CP_TSGRID_TYPE
  121.        
  122.           INTEGER(KIND=MPI_ADDRESS_KIND) CP_CMDLINE_EXTENT
  123.           INTEGER(KIND=MPI_ADDRESS_KIND) CP_GRIDSTOSUM_EXTENT
  124.           INTEGER(KIND=MPI_ADDRESS_KIND) CP_PECOORDS_EXTENT
  125.           INTEGER(KIND=MPI_ADDRESS_KIND) CP_PECOORDSARRAY_EXTENT
  126.           INTEGER(KIND=MPI_ADDRESS_KIND) CP_GSUMOLD_EXTENT
  127.           INTEGER(KIND=MPI_ADDRESS_KIND) CP_TSHEADER_EXTENT
  128.           INTEGER(KIND=MPI_ADDRESS_KIND) CP_NOGHOST_EXTENT
  129.           INTEGER(KIND=MPI_ADDRESS_KIND) CP_TSGRID_EXTENT
  130.           INTEGER(KIND=MPI_ADDRESS_KIND) CP_LB
  131.        
  132.           INTEGER cp_filehandle
  133.        CONTAINS
  134.        !  =================================================================================
  135.        
  136.           SUBROUTINE MG_CHECKPOINT ( IERR )
  137.        
  138.              IMPLICIT NONE
  139.        
  140.              INTEGER IERR                    ! Return status.
  141.        
  142.              ! ---------------
  143.              ! Local Variables
  144.              ! ---------------
  145.        
  146.              INTEGER(KIND=MG_INT) IVAR, cp_num, view_disp
  147.        
  148.              ! ---------------------
  149.              ! Executable Statements
  150.              ! ---------------------
  151.        
  152.              IERR = 0
  153.        
  154.        #if defined _MG_CHECKPT
  155.    D   
  156.    D         IF ( CP_INTERVAL == 0 ) THEN
  157.    D            ! A checkpoint interval of zero means no checkpointing
  158.    D            RETURN
  159.    D         END IF
  160.    D   
  161.    D         IF ( MOD(TSTEP,CP_INTERVAL) /= 0 ) THEN
  162.    D            RETURN
  163.    D         END IF
  164.    D   
  165.    D         CALL MPI_FILE_OPEN(MPI_COMM_WORLD, CP_FILE, MPI_MODE_CREATE+MPI_MODE_RDWR, MPI_INFO_NULL, cp_filehandle, IERR)
  166.    D   
  167.    D         IF ( TSTEP == CP_INTERVAL ) THEN
  168.    D            ! This is the first checkpoint.
  169.    D            ! Initialize the MPI types.
  170.    D            CALL MG_CHECKPOINT_CREATE_TYPES ( IERR )
  171.    D            ! Initialize the checkpoint file.
  172.    D            CALL MG_CHECKPOINT_INIT ( IERR )
  173.    D         END IF
  174.    D   
  175.    D         ! Before writing the grid vars, write a small header.
  176.    D         CALL MG_CHECKPOINT_TSTEP_HEADER ( IERR )
  177.    D   
  178.    D         DO IVAR = 1, NUM_VARS
  179.    D            CALL MG_CHECKPOINT_TSTEP_VAR ( IVAR, IERR )
  180.    D         END DO
  181.    D   
  182.    D         IF ( TSTEP == CP_INTERVAL ) THEN
  183.    D            CALL MG_CHECKPOINT_VERIFY ( IERR )
  184.    D         END IF
  185.    D   
  186.    D         CALL MPI_FILE_CLOSE(cp_filehandle, IERR)
  187.    D   
  188.        #endif _MG_CHECKPT
  189.        
  190.              RETURN
  191.        
  192.           END SUBROUTINE MG_CHECKPOINT
ftn-5002 ftn: NOTE MG_CHECKPOINT, File = MG_CHECKPOINT.F, Line = 192 
  Local variable "IVAR" is declared but neither defined nor used.

ftn-5002 ftn: NOTE MG_CHECKPOINT, File = MG_CHECKPOINT.F, Line = 192 
  Local variable "CP_NUM" is declared but neither defined nor used.

ftn-5002 ftn: NOTE MG_CHECKPOINT, File = MG_CHECKPOINT.F, Line = 192 
  Local variable "VIEW_DISP" is declared but neither defined nor used.

  193.        
  194.        #if defined _MG_CHECKPT
  195.    D   
  196.    D   !  ===================================================================================
  197.    D   
  198.    D   !  ===================================================================================
  199.    D   
  200.    D      SUBROUTINE MG_CHECKPOINT_CREATE_TYPES ( IERR )
  201.    D   
  202.    D         IMPLICIT NONE
  203.    D   
  204.    D         ! ---------------------
  205.    D         ! Argument Declarations
  206.    D         ! ---------------------
  207.    D   
  208.    D         INTEGER IERR                    ! Return status.
  209.    D   
  210.    D         ! ---------------
  211.    D         ! Local Variables
  212.    D         ! ---------------
  213.    D   
  214.    D         INTEGER(KIND=MPI_ADDRESS_KIND) ::  &
  215.    D            disp(3),          &
  216.    D            view_disp,        &
  217.    D            local_array_size
  218.    D         INTEGER ::            &
  219.    D            blocklen(3),       &
  220.    D            type(3),           &
  221.    D            gsizes(3),         &
  222.    D            psizes(3),         &
  223.    D            lsizes(3),         &
  224.    D            global_offsets(3), &
  225.    D            memsizes(3),       &
  226.    D            offsets(3),        &
  227.    D            I,                 &
  228.    D            status
  229.    D   
  230.    D   
  231.    D         ! ---------------------
  232.    D         ! Executable Statements
  233.    D         ! ---------------------
  234.    D   
  235.    D         IERR = 0
  236.    D   
  237.    D         CALL MPI_TYPE_GET_EXTENT( MPI_CHARACTER, CP_LB, SIZEOFCHAR,  IERR)
  238.    D         CALL MPI_TYPE_GET_EXTENT( MPI_INTEGER,   CP_LB, SIZEOFINT,   IERR)
  239.    D         CALL MPI_TYPE_GET_EXTENT( MPI_REAL8,     CP_LB, SIZEOFREAL8, IERR)
  240.    D   
  241.    D         !
  242.    D         ! Setup an MPI derived type for writing cmdline options
  243.    D         !
  244.    D         blocklen(1) = 16
  245.    D         blocklen(2) = 1024
  246.    D         blocklen(3) = 1
  247.    D   
  248.    D         disp(1) = 0
  249.    D         disp(2) = (SIZEOFINT*16)
  250.    D         disp(3) = disp(2) + (SIZEOFCHAR*1024)
  251.    D   
  252.    D         type(1) = MPI_INTEGER
  253.    D         type(2) = MPI_CHARACTER
  254.    D         type(3) = MPI_UB
  255.    D   
  256.    D         CALL MPI_TYPE_CREATE_STRUCT( 3, blocklen, disp, type, CP_CMDLINE_TYPE, IERR)
  257.    D         CALL MPI_TYPE_COMMIT( CP_CMDLINE_TYPE, IERR)
  258.    D   
  259.    D         CP_CMDLINE_EXTENT=SIZEOFINT*15
  260.    D         CALL MPI_TYPE_GET_EXTENT ( CP_CMDLINE_TYPE, CP_LB, CP_CMDLINE_EXTENT, IERR )
  261.    D   
  262.    D         !
  263.    D         ! Setup an MPI derived type for writing static config options
  264.    D         !
  265.    D         CALL MPI_TYPE_CONTIGUOUS( NUM_VARS, MPI_INTEGER, CP_GRIDSTOSUM_TYPE, IERR)
  266.    D         CALL MPI_TYPE_COMMIT( CP_GRIDSTOSUM_TYPE, IERR)
  267.    D         CALL MPI_TYPE_GET_EXTENT ( CP_GRIDSTOSUM_TYPE, CP_LB, CP_GRIDSTOSUM_EXTENT, IERR )
  268.    D   
  269.    D         CALL MPI_TYPE_CONTIGUOUS( 12, MPI_INTEGER, CP_PECOORDS_TYPE, IERR)
  270.    D         CALL MPI_TYPE_COMMIT( CP_PECOORDS_TYPE, IERR)
  271.    D         CALL MPI_TYPE_GET_EXTENT ( CP_PECOORDS_TYPE, CP_LB, CP_PECOORDS_EXTENT, IERR )
  272.    D   
  273.    D         !
  274.    D         ! Setup an MPI derived type for writing an array of PE coordinates
  275.    D         !
  276.    D         gsizes(1) = 1
  277.    D         gsizes(2) = NUMPES
  278.    D   
  279.    D         lsizes(1) = 1
  280.    D         lsizes(2) = 1
  281.    D   
  282.    D         global_offsets(1) = 0
  283.    D         global_offsets(2) = MYPE
  284.    D   
  285.    D         CALL MPI_TYPE_CREATE_SUBARRAY(2, gsizes, lsizes, global_offsets, MPI_ORDER_FORTRAN, &
  286.    D                                       CP_PECOORDS_TYPE, CP_PECOORDSARRAY_TYPE, IERR)
  287.    D         CALL MPI_TYPE_COMMIT(CP_PECOORDSARRAY_TYPE, IERR)
  288.    D         CALL MPI_TYPE_EXTENT ( CP_PECOORDSARRAY_TYPE, CP_PECOORDSARRAY_EXTENT, IERR )
  289.    D   
  290.    D         !
  291.    D         ! Setup an MPI derived type for writing a timestep header
  292.    D         !
  293.    D         CALL MPI_TYPE_CONTIGUOUS( MAX_GRIDS, MPI_REAL8, CP_GSUMOLD_TYPE, IERR)
  294.    D         CALL MPI_TYPE_COMMIT( CP_GSUMOLD_TYPE, IERR)
  295.    D         CALL MPI_TYPE_GET_EXTENT ( CP_GSUMOLD_TYPE, CP_LB, CP_GSUMOLD_EXTENT, IERR )
  296.    D   
  297.    D         blocklen(1) = 1
  298.    D         blocklen(2) = 1
  299.    D         blocklen(3) = 1
  300.    D   
  301.    D         disp(1) = 0
  302.    D         disp(2) = SIZEOFINT
  303.    D         disp(3) = disp(2)+(SIZEOFREAL8*MAX_GRIDS)
  304.    D   
  305.    D         type(1) = MPI_INTEGER
  306.    D         type(2) = CP_GSUMOLD_TYPE
  307.    D         type(3) = MPI_UB
  308.    D   
  309.    D         CALL MPI_TYPE_CREATE_STRUCT( 3, blocklen, disp, type, CP_TSHEADER_TYPE, IERR)
  310.    D         CALL MPI_TYPE_COMMIT( CP_TSHEADER_TYPE, IERR)
  311.    D   
  312.    D         CP_TSHEADER_EXTENT=SIZEOFINT+(SIZEOFREAL8*MAX_GRIDS)
  313.    D         CALL MPI_TYPE_GET_EXTENT ( CP_TSHEADER_TYPE, CP_LB, CP_TSHEADER_EXTENT, IERR )
  314.    D   
  315.    D         CALL MPI_TYPE_FREE ( CP_GSUMOLD_TYPE, IERR )
  316.    D   
  317.    D         !
  318.    D         ! Setup an MPI derived type for writing a grid variable without the ghost cells
  319.    D         !
  320.    D         gsizes(1) = NX*NPX
  321.    D         gsizes(2) = NY*NPY
  322.    D         gsizes(3) = NZ*NPZ
  323.    D   
  324.    D         psizes(1) = NPX
  325.    D         psizes(2) = NPY
  326.    D         psizes(3) = NPZ
  327.    D   
  328.    D         lsizes(1) = NX
  329.    D         lsizes(2) = NY
  330.    D         lsizes(3) = NZ
  331.    D   
  332.    D         global_offsets(1) = MYPX*NX
  333.    D         global_offsets(2) = MYPY*NY
  334.    D         global_offsets(3) = MYPZ*NZ
  335.    D   
  336.    D         memsizes(1) = lsizes(1)+2
  337.    D         memsizes(2) = lsizes(2)+2
  338.    D         memsizes(3) = lsizes(3)+2
  339.    D   
  340.    D         offsets(1) = 1
  341.    D         offsets(2) = 1
  342.    D         offsets(3) = 1
  343.    D   
  344.    D         CALL MPI_TYPE_CREATE_SUBARRAY(3, memsizes, lsizes, offsets, MPI_ORDER_FORTRAN, MPI_REAL8, CP_NOGHOST_TYPE, IERR)
  345.    D         CALL MPI_TYPE_COMMIT(CP_NOGHOST_TYPE, IERR)
  346.    D         CALL MPI_TYPE_EXTENT ( CP_NOGHOST_TYPE, CP_NOGHOST_EXTENT, IERR )
  347.    D   
  348.    D         CALL MPI_TYPE_CREATE_SUBARRAY(3, gsizes, lsizes, global_offsets, MPI_ORDER_FORTRAN, MPI_REAL8, CP_TSGRID_TYPE, IERR)
  349.    D         CALL MPI_TYPE_COMMIT(CP_TSGRID_TYPE, IERR)
  350.    D         CALL MPI_TYPE_EXTENT ( CP_TSGRID_TYPE, CP_TSGRID_EXTENT, IERR )
  351.    D   
  352.    D         RETURN
  353.    D   
  354.    D      END SUBROUTINE MG_CHECKPOINT_CREATE_TYPES
  355.    D   
  356.    D   !  ===================================================================================
  357.    D   
  358.    D      SUBROUTINE MG_CHECKPOINT_FREE_TYPES ( IERR )
  359.    D   
  360.    D         IMPLICIT NONE
  361.    D   
  362.    D         ! ---------------------
  363.    D         ! Argument Declarations
  364.    D         ! ---------------------
  365.    D   
  366.    D         INTEGER IERR                    ! Return status.
  367.    D   
  368.    D         ! ---------------
  369.    D         ! Local Variables
  370.    D         ! ---------------
  371.    D   
  372.    D   
  373.    D         ! ---------------------
  374.    D         ! Executable Statements
  375.    D         ! ---------------------
  376.    D   
  377.    D         IERR = 0
  378.    D   
  379.    D         CALL MPI_TYPE_FREE ( CP_CMDLINE_TYPE, IERR)
  380.    D         CALL MPI_TYPE_FREE ( CP_GRIDSTOSUM_TYPE, IERR)
  381.    D         CALL MPI_TYPE_FREE ( CP_PECOORDS_TYPE, IERR)
  382.    D         CALL MPI_TYPE_FREE ( CP_PECOORDSARRAY_TYPE, IERR)
  383.    D   
  384.    D         CALL MPI_TYPE_FREE ( CP_TSHEADER_TYPE, IERR )
  385.    D   
  386.    D         CALL MPI_TYPE_FREE ( CP_TSGRID_TYPE, IERR )
  387.    D         CALL MPI_TYPE_FREE ( CP_NOGHOST_TYPE, IERR )
  388.    D   
  389.    D         RETURN
  390.    D   
  391.    D      END SUBROUTINE MG_CHECKPOINT_FREE_TYPES
  392.    D   
  393.    D   !  ===================================================================================
  394.    D   
  395.    D   !  ===================================================================================
  396.    D   
  397.    D      SUBROUTINE MG_CHECKPOINT_INIT ( IERR )
  398.    D   
  399.    D         IMPLICIT NONE
  400.    D   
  401.    D         ! ---------------------
  402.    D         ! Argument Declarations
  403.    D         ! ---------------------
  404.    D   
  405.    D         INTEGER IERR                    ! Return status.
  406.    D   
  407.    D         ! ---------------
  408.    D         ! Local Variables
  409.    D         ! ---------------
  410.    D   
  411.    D         INTEGER(KIND=MPI_ADDRESS_KIND) ::  &
  412.    D            view_disp,        &
  413.    D            local_array_size
  414.    D         INTEGER ::            &
  415.    D            I
  416.    D   
  417.    D         TYPE ( CMDLINE_OPTIONS_TYPE ) :: CMDLINE_OPTIONS
  418.    D         INTEGER(KIND=MG_INT)          :: MY_GRIDS_TO_SUM(MAX_GRIDS) ! boolean
  419.    D         TYPE ( PE_COORDS_TYPE )       :: PE_COORDS
  420.    D   
  421.    D         ! ---------------------
  422.    D         ! Executable Statements
  423.    D         ! ---------------------
  424.    D   
  425.    D         IERR = 0
  426.    D   
  427.    D         CMDLINE_OPTIONS%REPORT_DIFFUSION=REPORT_DIFFUSION
  428.    D         CMDLINE_OPTIONS%SCALING=SCALING
  429.    D         CMDLINE_OPTIONS%COMM_METHOD=COMM_METHOD
  430.    D         CMDLINE_OPTIONS%STENCIL=STENCIL
  431.    D         CMDLINE_OPTIONS%NUM_SPIKES=NUM_SPIKES
  432.    D         CMDLINE_OPTIONS%NPX=NPX
  433.    D         CMDLINE_OPTIONS%NPY=NPY
  434.    D         CMDLINE_OPTIONS%NPZ=NPZ
  435.    D         CMDLINE_OPTIONS%NX=NX
  436.    D         CMDLINE_OPTIONS%NY=NY
  437.    D         CMDLINE_OPTIONS%NZ=NZ
  438.    D         CMDLINE_OPTIONS%NUM_VARS=NUM_VARS
  439.    D         CMDLINE_OPTIONS%NUM_TSTEPS=NUM_TSTEPS
  440.    D         CMDLINE_OPTIONS%PERCENT_SUM=PERCENT_SUM
  441.    D         CMDLINE_OPTIONS%CP_INTERVAL=CP_INTERVAL
  442.    D         CMDLINE_OPTIONS%CP_FILE=CP_FILE
  443.    D   
  444.    D         DO I = 1, NUM_VARS
  445.    D            MY_GRIDS_TO_SUM(I)=GRIDS_TO_SUM(I)
  446.    D         END DO
  447.    D   
  448.    D         PE_COORDS%MY_GLOBAL_NX_START=MY_GLOBAL_NX_START
  449.    D         PE_COORDS%MY_GLOBAL_NY_START=MY_GLOBAL_NY_START
  450.    D         PE_COORDS%MY_GLOBAL_NZ_START=MY_GLOBAL_NZ_START
  451.    D         PE_COORDS%MY_GLOBAL_NX_END=MY_GLOBAL_NX_END
  452.    D         PE_COORDS%MY_GLOBAL_NY_END=MY_GLOBAL_NY_END
  453.    D         PE_COORDS%MY_GLOBAL_NZ_END=MY_GLOBAL_NZ_END
  454.    D         PE_COORDS%NUM_NEIGHS=NUM_NEIGHS
  455.    D         PE_COORDS%NUM_SUM_GRID=NUM_SUM_GRID
  456.    D         PE_COORDS%MYPE=MYPE
  457.    D         PE_COORDS%MYPX=MYPX
  458.    D         PE_COORDS%MYPY=MYPY
  459.    D         PE_COORDS%MYPZ=MYPZ
  460.    D   
  461.    D   
  462.    D         view_disp=SIZEOFINT
  463.    D   !      WRITE (*,*) 'view_disp=', view_disp
  464.    D         call MPI_FILE_SET_VIEW(cp_filehandle, view_disp, CP_CMDLINE_TYPE, &
  465.    D                              CP_CMDLINE_TYPE, 'native', &
  466.    D                              MPI_INFO_NULL, IERR)
  467.    D   
  468.    D         IF ( MYPE == ROOT_PE ) THEN
  469.    D            CALL MPI_FILE_WRITE (cp_filehandle, CMDLINE_OPTIONS, CP_CMDLINE_EXTENT, MPI_BYTE, MPI_STATUS_IGNORE, IERR)
  470.    D         END IF
  471.    D   
  472.    D         view_disp=SIZEOFINT+        &
  473.    D                   CP_CMDLINE_EXTENT
  474.    D   !      WRITE (*,*) 'view_disp=', view_disp
  475.    D         call MPI_FILE_SET_VIEW(cp_filehandle, view_disp, CP_GRIDSTOSUM_TYPE, &
  476.    D                              CP_GRIDSTOSUM_TYPE, 'native', &
  477.    D                              MPI_INFO_NULL, IERR)
  478.    D   
  479.    D         IF ( MYPE == ROOT_PE ) THEN
  480.    D            CALL MPI_FILE_WRITE (cp_filehandle, MY_GRIDS_TO_SUM, CP_GRIDSTOSUM_EXTENT, MPI_BYTE, MPI_STATUS_IGNORE, IERR)
  481.    D         END IF
  482.    D   
  483.    D         view_disp=SIZEOFINT+           &
  484.    D                   CP_CMDLINE_EXTENT+   &
  485.    D                   CP_GRIDSTOSUM_EXTENT
  486.    D   !      WRITE (*,*) 'view_disp=', view_disp
  487.    D         call MPI_FILE_SET_VIEW(cp_filehandle, view_disp, &
  488.    D                              CP_PECOORDS_TYPE, &
  489.    D                              CP_PECOORDSARRAY_TYPE, 'native', &
  490.    D                              MPI_INFO_NULL, IERR)
  491.    D   
  492.    D         CALL MPI_FILE_WRITE_ALL ( cp_filehandle, PE_COORDS, 1, CP_PECOORDS_TYPE, MPI_STATUS_IGNORE, IERR)
  493.    D   
  494.    D         RETURN
  495.    D   
  496.    D      END SUBROUTINE MG_CHECKPOINT_INIT
  497.    D   
  498.    D   
  499.    D   !  ===================================================================================
  500.    D   
  501.    D   !  ===================================================================================
  502.    D   
  503.    D      SUBROUTINE MG_CHECKPOINT_TSTEP_HEADER ( IERR )
  504.    D   
  505.    D         IMPLICIT NONE
  506.    D   
  507.    D         ! ---------------------
  508.    D         ! Argument Declarations
  509.    D         ! ---------------------
  510.    D   
  511.    D         INTEGER IERR                    ! Return status.
  512.    D   
  513.    D         ! ---------------
  514.    D         ! Local Variables
  515.    D         ! ---------------
  516.    D   
  517.    D         INTEGER(KIND=MPI_ADDRESS_KIND) ::  &
  518.    D            cp_num,           & ! the current checkpoint number (0 based)
  519.    D            cp_size,          & ! the size in bytes of one checkpoint (header+grids)
  520.    D            view_disp
  521.    D         INTEGER ::  &
  522.    D            I,       &
  523.    D            status
  524.    D   
  525.    D         TYPE ( TSHEADER_TYPE )        :: TSHEADER
  526.    D   
  527.    D         ! ---------------------
  528.    D         ! Executable Statements
  529.    D         ! ---------------------
  530.    D   
  531.    D         IERR = 0
  532.    D   
  533.    D   !      IF ( MYPE == ROOT_PE ) THEN
  534.    D   !         WRITE(*,*)                                                                  &
  535.    D   !                    'CMDLINE_EXTENT=', CP_CMDLINE_EXTENT,                            &
  536.    D   !                    'GRIDSTOSUM_EXTENT=', CP_GRIDSTOSUM_EXTENT,                      &
  537.    D   !                    'GSUMOLD_EXTENT=', CP_GSUMOLD_EXTENT,                            &
  538.    D   !                    'TSHEADER_EXTENT=', CP_TSHEADER_EXTENT
  539.    D   !      END IF
  540.    D   
  541.    D   
  542.    D         TSHEADER%TSTEP=TSTEP
  543.    D         IF ( REPORT_DIFFUSION ) THEN
  544.    D            DO I = 1, NUM_VARS
  545.    D               TSHEADER%GSUM_OLD(I)=GSUM_OLD(I)
  546.    D            END DO
  547.    D         END IF
  548.    D   
  549.    D         cp_num =((tstep/cp_interval)-1)
  550.    D         cp_size=(CP_TSHEADER_EXTENT+(CP_TSGRID_EXTENT*NUM_VARS))
  551.    D   
  552.    D         view_disp=SIZEOFINT+               &
  553.    D                   CP_CMDLINE_EXTENT+       &
  554.    D                   CP_GRIDSTOSUM_EXTENT+    &
  555.    D                   CP_PECOORDSARRAY_EXTENT+ &
  556.    D                   (cp_num*cp_size)
  557.    D   !      WRITE (*,*) 'view_disp=', view_disp
  558.    D         call MPI_FILE_SET_VIEW(cp_filehandle, view_disp, CP_TSHEADER_TYPE, &
  559.    D                              CP_TSHEADER_TYPE, 'native', &
  560.    D                              MPI_INFO_NULL, IERR)
  561.    D   
  562.    D         IF ( MYPE == ROOT_PE ) THEN
  563.    D            CALL MPI_FILE_WRITE (cp_filehandle, TSHEADER, CP_TSHEADER_EXTENT, MPI_BYTE, MPI_STATUS_IGNORE, IERR)
  564.    D         END IF
  565.    D   
  566.    D         RETURN
  567.    D   
  568.    D      END SUBROUTINE MG_CHECKPOINT_TSTEP_HEADER
  569.    D   
  570.    D   !  ===================================================================================
  571.    D   
  572.    D   !  ===================================================================================
  573.    D   
  574.    D      SUBROUTINE MG_CHECKPOINT_TSTEP_VAR ( IVAR, IERR )
  575.    D   
  576.    D         IMPLICIT NONE
  577.    D   
  578.    D         ! ---------------------
  579.    D         ! Argument Declarations
  580.    D         ! ---------------------
  581.    D   
  582.    D         INTEGER IVAR
  583.    D         INTEGER IERR                    ! Return status.
  584.    D   
  585.    D         ! ---------------
  586.    D         ! Local Variables
  587.    D         ! ---------------
  588.    D   
  589.    D         INTEGER(KIND=MPI_ADDRESS_KIND) ::  &
  590.    D            cp_num,           &
  591.    D            cp_size,          &
  592.    D            view_disp,        &
  593.    D            local_array_size
  594.    D         INTEGER ::            &
  595.    D            I,                 &
  596.    D            status
  597.    D   
  598.    D         ! ---------------------
  599.    D         ! Executable Statements
  600.    D         ! ---------------------
  601.    D   
  602.    D         cp_num=((tstep/cp_interval)-1)
  603.    D         cp_size=(CP_TSHEADER_EXTENT+(CP_TSGRID_EXTENT*NUM_VARS))
  604.    D   
  605.    D         view_disp=SIZEOFINT+                  &
  606.    D                   CP_CMDLINE_EXTENT+          &
  607.    D                   CP_GRIDSTOSUM_EXTENT+       &
  608.    D                   CP_PECOORDSARRAY_EXTENT+    &
  609.    D                   (cp_num*cp_size)+           &
  610.    D                   CP_TSHEADER_EXTENT+         &
  611.    D                   (CP_TSGRID_EXTENT*(IVAR-1))
  612.    D   
  613.    D   !      WRITE (*,*) 'view_disp=', view_disp
  614.    D         call MPI_FILE_SET_VIEW(cp_filehandle, view_disp, &
  615.    D                              MPI_REAL8, &
  616.    D                              CP_TSGRID_TYPE, 'native', &
  617.    D                              MPI_INFO_NULL, IERR)
  618.    D   
  619.    D               SELECT CASE ( IVAR )
  620.    D   
  621.    D                  CASE ( 1 )
  622.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID1, IERR )
  623.    D                  CASE ( 2 )
  624.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID2, IERR )
  625.    D                  CASE ( 3 )
  626.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID3, IERR )
  627.    D                  CASE ( 4 )
  628.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID4, IERR )
  629.    D                  CASE ( 5 )
  630.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID5, IERR )
  631.    D                  CASE ( 6 )
  632.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID6, IERR )
  633.    D                  CASE ( 7 )
  634.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID7, IERR )
  635.    D                  CASE ( 8 )
  636.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID8, IERR )
  637.    D                  CASE ( 9 )
  638.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID9, IERR )
  639.    D                  CASE ( 10 )
  640.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID10, IERR )
  641.    D                  CASE ( 11 )
  642.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID11, IERR )
  643.    D                  CASE ( 12 )
  644.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID12, IERR )
  645.    D                  CASE ( 13 )
  646.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID13, IERR )
  647.    D                  CASE ( 14 )
  648.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID14, IERR )
  649.    D                  CASE ( 15 )
  650.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID15, IERR )
  651.    D                  CASE ( 16 )
  652.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID16, IERR )
  653.    D                  CASE ( 17 )
  654.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID17, IERR )
  655.    D                  CASE ( 18 )
  656.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID18, IERR )
  657.    D                  CASE ( 19 )
  658.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID19, IERR )
  659.    D                  CASE ( 20 )
  660.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID20, IERR )
  661.    D                  CASE ( 21 )
  662.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID21, IERR )
  663.    D                  CASE ( 22 )
  664.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID22, IERR )
  665.    D                  CASE ( 23 )
  666.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID23, IERR )
  667.    D                  CASE ( 24 )
  668.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID24, IERR )
  669.    D                  CASE ( 25 )
  670.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID25, IERR )
  671.    D                  CASE ( 26 )
  672.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID26, IERR )
  673.    D                  CASE ( 27 )
  674.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID27, IERR )
  675.    D                  CASE ( 28 )
  676.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID28, IERR )
  677.    D                  CASE ( 29 )
  678.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID29, IERR )
  679.    D                  CASE ( 30 )
  680.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID30, IERR )
  681.    D                  CASE ( 31 )
  682.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID31, IERR )
  683.    D                  CASE ( 32 )
  684.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID32, IERR )
  685.    D                  CASE ( 33 )
  686.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID33, IERR )
  687.    D                  CASE ( 34 )
  688.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID34, IERR )
  689.    D                  CASE ( 35 )
  690.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID35, IERR )
  691.    D                  CASE ( 36 )
  692.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID36, IERR )
  693.    D                  CASE ( 37 )
  694.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID37, IERR )
  695.    D                  CASE ( 38 )
  696.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID38, IERR )
  697.    D                  CASE ( 39 )
  698.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID39, IERR )
  699.    D                  CASE ( 40 )
  700.    D                     CALL MG_CHECKPOINT_TSTEP_GRID ( GRID40, IERR )
  701.    D               END SELECT
  702.    D   
  703.    D         RETURN
  704.    D   
  705.    D      END SUBROUTINE MG_CHECKPOINT_TSTEP_VAR
  706.    D   
  707.    D   !  ===================================================================================
  708.    D   
  709.    D   !  ===================================================================================
  710.    D   
  711.    D      SUBROUTINE MG_CHECKPOINT_TSTEP_GRID ( GRID, IERR )
  712.    D   
  713.    D         ! ---------------------
  714.    D         ! Argument Declarations
  715.    D         ! ---------------------
  716.    D   
  717.    D         REAL(KIND=MG_REAL), DIMENSION(0:NX+1, 0:NY+1, 0:NZ+1), INTENT(INOUT) :: GRID
  718.    D         INTEGER IERR           ! Return status
  719.    D   
  720.    D         ! ---------------------
  721.    D         ! Executable Statements
  722.    D         ! ---------------------
  723.    D   
  724.    D         CALL MPI_FILE_WRITE_ALL ( cp_filehandle, GRID, 1, CP_NOGHOST_TYPE, MPI_STATUS_IGNORE, IERR)
  725.    D   
  726.    D         RETURN
  727.    D   
  728.    D      END SUBROUTINE MG_CHECKPOINT_TSTEP_GRID
  729.    D   
  730.    D   !  ===================================================================================
  731.    D   
  732.    D   
  733.    D   !  ===================================================================================
  734.    D   
  735.    D      SUBROUTINE MG_CHECKPOINT_VERIFY ( IERR )
  736.    D   
  737.    D         IMPLICIT NONE
  738.    D   
  739.    D         ! ---------------------
  740.    D         ! Argument Declarations
  741.    D         ! ---------------------
  742.    D   
  743.    D         INTEGER IERR                    ! Return status.
  744.    D   
  745.    D         ! ---------------
  746.    D         ! Local Variables
  747.    D         ! ---------------
  748.    D   
  749.    D         INTEGER(KIND=MPI_ADDRESS_KIND) ::  &
  750.    D            cp_num,           &
  751.    D            cp_size,          &
  752.    D            view_disp,        &
  753.    D            local_array_size
  754.    D         INTEGER ::  &
  755.    D            I,       &
  756.    D            J,       &
  757.    D            K
  758.    D   
  759.    D         TYPE ( CMDLINE_OPTIONS_TYPE ) :: CMDLINE_OPTIONS
  760.    D         INTEGER(KIND=MG_INT)          :: MY_GRIDS_TO_SUM(MAX_GRIDS) ! boolean
  761.    D         TYPE ( PE_COORDS_TYPE )       :: PE_COORDS
  762.    D         TYPE ( TSHEADER_TYPE )        :: TSHEADER
  763.    D   
  764.    D         REAL(KIND=MG_REAL), DIMENSION(0:NX+1, 0:NY+1, 0:NZ+1) :: MYGRID
  765.    D   
  766.    D         ! ---------------------
  767.    D         ! Executable Statements
  768.    D         ! ---------------------
  769.    D   
  770.    D         IERR = 0
  771.    D   
  772.    D   
  773.    D         cp_num=((tstep/cp_interval)-1)
  774.    D         cp_size=(CP_TSHEADER_EXTENT+(CP_TSGRID_EXTENT*NUM_VARS))
  775.    D   
  776.    D   
  777.    D         view_disp=SIZEOFINT
  778.    D   !      WRITE (*,*) 'view_disp=', view_disp
  779.    D         call MPI_FILE_SET_VIEW(cp_filehandle, view_disp, CP_CMDLINE_TYPE, &
  780.    D                              CP_CMDLINE_TYPE, 'native', &
  781.    D                              MPI_INFO_NULL, IERR)
  782.    D   
  783.    D         IF ( MYPE == ROOT_PE ) THEN
  784.    D            CALL MPI_FILE_READ (cp_filehandle, CMDLINE_OPTIONS, CP_CMDLINE_EXTENT, MPI_BYTE, MPI_STATUS_IGNORE, IERR)
  785.    D   
  786.    D      !      IF (CMDLINE_OPTIONS%REPORT_DIFFUSION /= REPORT_DIFFUSION ) THEN
  787.    D      !         WRITE (*,*) 'CMDLINE_OPTIONS%REPORT_DIFFUSION != REPORT_DIFFUSION'
  788.    D      !      END IF
  789.    D            IF (CMDLINE_OPTIONS%SCALING         /= SCALING )         THEN
  790.    D               WRITE (*,*) 'CMDLINE_OPTIONS%SCALING         != SCALING', CMDLINE_OPTIONS%SCALING, '!=', SCALING
  791.    D            END IF
  792.    D            IF (CMDLINE_OPTIONS%COMM_METHOD     /= COMM_METHOD )     THEN
  793.    D               WRITE (*,*) 'CMDLINE_OPTIONS%COMM_METHOD     != COMM_METHOD', CMDLINE_OPTIONS%COMM_METHOD, '!=', COMM_METHOD
  794.    D            END IF
  795.    D            IF (CMDLINE_OPTIONS%STENCIL         /= STENCIL )         THEN
  796.    D               WRITE (*,*) 'CMDLINE_OPTIONS%STENCIL         != STENCIL'
  797.    D            END IF
  798.    D            IF (CMDLINE_OPTIONS%NUM_SPIKES      /= NUM_SPIKES )      THEN
  799.    D               WRITE (*,*) 'CMDLINE_OPTIONS%NUM_SPIKES      != NUM_SPIKES', CMDLINE_OPTIONS%NUM_SPIKES, '!=', NUM_SPIKES
  800.    D            END IF
  801.    D            IF (CMDLINE_OPTIONS%NPX             /= NPX )             THEN
  802.    D               WRITE (*,*) 'CMDLINE_OPTIONS%NPX             != NPX'
  803.    D            END IF
  804.    D            IF (CMDLINE_OPTIONS%NPY             /= NPY )             THEN
  805.    D               WRITE (*,*) 'CMDLINE_OPTIONS%NPY             != NPY'
  806.    D            END IF
  807.    D            IF (CMDLINE_OPTIONS%NPZ             /= NPZ )             THEN
  808.    D               WRITE (*,*) 'CMDLINE_OPTIONS%NPZ             != NPZ'
  809.    D            END IF
  810.    D            IF (CMDLINE_OPTIONS%NX              /= NX )              THEN
  811.    D               WRITE (*,*) 'CMDLINE_OPTIONS%NX              != NX'
  812.    D            END IF
  813.    D            IF (CMDLINE_OPTIONS%NY              /= NY )              THEN
  814.    D               WRITE (*,*) 'CMDLINE_OPTIONS%NY              != NY'
  815.    D            END IF
  816.    D            IF (CMDLINE_OPTIONS%NZ              /= NZ )              THEN
  817.    D               WRITE (*,*) 'CMDLINE_OPTIONS%NZ              != NZ'
  818.    D            END IF
  819.    D            IF (CMDLINE_OPTIONS%NUM_VARS        /= NUM_VARS )        THEN
  820.    D               WRITE (*,*) 'CMDLINE_OPTIONS%NUM_VARS        != NUM_VARS'
  821.    D            END IF
  822.    D            IF (CMDLINE_OPTIONS%NUM_TSTEPS      /= NUM_TSTEPS )      THEN
  823.    D               WRITE (*,*) 'CMDLINE_OPTIONS%NUM_TSTEPS      != NUM_TSTEPS'
  824.    D            END IF
  825.    D            IF (CMDLINE_OPTIONS%PERCENT_SUM     /= PERCENT_SUM )     THEN
  826.    D               WRITE (*,*) 'CMDLINE_OPTIONS%PERCENT_SUM     != PERCENT_SUM'
  827.    D            END IF
  828.    D            IF (CMDLINE_OPTIONS%CP_INTERVAL     /= CP_INTERVAL )     THEN
  829.    D               WRITE (*,*) 'CMDLINE_OPTIONS%CP_INTERVAL     != CP_INTERVAL'
  830.    D            END IF
  831.    D            IF (CMDLINE_OPTIONS%CP_FILE         /= CP_FILE )     THEN
  832.    D               WRITE (*,*) 'CMDLINE_OPTIONS%CP_FILE         != CP_FILE'
  833.    D            END IF
  834.    D         END IF
  835.    D   
  836.    D   
  837.    D         view_disp=SIZEOFINT+        &
  838.    D                   CP_CMDLINE_EXTENT
  839.    D   !      WRITE (*,*) 'view_disp=', view_disp
  840.    D         call MPI_FILE_SET_VIEW(cp_filehandle, view_disp, CP_GRIDSTOSUM_TYPE, &
  841.    D                              CP_GRIDSTOSUM_TYPE, 'native', &
  842.    D                              MPI_INFO_NULL, IERR)
  843.    D   
  844.    D         IF ( MYPE == ROOT_PE ) THEN
  845.    D            CALL MPI_FILE_READ (cp_filehandle, MY_GRIDS_TO_SUM, CP_GRIDSTOSUM_EXTENT, MPI_BYTE, MPI_STATUS_IGNORE, IERR)
  846.    D         END IF
  847.    D   
  848.    D         view_disp=SIZEOFINT+                  &
  849.    D                   CP_CMDLINE_EXTENT+          &
  850.    D                   CP_GRIDSTOSUM_EXTENT
  851.    D   !      WRITE (*,*) 'view_disp=', view_disp
  852.    D         call MPI_FILE_SET_VIEW(cp_filehandle, view_disp, &
  853.    D                              CP_PECOORDS_TYPE, &
  854.    D                              CP_PECOORDSARRAY_TYPE, 'native', &
  855.    D                              MPI_INFO_NULL, IERR)
  856.    D   
  857.    D         CALL MPI_FILE_READ_ALL ( cp_filehandle, PE_COORDS, 1, CP_PECOORDS_TYPE, MPI_STATUS_IGNORE, IERR)
  858.    D   
  859.    D         IF ( PE_COORDS%MY_GLOBAL_NX_START /= MY_GLOBAL_NX_START ) THEN
  860.    D            WRITE (*,*) ' PE_COORDS%MY_GLOBAL_NX_START /= MY_GLOBAL_NX_START'
  861.    D         END IF
  862.    D         IF ( PE_COORDS%MY_GLOBAL_NY_START /= MY_GLOBAL_NY_START ) THEN
  863.    D            WRITE (*,*) ' PE_COORDS%MY_GLOBAL_NY_START /= MY_GLOBAL_NY_START'
  864.    D         END IF
  865.    D         IF ( PE_COORDS%MY_GLOBAL_NZ_START /= MY_GLOBAL_NZ_START ) THEN
  866.    D            WRITE (*,*) ' PE_COORDS%MY_GLOBAL_NZ_START /= MY_GLOBAL_NZ_START'
  867.    D         END IF
  868.    D         IF ( PE_COORDS%MY_GLOBAL_NX_END /= MY_GLOBAL_NX_END ) THEN
  869.    D            WRITE (*,*) ' PE_COORDS%MY_GLOBAL_NX_END /= MY_GLOBAL_NX_END'
  870.    D         END IF
  871.    D         IF ( PE_COORDS%MY_GLOBAL_NY_END /= MY_GLOBAL_NY_END ) THEN
  872.    D            WRITE (*,*) ' PE_COORDS%MY_GLOBAL_NY_END /= MY_GLOBAL_NY_END'
  873.    D         END IF
  874.    D         IF ( PE_COORDS%MY_GLOBAL_NZ_END /= MY_GLOBAL_NZ_END ) THEN
  875.    D            WRITE (*,*) ' PE_COORDS%MY_GLOBAL_NZ_END /= MY_GLOBAL_NZ_END'
  876.    D         END IF
  877.    D         IF ( PE_COORDS%NUM_NEIGHS /= NUM_NEIGHS ) THEN
  878.    D            WRITE (*,*) ' PE_COORDS%NUM_NEIGHS /= NUM_NEIGHS'
  879.    D         END IF
  880.    D         IF ( PE_COORDS%NUM_SUM_GRID /= NUM_SUM_GRID ) THEN
  881.    D            WRITE (*,*) ' PE_COORDS%NUM_SUM_GRID /= NUM_SUM_GRID'
  882.    D         END IF
  883.    D         IF ( PE_COORDS%MYPE /= MYPE ) THEN
  884.    D            WRITE (*,*) ' PE_COORDS%MYPE /= MYPE'
  885.    D         END IF
  886.    D         IF ( PE_COORDS%MYPX /= MYPX ) THEN
  887.    D            WRITE (*,*) ' PE_COORDS%MYPX /= MYPX'
  888.    D         END IF
  889.    D         IF ( PE_COORDS%MYPY /= MYPY ) THEN
  890.    D            WRITE (*,*) ' PE_COORDS%MYPY /= MYPY'
  891.    D         END IF
  892.    D         IF ( PE_COORDS%MYPZ /= MYPZ ) THEN
  893.    D            WRITE (*,*) ' PE_COORDS%MYPZ /= MYPZ'
  894.    D         END IF
  895.    D   
  896.    D   
  897.    D         view_disp=SIZEOFINT+                  &
  898.    D                   CP_CMDLINE_EXTENT+          &
  899.    D                   CP_GRIDSTOSUM_EXTENT+       &
  900.    D                   CP_PECOORDSARRAY_EXTENT+    &
  901.    D                   (cp_num*cp_size)
  902.    D   !      WRITE (*,*) 'view_disp=', view_disp
  903.    D         call MPI_FILE_SET_VIEW(cp_filehandle, view_disp, CP_TSHEADER_TYPE, &
  904.    D                              CP_TSHEADER_TYPE, 'native', &
  905.    D                              MPI_INFO_NULL, IERR)
  906.    D   
  907.    D         IF ( MYPE == ROOT_PE ) THEN
  908.    D            CALL MPI_FILE_READ (cp_filehandle, TSHEADER, CP_TSHEADER_EXTENT, MPI_BYTE, MPI_STATUS_IGNORE, IERR)
  909.    D            IF ( TSHEADER%TSTEP /= TSTEP ) THEN
  910.    D               WRITE (*,*) ' TSHEADER%TSTEP != TSTEP', TSHEADER%TSTEP, '!=', TSTEP
  911.    D            END IF
  912.    D            IF ( REPORT_DIFFUSION ) THEN
  913.    D               DO I = 1, NUM_VARS
  914.    D                  IF ( TSHEADER%GSUM_OLD(I) /= GSUM_OLD(I) ) THEN
  915.    D                        WRITE (*,*) ' TSHEADER%GSUM_OLD(I) != GSUM_OLD(I)'
  916.    D                  END IF
  917.    D               END DO
  918.    D            END IF
  919.    D         END IF
  920.    D   
  921.    D   
  922.    D   
  923.    D         cp_num =((tstep/cp_interval)-1)
  924.    D         cp_size=(CP_TSHEADER_EXTENT+(CP_TSGRID_EXTENT*NUM_VARS))
  925.    D   
  926.    D         view_disp=SIZEOFINT+                  &
  927.    D                   CP_CMDLINE_EXTENT+          &
  928.    D                   CP_GRIDSTOSUM_EXTENT+       &
  929.    D                   CP_PECOORDSARRAY_EXTENT+    &
  930.    D                   (cp_num*cp_size)+           &
  931.    D                   CP_TSHEADER_EXTENT
  932.    D   !      WRITE (*,*) 'view_disp=', view_disp
  933.    D         call MPI_FILE_SET_VIEW(cp_filehandle, view_disp, &
  934.    D                              MPI_REAL8, &
  935.    D                              CP_TSGRID_TYPE, 'native', &
  936.    D                              MPI_INFO_NULL, IERR)
  937.    D   
  938.    D         CALL MPI_FILE_READ_ALL ( cp_filehandle, MYGRID, 1, CP_NOGHOST_TYPE, MPI_STATUS_IGNORE, IERR)
  939.    D   
  940.    D         DO K = 1, NZ
  941.    D            DO J = 1, NY
  942.    D               DO I = 1, NX
  943.    D                  IF ( MYGRID ( I, J, K ) /= GRID1 ( I, J, K ) ) THEN
  944.    D                     WRITE (*,*) 'MYGRID ( I, J, K ) != GRID1 ( I, J, K )', MYGRID (I,J,K), '!=', GRID1(I,J,K), I,J,K
  945.    D                  END IF
  946.    D               END DO
  947.    D            END DO
  948.    D         END DO
  949.    D   
  950.    D         RETURN
  951.    D   
  952.    D      END SUBROUTINE MG_CHECKPOINT_VERIFY
  953.    D   
  954.        #endif _MG_CHECKPT
  955.        
  956.        #endif _MG_MPI
  957.        
  958.        !  ===================================================================================
  959.        
  960.        END MODULE MG_CHECKPOINT_MOD



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            C r o s s   R e f e r e n c e   for   MG_CHECKPOINT_MOD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                                      Storage/Owner                   
----                                      -------------                   

CMDLINE_OPTIONS_TYPE                                                      
  Derived type
  Declared        70
  Defined   
  Referenced

COMM_METHOD                               Structure offset=64             
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        74
  Defined   
  Referenced

CP_CMDLINE_EXTENT                         Static offset=0                 
  Integer(kind=8)
  Declared       122
  Defined   
  Referenced

CP_CMDLINE_TYPE                           Static offset=64                
  Integer
  Declared       113
  Defined   
  Referenced

CP_FILE                                   Static offset=128               
  Character(1024)
  Declared        61
  Defined   
  Referenced

CP_FILE                                   Structure offset=480            
  Character(1024), Component of CMDLINE_OPTIONS_TYPE
  Declared        87
  Defined   
  Referenced

CP_FILEHANDLE                             Static offset=8320              
  Integer
  Declared       132
  Defined   
  Referenced

CP_GRIDSTOSUM_EXTENT                      Static offset=8384              
  Integer(kind=8)
  Declared       123
  Defined   
  Referenced

CP_GRIDSTOSUM_TYPE                        Static offset=8448              
  Integer
  Declared       114
  Defined   
  Referenced

CP_GSUMOLD_EXTENT                         Static offset=8512              
  Integer(kind=8)
  Declared       126
  Defined   
  Referenced

CP_GSUMOLD_TYPE                           Static offset=8576              
  Integer
  Declared       117
  Defined   
  Referenced

CP_INTERVAL                               Static offset=8640              
  Integer(kind=4)
  Declared        58
  Defined   
  Referenced

CP_INTERVAL                               Structure offset=448            
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        86
  Defined   
  Referenced

CP_LB                                     Static offset=8704              
  Integer(kind=8)
  Declared       130
  Defined   
  Referenced

CP_NOGHOST_EXTENT                         Static offset=8768              
  Integer(kind=8)
  Declared       128
  Defined   
  Referenced

CP_NOGHOST_TYPE                           Static offset=8832              
  Integer
  Declared       119
  Defined   
  Referenced

CP_NUM                                    Stack                           
  Variable, Integer(kind=4)
  Declared       146
  Defined   
  Referenced

CP_PECOORDSARRAY_EXTENT                   Static offset=8896              
  Integer(kind=8)
  Declared       125
  Defined   
  Referenced

CP_PECOORDSARRAY_TYPE                     Static offset=8960              
  Integer
  Declared       116
  Defined   
  Referenced

CP_PECOORDS_EXTENT                        Static offset=9024              
  Integer(kind=8)
  Declared       124
  Defined   
  Referenced

CP_PECOORDS_TYPE                          Static offset=9088              
  Integer
  Declared       115
  Defined   
  Referenced

CP_TSGRID_EXTENT                          Static offset=9152              
  Integer(kind=8)
  Declared       129
  Defined   
  Referenced

CP_TSGRID_TYPE                            Static offset=9216              
  Integer
  Declared       120
  Defined   
  Referenced

CP_TSHEADER_EXTENT                        Static offset=9280              
  Integer(kind=8)
  Declared       127
  Defined   
  Referenced

CP_TSHEADER_TYPE                          Static offset=9344              
  Integer
  Declared       118
  Defined   
  Referenced

GSUM_OLD                                  Structure offset=64             
  Integer(kind=8), Component of TSHEADER_TYPE, Dimension(40)
  Declared       109
  Defined   
  Referenced

IERR                                      MG_CHECKPOINT                   
  Dummy Argument, Integer
  Declared       136     140
  Defined        152
  Referenced

IVAR                                      Stack                           
  Variable, Integer(kind=4)
  Declared       146
  Defined   
  Referenced

MAX_GRIDS                                                                 
  Parameter, Integer(kind=4)
  Declared        68
  Defined   
  Referenced     109

MG_CHECKPOINT                                                             
  Subroutine, Module procedure
  Declared       136
  Defined   
  Referenced

MG_CHECKPOINT_MOD                                                         
  Module
  Declared        28
  Defined   
  Referenced

MG_CONSTANTS_MOD                                                          
  Module
  Declared  
  Defined   
  Referenced      52

MG_CONSTANTS_MOD                                                          
  Module, Used indirectly (from module MG_OPTIONS_MOD)
  Declared  
  Defined   
  Referenced

MG_INT                                    Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=1), Use assoc
  Declared  
  Defined   
  Referenced      57      68      72      73      74      75      76      77      78      79      80      81      82      83      84
            85      86      92      93      94      95      96      97      98      99     100     101     102     103     108
           146
  Referenced in contained procedure

MG_OPTIONS_MOD                                                            
  Module
  Declared  
  Defined   
  Referenced      53

MG_REAL                                   Module MG_CONSTANTS_MOD         
  Parameter, Integer(kind=1), Use assoc
  Declared  
  Defined   
  Referenced     109

MPIFCMB5                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIFCMB9                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIPRIV1                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIPRIV2                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPIPRIVC                                  Module MG_CONSTANTS_MOD         
  Common block 
  Declared  
  Defined   
  Referenced

MPI_ADDRESS_KIND                          Module MG_CONSTANTS_MOD         
  Parameter, Integer, Use assoc
  Declared  
  Defined   
  Referenced      63     122     123     124     125     126     127     128     129     130

MYPE                                      Structure offset=256            
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared       100
  Defined   
  Referenced

MYPX                                      Structure offset=288            
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared       101
  Defined   
  Referenced

MYPY                                      Structure offset=320            
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared       102
  Defined   
  Referenced

MYPZ                                      Structure offset=352            
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared       103
  Defined   
  Referenced

MY_GLOBAL_NX_END                          Structure offset=96             
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared        95
  Defined   
  Referenced

MY_GLOBAL_NX_START                        Structure offset=0              
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared        92
  Defined   
  Referenced

MY_GLOBAL_NY_END                          Structure offset=128            
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared        96
  Defined   
  Referenced

MY_GLOBAL_NY_START                        Structure offset=32             
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared        93
  Defined   
  Referenced

MY_GLOBAL_NZ_END                          Structure offset=160            
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared        97
  Defined   
  Referenced

MY_GLOBAL_NZ_START                        Structure offset=64             
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared        94
  Defined   
  Referenced

NPX                                       Structure offset=160            
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        77
  Defined   
  Referenced

NPY                                       Structure offset=192            
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        78
  Defined   
  Referenced

NPZ                                       Structure offset=224            
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        79
  Defined   
  Referenced

NUM_NEIGHS                                Structure offset=192            
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared        98
  Defined   
  Referenced

NUM_SPIKES                                Structure offset=128            
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        76
  Defined   
  Referenced

NUM_SUM_GRID                              Structure offset=224            
  Integer(kind=4), Component of PE_COORDS_TYPE
  Declared        99
  Defined   
  Referenced

NUM_TSTEPS                                Structure offset=384            
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        84
  Defined   
  Referenced

NUM_VARS                                  Structure offset=352            
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        83
  Defined   
  Referenced

NX                                        Structure offset=256            
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        80
  Defined   
  Referenced

NY                                        Structure offset=288            
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        81
  Defined   
  Referenced

NZ                                        Structure offset=320            
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        82
  Defined   
  Referenced

PERCENT_SUM                               Structure offset=416            
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        85
  Defined   
  Referenced

PE_COORDS_TYPE                                                            
  Derived type
  Declared        91
  Defined   
  Referenced

REPORT_DIFFUSION                          Structure offset=0              
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        72
  Defined   
  Referenced

SCALING                                   Structure offset=32             
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        73
  Defined   
  Referenced

SIZEOFCHAR                                Static offset=9408              
  Integer(kind=8)
  Declared        64
  Defined   
  Referenced

SIZEOFINT                                 Static offset=9472              
  Integer(kind=8)
  Declared        65
  Defined   
  Referenced

SIZEOFREAL8                               Static offset=9536              
  Integer(kind=8)
  Declared        66
  Defined   
  Referenced

STENCIL                                   Structure offset=96             
  Integer(kind=4), Component of CMDLINE_OPTIONS_TYPE
  Declared        75
  Defined   
  Referenced

TSHEADER_TYPE                                                             
  Derived type
  Declared       106
  Defined   
  Referenced

TSTEP                                     Structure offset=0              
  Integer(kind=4), Component of TSHEADER_TYPE
  Declared       108
  Defined   
  Referenced

VIEW_DISP                                 Stack                           
  Variable, Integer(kind=4)
  Declared       146
  Defined   
  Referenced


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                     C o m m o n   B l o c k   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIFCMB5/                            Length: 4 bytes

     MG_CHECKPOINT_MOD                Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIFCMB9/                            Length: 4 bytes

     MG_CHECKPOINT_MOD                Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV1/                            Length: 28 bytes

     MG_CHECKPOINT_MOD                Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV2/                            Length: 24 bytes

     MG_CHECKPOINT_MOD                Block is used from MG_CONSTANTS_MOD

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIVC/                            Length: 2 bytes

     MG_CHECKPOINT_MOD                Block is used from MG_CONSTANTS_MOD


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
MG_CHECKPOINT in MG_CHECKPOINT_MOD
      Defined as:  Subroutine (line 136, file MG_CHECKPOINT.F)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MG_CHECKPOINT_MOD
      Defined as:  Module (line 28, file MG_CHECKPOINT.F)

        Uses:      MG_CONSTANTS_MOD
                   MG_OPTIONS_MOD
                   MG_CONSTANTS_MOD  (indirectly)

Name  Messages
----  --------
MG_CONSTANTS_MOD
      Defined as:  No definitions.

      Used By:     MG_CHECKPOINT_MOD
                   MG_CHECKPOINT_MOD  (indirectly)

Name  Messages
----  --------
MG_OPTIONS_MOD
      Defined as:  No definitions.

      Used By:     MG_CHECKPOINT_MOD

Name  Messages
----  --------
MPI_COMM_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_CONVERSION_FN_NULL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WTICK
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_WTIME
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PMPI_WTICK
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PMPI_WTIME
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
